// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/tendermint/tendermint/abci/client"
	types "github.com/tendermint/tendermint/abci/types"
	reflect "reflect"
)

// MockAppConnMempool is a mock of AppConnMempool interface
type MockAppConnMempool struct {
	ctrl     *gomock.Controller
	recorder *MockAppConnMempoolMockRecorder
}

// MockAppConnMempoolMockRecorder is the mock recorder for MockAppConnMempool
type MockAppConnMempoolMockRecorder struct {
	mock *MockAppConnMempool
}

// NewMockAppConnMempool creates a new mock instance
func NewMockAppConnMempool(ctrl *gomock.Controller) *MockAppConnMempool {
	mock := &MockAppConnMempool{ctrl: ctrl}
	mock.recorder = &MockAppConnMempoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppConnMempool) EXPECT() *MockAppConnMempoolMockRecorder {
	return m.recorder
}

// SetResponseCallback mocks base method
func (m *MockAppConnMempool) SetResponseCallback(arg0 client.Callback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResponseCallback", arg0)
}

// SetResponseCallback indicates an expected call of SetResponseCallback
func (mr *MockAppConnMempoolMockRecorder) SetResponseCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseCallback", reflect.TypeOf((*MockAppConnMempool)(nil).SetResponseCallback), arg0)
}

// Error mocks base method
func (m *MockAppConnMempool) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockAppConnMempoolMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockAppConnMempool)(nil).Error))
}

// CheckTxAsync mocks base method
func (m *MockAppConnMempool) CheckTxAsync(arg0 types.RequestCheckTx) *client.ReqRes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTxAsync", arg0)
	ret0, _ := ret[0].(*client.ReqRes)
	return ret0
}

// CheckTxAsync indicates an expected call of CheckTxAsync
func (mr *MockAppConnMempoolMockRecorder) CheckTxAsync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTxAsync", reflect.TypeOf((*MockAppConnMempool)(nil).CheckTxAsync), arg0)
}

// FlushAsync mocks base method
func (m *MockAppConnMempool) FlushAsync() *client.ReqRes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAsync")
	ret0, _ := ret[0].(*client.ReqRes)
	return ret0
}

// FlushAsync indicates an expected call of FlushAsync
func (mr *MockAppConnMempoolMockRecorder) FlushAsync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAsync", reflect.TypeOf((*MockAppConnMempool)(nil).FlushAsync))
}

// FlushSync mocks base method
func (m *MockAppConnMempool) FlushSync() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushSync")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushSync indicates an expected call of FlushSync
func (mr *MockAppConnMempoolMockRecorder) FlushSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushSync", reflect.TypeOf((*MockAppConnMempool)(nil).FlushSync))
}
