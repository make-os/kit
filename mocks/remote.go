// Code generated by MockGen. DO NOT EDIT.
// Source: types/core/remote.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	config "gitlab.com/makeos/mosdef/config"
	crypto "gitlab.com/makeos/mosdef/crypto"
	types "gitlab.com/makeos/mosdef/dht/types"
	logger "gitlab.com/makeos/mosdef/pkgs/logger"
	core "gitlab.com/makeos/mosdef/types/core"
	mempool "gitlab.com/makeos/mosdef/types/mempool"
	modules "gitlab.com/makeos/mosdef/types/modules"
	state "gitlab.com/makeos/mosdef/types/state"
	util "gitlab.com/makeos/mosdef/util"
	config0 "gopkg.in/src-d/go-git.v4/config"
	plumbing "gopkg.in/src-d/go-git.v4/plumbing"
	object "gopkg.in/src-d/go-git.v4/plumbing/object"
	packp "gopkg.in/src-d/go-git.v4/plumbing/protocol/packp"
	storer "gopkg.in/src-d/go-git.v4/plumbing/storer"
	storage "gopkg.in/src-d/go-git.v4/storage"
	io "io"
	reflect "reflect"
	time "time"
)

// MockLocalRepo is a mock of LocalRepo interface
type MockLocalRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLocalRepoMockRecorder
}

// MockLocalRepoMockRecorder is the mock recorder for MockLocalRepo
type MockLocalRepoMockRecorder struct {
	mock *MockLocalRepo
}

// NewMockLocalRepo creates a new mock instance
func NewMockLocalRepo(ctrl *gomock.Controller) *MockLocalRepo {
	mock := &MockLocalRepo{ctrl: ctrl}
	mock.recorder = &MockLocalRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocalRepo) EXPECT() *MockLocalRepoMockRecorder {
	return m.recorder
}

// RefDelete mocks base method
func (m *MockLocalRepo) RefDelete(refname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefDelete", refname)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefDelete indicates an expected call of RefDelete
func (mr *MockLocalRepoMockRecorder) RefDelete(refname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefDelete", reflect.TypeOf((*MockLocalRepo)(nil).RefDelete), refname)
}

// RefUpdate mocks base method
func (m *MockLocalRepo) RefUpdate(refname, commitHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefUpdate", refname, commitHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefUpdate indicates an expected call of RefUpdate
func (mr *MockLocalRepoMockRecorder) RefUpdate(refname, commitHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefUpdate", reflect.TypeOf((*MockLocalRepo)(nil).RefUpdate), refname, commitHash)
}

// TagDelete mocks base method
func (m *MockLocalRepo) TagDelete(tagname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", tagname)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagDelete indicates an expected call of TagDelete
func (mr *MockLocalRepoMockRecorder) TagDelete(tagname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockLocalRepo)(nil).TagDelete), tagname)
}

// RefGet mocks base method
func (m *MockLocalRepo) RefGet(refname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefGet", refname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefGet indicates an expected call of RefGet
func (mr *MockLocalRepoMockRecorder) RefGet(refname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefGet", reflect.TypeOf((*MockLocalRepo)(nil).RefGet), refname)
}

// GetRecentCommitHash mocks base method
func (m *MockLocalRepo) GetRecentCommitHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentCommitHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentCommitHash indicates an expected call of GetRecentCommitHash
func (mr *MockLocalRepoMockRecorder) GetRecentCommitHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentCommitHash", reflect.TypeOf((*MockLocalRepo)(nil).GetRecentCommitHash))
}

// GetHEAD mocks base method
func (m *MockLocalRepo) GetHEAD(short bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHEAD", short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHEAD indicates an expected call of GetHEAD
func (mr *MockLocalRepoMockRecorder) GetHEAD(short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHEAD", reflect.TypeOf((*MockLocalRepo)(nil).GetHEAD), short)
}

// NumCommits mocks base method
func (m *MockLocalRepo) NumCommits(branch string, noMerges bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumCommits", branch, noMerges)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumCommits indicates an expected call of NumCommits
func (mr *MockLocalRepoMockRecorder) NumCommits(branch, noMerges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumCommits", reflect.TypeOf((*MockLocalRepo)(nil).NumCommits), branch, noMerges)
}

// GetConfig mocks base method
func (m *MockLocalRepo) GetConfig(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockLocalRepoMockRecorder) GetConfig(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockLocalRepo)(nil).GetConfig), path)
}

// CreateSignedEmptyCommit mocks base method
func (m *MockLocalRepo) CreateSignedEmptyCommit(msg, signingKey string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, signingKey}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSignedEmptyCommit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSignedEmptyCommit indicates an expected call of CreateSignedEmptyCommit
func (mr *MockLocalRepoMockRecorder) CreateSignedEmptyCommit(msg, signingKey interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, signingKey}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignedEmptyCommit", reflect.TypeOf((*MockLocalRepo)(nil).CreateSignedEmptyCommit), varargs...)
}

// CreateTagWithMsg mocks base method
func (m *MockLocalRepo) CreateTagWithMsg(args []string, msg, signingKey string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{args, msg, signingKey}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagWithMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTagWithMsg indicates an expected call of CreateTagWithMsg
func (mr *MockLocalRepoMockRecorder) CreateTagWithMsg(args, msg, signingKey interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{args, msg, signingKey}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagWithMsg", reflect.TypeOf((*MockLocalRepo)(nil).CreateTagWithMsg), varargs...)
}

// ListTreeObjects mocks base method
func (m *MockLocalRepo) ListTreeObjects(treename string, recursive bool, env ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{treename, recursive}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjects", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjects indicates an expected call of ListTreeObjects
func (mr *MockLocalRepoMockRecorder) ListTreeObjects(treename, recursive interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{treename, recursive}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjects", reflect.TypeOf((*MockLocalRepo)(nil).ListTreeObjects), varargs...)
}

// ListTreeObjectsSlice mocks base method
func (m *MockLocalRepo) ListTreeObjectsSlice(treename string, recursive, showTrees bool, env ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{treename, recursive, showTrees}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjectsSlice", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjectsSlice indicates an expected call of ListTreeObjectsSlice
func (mr *MockLocalRepoMockRecorder) ListTreeObjectsSlice(treename, recursive, showTrees interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{treename, recursive, showTrees}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjectsSlice", reflect.TypeOf((*MockLocalRepo)(nil).ListTreeObjectsSlice), varargs...)
}

// RemoveEntryFromNote mocks base method
func (m *MockLocalRepo) RemoveEntryFromNote(notename, objectHash string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{notename, objectHash}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEntryFromNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEntryFromNote indicates an expected call of RemoveEntryFromNote
func (mr *MockLocalRepoMockRecorder) RemoveEntryFromNote(notename, objectHash interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{notename, objectHash}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntryFromNote", reflect.TypeOf((*MockLocalRepo)(nil).RemoveEntryFromNote), varargs...)
}

// AddEntryToNote mocks base method
func (m *MockLocalRepo) AddEntryToNote(notename, objectHash, note string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{notename, objectHash, note}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEntryToNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntryToNote indicates an expected call of AddEntryToNote
func (mr *MockLocalRepoMockRecorder) AddEntryToNote(notename, objectHash, note interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{notename, objectHash, note}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntryToNote", reflect.TypeOf((*MockLocalRepo)(nil).AddEntryToNote), varargs...)
}

// CreateBlob mocks base method
func (m *MockLocalRepo) CreateBlob(content string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob
func (mr *MockLocalRepoMockRecorder) CreateBlob(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockLocalRepo)(nil).CreateBlob), content)
}

// UpdateRecentCommitMsg mocks base method
func (m *MockLocalRepo) UpdateRecentCommitMsg(msg, signingKey string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, signingKey}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecentCommitMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecentCommitMsg indicates an expected call of UpdateRecentCommitMsg
func (mr *MockLocalRepoMockRecorder) UpdateRecentCommitMsg(msg, signingKey interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, signingKey}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecentCommitMsg", reflect.TypeOf((*MockLocalRepo)(nil).UpdateRecentCommitMsg), varargs...)
}

// IsAncestor mocks base method
func (m *MockLocalRepo) IsAncestor(commitA, commitB string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{commitA, commitB}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAncestor", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAncestor indicates an expected call of IsAncestor
func (mr *MockLocalRepoMockRecorder) IsAncestor(commitA, commitB interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{commitA, commitB}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAncestor", reflect.TypeOf((*MockLocalRepo)(nil).IsAncestor), varargs...)
}

// HasMergeCommits mocks base method
func (m *MockLocalRepo) HasMergeCommits(reference string, env ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{reference}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasMergeCommits", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMergeCommits indicates an expected call of HasMergeCommits
func (mr *MockLocalRepoMockRecorder) HasMergeCommits(reference interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{reference}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMergeCommits", reflect.TypeOf((*MockLocalRepo)(nil).HasMergeCommits), varargs...)
}

// GetMergeCommits mocks base method
func (m *MockLocalRepo) GetMergeCommits(reference string, env ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{reference}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeCommits", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeCommits indicates an expected call of GetMergeCommits
func (mr *MockLocalRepoMockRecorder) GetMergeCommits(reference interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{reference}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeCommits", reflect.TypeOf((*MockLocalRepo)(nil).GetMergeCommits), varargs...)
}

// CreateSingleFileCommit mocks base method
func (m *MockLocalRepo) CreateSingleFileCommit(filename, content, commitMsg, parent string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSingleFileCommit", filename, content, commitMsg, parent)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleFileCommit indicates an expected call of CreateSingleFileCommit
func (mr *MockLocalRepoMockRecorder) CreateSingleFileCommit(filename, content, commitMsg, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleFileCommit", reflect.TypeOf((*MockLocalRepo)(nil).CreateSingleFileCommit), filename, content, commitMsg, parent)
}

// Checkout mocks base method
func (m *MockLocalRepo) Checkout(refname string, create, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", refname, create, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout
func (mr *MockLocalRepoMockRecorder) Checkout(refname, create, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockLocalRepo)(nil).Checkout), refname, create, force)
}

// GetRefRootCommit mocks base method
func (m *MockLocalRepo) GetRefRootCommit(ref string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefRootCommit", ref)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefRootCommit indicates an expected call of GetRefRootCommit
func (mr *MockLocalRepoMockRecorder) GetRefRootCommit(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefRootCommit", reflect.TypeOf((*MockLocalRepo)(nil).GetRefRootCommit), ref)
}

// GetRefCommits mocks base method
func (m *MockLocalRepo) GetRefCommits(ref string, noMerges bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefCommits", ref, noMerges)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefCommits indicates an expected call of GetRefCommits
func (mr *MockLocalRepoMockRecorder) GetRefCommits(ref, noMerges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefCommits", reflect.TypeOf((*MockLocalRepo)(nil).GetRefCommits), ref, noMerges)
}

// Var mocks base method
func (m *MockLocalRepo) Var(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Var", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Var indicates an expected call of Var
func (mr *MockLocalRepoMockRecorder) Var(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Var", reflect.TypeOf((*MockLocalRepo)(nil).Var), name)
}

// ExpandShortHash mocks base method
func (m *MockLocalRepo) ExpandShortHash(hash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandShortHash", hash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandShortHash indicates an expected call of ExpandShortHash
func (mr *MockLocalRepoMockRecorder) ExpandShortHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandShortHash", reflect.TypeOf((*MockLocalRepo)(nil).ExpandShortHash), hash)
}

// GetName mocks base method
func (m *MockLocalRepo) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockLocalRepoMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockLocalRepo)(nil).GetName))
}

// GetNameFromPath mocks base method
func (m *MockLocalRepo) GetNameFromPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNameFromPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNameFromPath indicates an expected call of GetNameFromPath
func (mr *MockLocalRepoMockRecorder) GetNameFromPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNameFromPath", reflect.TypeOf((*MockLocalRepo)(nil).GetNameFromPath))
}

// GetNamespaceName mocks base method
func (m *MockLocalRepo) GetNamespaceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespaceName indicates an expected call of GetNamespaceName
func (mr *MockLocalRepoMockRecorder) GetNamespaceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceName", reflect.TypeOf((*MockLocalRepo)(nil).GetNamespaceName))
}

// GetNamespace mocks base method
func (m *MockLocalRepo) GetNamespace() *state.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(*state.Namespace)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockLocalRepoMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockLocalRepo)(nil).GetNamespace))
}

// References mocks base method
func (m *MockLocalRepo) References() (storer.ReferenceIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "References")
	ret0, _ := ret[0].(storer.ReferenceIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// References indicates an expected call of References
func (mr *MockLocalRepoMockRecorder) References() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "References", reflect.TypeOf((*MockLocalRepo)(nil).References))
}

// IsContributor mocks base method
func (m *MockLocalRepo) IsContributor(pushKeyID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContributor", pushKeyID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsContributor indicates an expected call of IsContributor
func (mr *MockLocalRepoMockRecorder) IsContributor(pushKeyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContributor", reflect.TypeOf((*MockLocalRepo)(nil).IsContributor), pushKeyID)
}

// GetRemoteURLs mocks base method
func (m *MockLocalRepo) GetRemoteURLs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteURLs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRemoteURLs indicates an expected call of GetRemoteURLs
func (mr *MockLocalRepoMockRecorder) GetRemoteURLs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteURLs", reflect.TypeOf((*MockLocalRepo)(nil).GetRemoteURLs))
}

// DeleteObject mocks base method
func (m *MockLocalRepo) DeleteObject(hash plumbing.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject
func (mr *MockLocalRepoMockRecorder) DeleteObject(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockLocalRepo)(nil).DeleteObject), hash)
}

// Reference mocks base method
func (m *MockLocalRepo) Reference(name plumbing.ReferenceName, resolved bool) (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reference", name, resolved)
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reference indicates an expected call of Reference
func (mr *MockLocalRepoMockRecorder) Reference(name, resolved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reference", reflect.TypeOf((*MockLocalRepo)(nil).Reference), name, resolved)
}

// Object mocks base method
func (m *MockLocalRepo) Object(t plumbing.ObjectType, h plumbing.Hash) (object.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object", t, h)
	ret0, _ := ret[0].(object.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Object indicates an expected call of Object
func (mr *MockLocalRepoMockRecorder) Object(t, h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockLocalRepo)(nil).Object), t, h)
}

// Objects mocks base method
func (m *MockLocalRepo) Objects() (*object.ObjectIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Objects")
	ret0, _ := ret[0].(*object.ObjectIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Objects indicates an expected call of Objects
func (mr *MockLocalRepoMockRecorder) Objects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Objects", reflect.TypeOf((*MockLocalRepo)(nil).Objects))
}

// CommitObjects mocks base method
func (m *MockLocalRepo) CommitObjects() (object.CommitIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitObjects")
	ret0, _ := ret[0].(object.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObjects indicates an expected call of CommitObjects
func (mr *MockLocalRepoMockRecorder) CommitObjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObjects", reflect.TypeOf((*MockLocalRepo)(nil).CommitObjects))
}

// CommitObject mocks base method
func (m *MockLocalRepo) CommitObject(h plumbing.Hash) (*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitObject", h)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObject indicates an expected call of CommitObject
func (mr *MockLocalRepoMockRecorder) CommitObject(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObject", reflect.TypeOf((*MockLocalRepo)(nil).CommitObject), h)
}

// WrappedCommitObject mocks base method
func (m *MockLocalRepo) WrappedCommitObject(h plumbing.Hash) (core.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrappedCommitObject", h)
	ret0, _ := ret[0].(core.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WrappedCommitObject indicates an expected call of WrappedCommitObject
func (mr *MockLocalRepoMockRecorder) WrappedCommitObject(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrappedCommitObject", reflect.TypeOf((*MockLocalRepo)(nil).WrappedCommitObject), h)
}

// BlobObject mocks base method
func (m *MockLocalRepo) BlobObject(h plumbing.Hash) (*object.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlobObject", h)
	ret0, _ := ret[0].(*object.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobObject indicates an expected call of BlobObject
func (mr *MockLocalRepoMockRecorder) BlobObject(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobObject", reflect.TypeOf((*MockLocalRepo)(nil).BlobObject), h)
}

// TagObject mocks base method
func (m *MockLocalRepo) TagObject(h plumbing.Hash) (*object.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagObject", h)
	ret0, _ := ret[0].(*object.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagObject indicates an expected call of TagObject
func (mr *MockLocalRepoMockRecorder) TagObject(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagObject", reflect.TypeOf((*MockLocalRepo)(nil).TagObject), h)
}

// Tag mocks base method
func (m *MockLocalRepo) Tag(name string) (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", name)
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tag indicates an expected call of Tag
func (mr *MockLocalRepoMockRecorder) Tag(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockLocalRepo)(nil).Tag), name)
}

// Config mocks base method
func (m *MockLocalRepo) Config() (*config0.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config0.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config
func (mr *MockLocalRepoMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockLocalRepo)(nil).Config))
}

// SetConfig mocks base method
func (m *MockLocalRepo) SetConfig(cfg *config0.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig
func (mr *MockLocalRepoMockRecorder) SetConfig(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockLocalRepo)(nil).SetConfig), cfg)
}

// SetPath mocks base method
func (m *MockLocalRepo) SetPath(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPath", path)
}

// SetPath indicates an expected call of SetPath
func (mr *MockLocalRepoMockRecorder) SetPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockLocalRepo)(nil).SetPath), path)
}

// GetReferences mocks base method
func (m *MockLocalRepo) GetReferences() ([]plumbing.ReferenceName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferences")
	ret0, _ := ret[0].([]plumbing.ReferenceName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferences indicates an expected call of GetReferences
func (mr *MockLocalRepoMockRecorder) GetReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferences", reflect.TypeOf((*MockLocalRepo)(nil).GetReferences))
}

// GetPath mocks base method
func (m *MockLocalRepo) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath
func (mr *MockLocalRepoMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockLocalRepo)(nil).GetPath))
}

// GetState mocks base method
func (m *MockLocalRepo) GetState() *state.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(*state.Repository)
	return ret0
}

// GetState indicates an expected call of GetState
func (mr *MockLocalRepoMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockLocalRepo)(nil).GetState))
}

// SetState mocks base method
func (m *MockLocalRepo) SetState(s *state.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", s)
}

// SetState indicates an expected call of SetState
func (mr *MockLocalRepoMockRecorder) SetState(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockLocalRepo)(nil).SetState), s)
}

// Head mocks base method
func (m *MockLocalRepo) Head() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head
func (mr *MockLocalRepoMockRecorder) Head() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockLocalRepo)(nil).Head))
}

// ObjectExist mocks base method
func (m *MockLocalRepo) ObjectExist(objHash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectExist", objHash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ObjectExist indicates an expected call of ObjectExist
func (mr *MockLocalRepoMockRecorder) ObjectExist(objHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectExist", reflect.TypeOf((*MockLocalRepo)(nil).ObjectExist), objHash)
}

// GetObjectSize mocks base method
func (m *MockLocalRepo) GetObjectSize(objHash string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectSize", objHash)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectSize indicates an expected call of GetObjectSize
func (mr *MockLocalRepoMockRecorder) GetObjectSize(objHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectSize", reflect.TypeOf((*MockLocalRepo)(nil).GetObjectSize), objHash)
}

// GetObjectDiskSize mocks base method
func (m *MockLocalRepo) GetObjectDiskSize(objHash string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectDiskSize", objHash)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectDiskSize indicates an expected call of GetObjectDiskSize
func (mr *MockLocalRepoMockRecorder) GetObjectDiskSize(objHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectDiskSize", reflect.TypeOf((*MockLocalRepo)(nil).GetObjectDiskSize), objHash)
}

// GetEncodedObject mocks base method
func (m *MockLocalRepo) GetEncodedObject(objHash string) (plumbing.EncodedObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncodedObject", objHash)
	ret0, _ := ret[0].(plumbing.EncodedObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncodedObject indicates an expected call of GetEncodedObject
func (mr *MockLocalRepoMockRecorder) GetEncodedObject(objHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncodedObject", reflect.TypeOf((*MockLocalRepo)(nil).GetEncodedObject), objHash)
}

// WriteObjectToFile mocks base method
func (m *MockLocalRepo) WriteObjectToFile(objectHash string, content []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteObjectToFile", objectHash, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteObjectToFile indicates an expected call of WriteObjectToFile
func (mr *MockLocalRepoMockRecorder) WriteObjectToFile(objectHash, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteObjectToFile", reflect.TypeOf((*MockLocalRepo)(nil).WriteObjectToFile), objectHash, content)
}

// GetObject mocks base method
func (m *MockLocalRepo) GetObject(objHash string) (object.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", objHash)
	ret0, _ := ret[0].(object.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject
func (mr *MockLocalRepoMockRecorder) GetObject(objHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockLocalRepo)(nil).GetObject), objHash)
}

// GetCompressedObject mocks base method
func (m *MockLocalRepo) GetCompressedObject(hash string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompressedObject", hash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompressedObject indicates an expected call of GetCompressedObject
func (mr *MockLocalRepoMockRecorder) GetCompressedObject(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompressedObject", reflect.TypeOf((*MockLocalRepo)(nil).GetCompressedObject), hash)
}

// GetHost mocks base method
func (m *MockLocalRepo) GetHost() storage.Storer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(storage.Storer)
	return ret0
}

// GetHost indicates an expected call of GetHost
func (mr *MockLocalRepoMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockLocalRepo)(nil).GetHost))
}

// Prune mocks base method
func (m *MockLocalRepo) Prune(olderThan time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prune", olderThan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prune indicates an expected call of Prune
func (mr *MockLocalRepoMockRecorder) Prune(olderThan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockLocalRepo)(nil).Prune), olderThan)
}

// NumIssueBranches mocks base method
func (m *MockLocalRepo) NumIssueBranches() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumIssueBranches")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumIssueBranches indicates an expected call of NumIssueBranches
func (mr *MockLocalRepoMockRecorder) NumIssueBranches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumIssueBranches", reflect.TypeOf((*MockLocalRepo)(nil).NumIssueBranches))
}

// GetFreeIssueNum mocks base method
func (m *MockLocalRepo) GetFreeIssueNum(startID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeIssueNum", startID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreeIssueNum indicates an expected call of GetFreeIssueNum
func (mr *MockLocalRepoMockRecorder) GetFreeIssueNum(startID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeIssueNum", reflect.TypeOf((*MockLocalRepo)(nil).GetFreeIssueNum), startID)
}

// GetAncestors mocks base method
func (m *MockLocalRepo) GetAncestors(commit *object.Commit, stopHash string, reverse bool) ([]*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAncestors", commit, stopHash, reverse)
	ret0, _ := ret[0].([]*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAncestors indicates an expected call of GetAncestors
func (mr *MockLocalRepoMockRecorder) GetAncestors(commit, stopHash, reverse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAncestors", reflect.TypeOf((*MockLocalRepo)(nil).GetAncestors), commit, stopHash, reverse)
}

// MockCommit is a mock of Commit interface
type MockCommit struct {
	ctrl     *gomock.Controller
	recorder *MockCommitMockRecorder
}

// MockCommitMockRecorder is the mock recorder for MockCommit
type MockCommitMockRecorder struct {
	mock *MockCommit
}

// NewMockCommit creates a new mock instance
func NewMockCommit(ctrl *gomock.Controller) *MockCommit {
	mock := &MockCommit{ctrl: ctrl}
	mock.recorder = &MockCommitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommit) EXPECT() *MockCommitMockRecorder {
	return m.recorder
}

// NumParents mocks base method
func (m *MockCommit) NumParents() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumParents")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumParents indicates an expected call of NumParents
func (mr *MockCommitMockRecorder) NumParents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumParents", reflect.TypeOf((*MockCommit)(nil).NumParents))
}

// Parent mocks base method
func (m *MockCommit) Parent(i int) (core.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent", i)
	ret0, _ := ret[0].(core.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parent indicates an expected call of Parent
func (mr *MockCommitMockRecorder) Parent(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockCommit)(nil).Parent), i)
}

// IsParent mocks base method
func (m *MockCommit) IsParent(hash string) (bool, core.Commit) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsParent", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(core.Commit)
	return ret0, ret1
}

// IsParent indicates an expected call of IsParent
func (mr *MockCommitMockRecorder) IsParent(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsParent", reflect.TypeOf((*MockCommit)(nil).IsParent), hash)
}

// UnWrap mocks base method
func (m *MockCommit) UnWrap() *object.Commit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnWrap")
	ret0, _ := ret[0].(*object.Commit)
	return ret0
}

// UnWrap indicates an expected call of UnWrap
func (mr *MockCommitMockRecorder) UnWrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnWrap", reflect.TypeOf((*MockCommit)(nil).UnWrap))
}

// GetCommitter mocks base method
func (m *MockCommit) GetCommitter() *object.Signature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitter")
	ret0, _ := ret[0].(*object.Signature)
	return ret0
}

// GetCommitter indicates an expected call of GetCommitter
func (mr *MockCommitMockRecorder) GetCommitter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitter", reflect.TypeOf((*MockCommit)(nil).GetCommitter))
}

// GetAuthor mocks base method
func (m *MockCommit) GetAuthor() *object.Signature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor")
	ret0, _ := ret[0].(*object.Signature)
	return ret0
}

// GetAuthor indicates an expected call of GetAuthor
func (mr *MockCommitMockRecorder) GetAuthor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockCommit)(nil).GetAuthor))
}

// GetTreeHash mocks base method
func (m *MockCommit) GetTreeHash() plumbing.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreeHash")
	ret0, _ := ret[0].(plumbing.Hash)
	return ret0
}

// GetTreeHash indicates an expected call of GetTreeHash
func (mr *MockCommitMockRecorder) GetTreeHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeHash", reflect.TypeOf((*MockCommit)(nil).GetTreeHash))
}

// GetHash mocks base method
func (m *MockCommit) GetHash() plumbing.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(plumbing.Hash)
	return ret0
}

// GetHash indicates an expected call of GetHash
func (mr *MockCommitMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockCommit)(nil).GetHash))
}

// GetTree mocks base method
func (m *MockCommit) GetTree() (*object.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTree")
	ret0, _ := ret[0].(*object.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTree indicates an expected call of GetTree
func (mr *MockCommitMockRecorder) GetTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTree", reflect.TypeOf((*MockCommit)(nil).GetTree))
}

// File mocks base method
func (m *MockCommit) File(path string) (*object.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File", path)
	ret0, _ := ret[0].(*object.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File
func (mr *MockCommitMockRecorder) File(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockCommit)(nil).File), path)
}

// MockPoolGetter is a mock of PoolGetter interface
type MockPoolGetter struct {
	ctrl     *gomock.Controller
	recorder *MockPoolGetterMockRecorder
}

// MockPoolGetterMockRecorder is the mock recorder for MockPoolGetter
type MockPoolGetterMockRecorder struct {
	mock *MockPoolGetter
}

// NewMockPoolGetter creates a new mock instance
func NewMockPoolGetter(ctrl *gomock.Controller) *MockPoolGetter {
	mock := &MockPoolGetter{ctrl: ctrl}
	mock.recorder = &MockPoolGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoolGetter) EXPECT() *MockPoolGetterMockRecorder {
	return m.recorder
}

// GetPushPool mocks base method
func (m *MockPoolGetter) GetPushPool() core.PushPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushPool")
	ret0, _ := ret[0].(core.PushPool)
	return ret0
}

// GetPushPool indicates an expected call of GetPushPool
func (mr *MockPoolGetterMockRecorder) GetPushPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushPool", reflect.TypeOf((*MockPoolGetter)(nil).GetPushPool))
}

// GetMempool mocks base method
func (m *MockPoolGetter) GetMempool() mempool.Mempool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMempool")
	ret0, _ := ret[0].(mempool.Mempool)
	return ret0
}

// GetMempool indicates an expected call of GetMempool
func (mr *MockPoolGetterMockRecorder) GetMempool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempool", reflect.TypeOf((*MockPoolGetter)(nil).GetMempool))
}

// MockRepoGetter is a mock of RepoGetter interface
type MockRepoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRepoGetterMockRecorder
}

// MockRepoGetterMockRecorder is the mock recorder for MockRepoGetter
type MockRepoGetterMockRecorder struct {
	mock *MockRepoGetter
}

// NewMockRepoGetter creates a new mock instance
func NewMockRepoGetter(ctrl *gomock.Controller) *MockRepoGetter {
	mock := &MockRepoGetter{ctrl: ctrl}
	mock.recorder = &MockRepoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoGetter) EXPECT() *MockRepoGetterMockRecorder {
	return m.recorder
}

// GetRepo mocks base method
func (m *MockRepoGetter) GetRepo(name string) (core.LocalRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", name)
	ret0, _ := ret[0].(core.LocalRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo
func (mr *MockRepoGetterMockRecorder) GetRepo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockRepoGetter)(nil).GetRepo), name)
}

// MockRepoUpdater is a mock of RepoUpdater interface
type MockRepoUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRepoUpdaterMockRecorder
}

// MockRepoUpdaterMockRecorder is the mock recorder for MockRepoUpdater
type MockRepoUpdaterMockRecorder struct {
	mock *MockRepoUpdater
}

// NewMockRepoUpdater creates a new mock instance
func NewMockRepoUpdater(ctrl *gomock.Controller) *MockRepoUpdater {
	mock := &MockRepoUpdater{ctrl: ctrl}
	mock.recorder = &MockRepoUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoUpdater) EXPECT() *MockRepoUpdaterMockRecorder {
	return m.recorder
}

// UpdateRepoWithTxPush mocks base method
func (m *MockRepoUpdater) UpdateRepoWithTxPush(tx *core.TxPush) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoWithTxPush", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoWithTxPush indicates an expected call of UpdateRepoWithTxPush
func (mr *MockRepoUpdaterMockRecorder) UpdateRepoWithTxPush(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoWithTxPush", reflect.TypeOf((*MockRepoUpdater)(nil).UpdateRepoWithTxPush), tx)
}

// MockPushPool is a mock of PushPool interface
type MockPushPool struct {
	ctrl     *gomock.Controller
	recorder *MockPushPoolMockRecorder
}

// MockPushPoolMockRecorder is the mock recorder for MockPushPool
type MockPushPoolMockRecorder struct {
	mock *MockPushPool
}

// NewMockPushPool creates a new mock instance
func NewMockPushPool(ctrl *gomock.Controller) *MockPushPool {
	mock := &MockPushPool{ctrl: ctrl}
	mock.recorder = &MockPushPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushPool) EXPECT() *MockPushPoolMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockPushPool) Add(tx core.RepoPushNote, noValidation ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{tx}
	for _, a := range noValidation {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockPushPoolMockRecorder) Add(tx interface{}, noValidation ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tx}, noValidation...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPushPool)(nil).Add), varargs...)
}

// Full mocks base method
func (m *MockPushPool) Full() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Full")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Full indicates an expected call of Full
func (mr *MockPushPoolMockRecorder) Full() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Full", reflect.TypeOf((*MockPushPool)(nil).Full))
}

// RepoHasPushNote mocks base method
func (m *MockPushPool) RepoHasPushNote(repo string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoHasPushNote", repo)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RepoHasPushNote indicates an expected call of RepoHasPushNote
func (mr *MockPushPoolMockRecorder) RepoHasPushNote(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoHasPushNote", reflect.TypeOf((*MockPushPool)(nil).RepoHasPushNote), repo)
}

// Get mocks base method
func (m *MockPushPool) Get(noteID string) *core.PushNote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", noteID)
	ret0, _ := ret[0].(*core.PushNote)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockPushPoolMockRecorder) Get(noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPushPool)(nil).Get), noteID)
}

// Len mocks base method
func (m *MockPushPool) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockPushPoolMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockPushPool)(nil).Len))
}

// Remove mocks base method
func (m *MockPushPool) Remove(pushNote *core.PushNote) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", pushNote)
}

// Remove indicates an expected call of Remove
func (mr *MockPushPoolMockRecorder) Remove(pushNote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPushPool)(nil).Remove), pushNote)
}

// MockRepoPushNote is a mock of RepoPushNote interface
type MockRepoPushNote struct {
	ctrl     *gomock.Controller
	recorder *MockRepoPushNoteMockRecorder
}

// MockRepoPushNoteMockRecorder is the mock recorder for MockRepoPushNote
type MockRepoPushNoteMockRecorder struct {
	mock *MockRepoPushNote
}

// NewMockRepoPushNote creates a new mock instance
func NewMockRepoPushNote(ctrl *gomock.Controller) *MockRepoPushNote {
	mock := &MockRepoPushNote{ctrl: ctrl}
	mock.recorder = &MockRepoPushNoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoPushNote) EXPECT() *MockRepoPushNoteMockRecorder {
	return m.recorder
}

// GetRepoName mocks base method
func (m *MockRepoPushNote) GetRepoName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepoName indicates an expected call of GetRepoName
func (mr *MockRepoPushNoteMockRecorder) GetRepoName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoName", reflect.TypeOf((*MockRepoPushNote)(nil).GetRepoName))
}

// GetEcoSize mocks base method
func (m *MockRepoPushNote) GetEcoSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEcoSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEcoSize indicates an expected call of GetEcoSize
func (mr *MockRepoPushNoteMockRecorder) GetEcoSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEcoSize", reflect.TypeOf((*MockRepoPushNote)(nil).GetEcoSize))
}

// Len mocks base method
func (m *MockRepoPushNote) Len() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockRepoPushNoteMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockRepoPushNote)(nil).Len))
}

// TxSize mocks base method
func (m *MockRepoPushNote) TxSize() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSize")
	ret0, _ := ret[0].(uint)
	return ret0
}

// TxSize indicates an expected call of TxSize
func (mr *MockRepoPushNoteMockRecorder) TxSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSize", reflect.TypeOf((*MockRepoPushNote)(nil).TxSize))
}

// BillableSize mocks base method
func (m *MockRepoPushNote) BillableSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillableSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// BillableSize indicates an expected call of BillableSize
func (mr *MockRepoPushNoteMockRecorder) BillableSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillableSize", reflect.TypeOf((*MockRepoPushNote)(nil).BillableSize))
}

// GetFee mocks base method
func (m *MockRepoPushNote) GetFee() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFee")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetFee indicates an expected call of GetFee
func (mr *MockRepoPushNoteMockRecorder) GetFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFee", reflect.TypeOf((*MockRepoPushNote)(nil).GetFee))
}

// GetPushedReferences mocks base method
func (m *MockRepoPushNote) GetPushedReferences() core.PushedReferences {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushedReferences")
	ret0, _ := ret[0].(core.PushedReferences)
	return ret0
}

// GetPushedReferences indicates an expected call of GetPushedReferences
func (mr *MockRepoPushNoteMockRecorder) GetPushedReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushedReferences", reflect.TypeOf((*MockRepoPushNote)(nil).GetPushedReferences))
}

// GetPusherKeyID mocks base method
func (m *MockRepoPushNote) GetPusherKeyID() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPusherKeyID")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPusherKeyID indicates an expected call of GetPusherKeyID
func (mr *MockRepoPushNoteMockRecorder) GetPusherKeyID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPusherKeyID", reflect.TypeOf((*MockRepoPushNote)(nil).GetPusherKeyID))
}

// GetPusherKeyIDString mocks base method
func (m *MockRepoPushNote) GetPusherKeyIDString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPusherKeyIDString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPusherKeyIDString indicates an expected call of GetPusherKeyIDString
func (mr *MockRepoPushNoteMockRecorder) GetPusherKeyIDString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPusherKeyIDString", reflect.TypeOf((*MockRepoPushNote)(nil).GetPusherKeyIDString))
}

// GetTargetRepo mocks base method
func (m *MockRepoPushNote) GetTargetRepo() core.LocalRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetRepo")
	ret0, _ := ret[0].(core.LocalRepo)
	return ret0
}

// GetTargetRepo indicates an expected call of GetTargetRepo
func (mr *MockRepoPushNoteMockRecorder) GetTargetRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetRepo", reflect.TypeOf((*MockRepoPushNote)(nil).GetTargetRepo))
}

// GetSize mocks base method
func (m *MockRepoPushNote) GetSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSize indicates an expected call of GetSize
func (mr *MockRepoPushNoteMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockRepoPushNote)(nil).GetSize))
}

// GetPushedObjects mocks base method
func (m *MockRepoPushNote) GetPushedObjects() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushedObjects")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPushedObjects indicates an expected call of GetPushedObjects
func (mr *MockRepoPushNoteMockRecorder) GetPushedObjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushedObjects", reflect.TypeOf((*MockRepoPushNote)(nil).GetPushedObjects))
}

// ID mocks base method
func (m *MockRepoPushNote) ID(recompute ...bool) util.Bytes32 {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range recompute {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ID", varargs...)
	ret0, _ := ret[0].(util.Bytes32)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockRepoPushNoteMockRecorder) ID(recompute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRepoPushNote)(nil).ID), recompute...)
}

// Bytes mocks base method
func (m *MockRepoPushNote) Bytes(recompute ...bool) []byte {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range recompute {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bytes", varargs...)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockRepoPushNoteMockRecorder) Bytes(recompute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockRepoPushNote)(nil).Bytes), recompute...)
}

// BytesAndID mocks base method
func (m *MockRepoPushNote) BytesAndID(recompute ...bool) ([]byte, util.Bytes32) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range recompute {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BytesAndID", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(util.Bytes32)
	return ret0, ret1
}

// BytesAndID indicates an expected call of BytesAndID
func (mr *MockRepoPushNoteMockRecorder) BytesAndID(recompute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesAndID", reflect.TypeOf((*MockRepoPushNote)(nil).BytesAndID), recompute...)
}

// BytesNoCache mocks base method
func (m *MockRepoPushNote) BytesNoCache() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesNoCache")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// BytesNoCache indicates an expected call of BytesNoCache
func (mr *MockRepoPushNoteMockRecorder) BytesNoCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesNoCache", reflect.TypeOf((*MockRepoPushNote)(nil).BytesNoCache))
}

// BytesNoSig mocks base method
func (m *MockRepoPushNote) BytesNoSig() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesNoSig")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// BytesNoSig indicates an expected call of BytesNoSig
func (mr *MockRepoPushNoteMockRecorder) BytesNoSig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesNoSig", reflect.TypeOf((*MockRepoPushNote)(nil).BytesNoSig))
}

// MockPruner is a mock of Pruner interface
type MockPruner struct {
	ctrl     *gomock.Controller
	recorder *MockPrunerMockRecorder
}

// MockPrunerMockRecorder is the mock recorder for MockPruner
type MockPrunerMockRecorder struct {
	mock *MockPruner
}

// NewMockPruner creates a new mock instance
func NewMockPruner(ctrl *gomock.Controller) *MockPruner {
	mock := &MockPruner{ctrl: ctrl}
	mock.recorder = &MockPrunerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPruner) EXPECT() *MockPrunerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockPruner) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockPrunerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPruner)(nil).Start))
}

// Schedule mocks base method
func (m *MockPruner) Schedule(repoName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Schedule", repoName)
}

// Schedule indicates an expected call of Schedule
func (mr *MockPrunerMockRecorder) Schedule(repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockPruner)(nil).Schedule), repoName)
}

// Prune mocks base method
func (m *MockPruner) Prune(repoName string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prune", repoName, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prune indicates an expected call of Prune
func (mr *MockPrunerMockRecorder) Prune(repoName, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockPruner)(nil).Prune), repoName, force)
}

// Stop mocks base method
func (m *MockPruner) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockPrunerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPruner)(nil).Stop))
}

// MockBareRepoState is a mock of BareRepoState interface
type MockBareRepoState struct {
	ctrl     *gomock.Controller
	recorder *MockBareRepoStateMockRecorder
}

// MockBareRepoStateMockRecorder is the mock recorder for MockBareRepoState
type MockBareRepoStateMockRecorder struct {
	mock *MockBareRepoState
}

// NewMockBareRepoState creates a new mock instance
func NewMockBareRepoState(ctrl *gomock.Controller) *MockBareRepoState {
	mock := &MockBareRepoState{ctrl: ctrl}
	mock.recorder = &MockBareRepoStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBareRepoState) EXPECT() *MockBareRepoStateMockRecorder {
	return m.recorder
}

// GetReferences mocks base method
func (m *MockBareRepoState) GetReferences() core.Items {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferences")
	ret0, _ := ret[0].(core.Items)
	return ret0
}

// GetReferences indicates an expected call of GetReferences
func (mr *MockBareRepoStateMockRecorder) GetReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferences", reflect.TypeOf((*MockBareRepoState)(nil).GetReferences))
}

// IsEmpty mocks base method
func (m *MockBareRepoState) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (mr *MockBareRepoStateMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockBareRepoState)(nil).IsEmpty))
}

// GetChanges mocks base method
func (m *MockBareRepoState) GetChanges(y core.BareRepoState) *core.Changes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChanges", y)
	ret0, _ := ret[0].(*core.Changes)
	return ret0
}

// GetChanges indicates an expected call of GetChanges
func (mr *MockBareRepoStateMockRecorder) GetChanges(y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChanges", reflect.TypeOf((*MockBareRepoState)(nil).GetChanges), y)
}

// MockItem is a mock of Item interface
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockItem) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockItemMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockItem)(nil).GetName))
}

// Equal mocks base method
func (m *MockItem) Equal(o interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", o)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockItemMockRecorder) Equal(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockItem)(nil).Equal), o)
}

// GetData mocks base method
func (m *MockItem) GetData() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetData indicates an expected call of GetData
func (mr *MockItemMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockItem)(nil).GetData))
}

// GetType mocks base method
func (m *MockItem) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockItemMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockItem)(nil).GetType))
}

// MockItems is a mock of Items interface
type MockItems struct {
	ctrl     *gomock.Controller
	recorder *MockItemsMockRecorder
}

// MockItemsMockRecorder is the mock recorder for MockItems
type MockItemsMockRecorder struct {
	mock *MockItems
}

// NewMockItems creates a new mock instance
func NewMockItems(ctrl *gomock.Controller) *MockItems {
	mock := &MockItems{ctrl: ctrl}
	mock.recorder = &MockItemsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItems) EXPECT() *MockItemsMockRecorder {
	return m.recorder
}

// Has mocks base method
func (m *MockItems) Has(name interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockItemsMockRecorder) Has(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockItems)(nil).Has), name)
}

// Get mocks base method
func (m *MockItems) Get(name interface{}) core.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(core.Item)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockItemsMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItems)(nil).Get), name)
}

// Equal mocks base method
func (m *MockItems) Equal(o interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", o)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockItemsMockRecorder) Equal(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockItems)(nil).Equal), o)
}

// ForEach mocks base method
func (m *MockItems) ForEach(arg0 func(core.Item) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEach", arg0)
}

// ForEach indicates an expected call of ForEach
func (mr *MockItemsMockRecorder) ForEach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockItems)(nil).ForEach), arg0)
}

// Len mocks base method
func (m *MockItems) Len() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockItemsMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockItems)(nil).Len))
}

// Bytes mocks base method
func (m *MockItems) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockItemsMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockItems)(nil).Bytes))
}

// Hash mocks base method
func (m *MockItems) Hash() util.Bytes32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(util.Bytes32)
	return ret0
}

// Hash indicates an expected call of Hash
func (mr *MockItemsMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockItems)(nil).Hash))
}

// MockRepoPushEndorsement is a mock of RepoPushEndorsement interface
type MockRepoPushEndorsement struct {
	ctrl     *gomock.Controller
	recorder *MockRepoPushEndorsementMockRecorder
}

// MockRepoPushEndorsementMockRecorder is the mock recorder for MockRepoPushEndorsement
type MockRepoPushEndorsementMockRecorder struct {
	mock *MockRepoPushEndorsement
}

// NewMockRepoPushEndorsement creates a new mock instance
func NewMockRepoPushEndorsement(ctrl *gomock.Controller) *MockRepoPushEndorsement {
	mock := &MockRepoPushEndorsement{ctrl: ctrl}
	mock.recorder = &MockRepoPushEndorsementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoPushEndorsement) EXPECT() *MockRepoPushEndorsementMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockRepoPushEndorsement) ID() util.Bytes32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(util.Bytes32)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockRepoPushEndorsementMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRepoPushEndorsement)(nil).ID))
}

// Bytes mocks base method
func (m *MockRepoPushEndorsement) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockRepoPushEndorsementMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockRepoPushEndorsement)(nil).Bytes))
}

// BytesAndID mocks base method
func (m *MockRepoPushEndorsement) BytesAndID() ([]byte, util.Bytes32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesAndID")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(util.Bytes32)
	return ret0, ret1
}

// BytesAndID indicates an expected call of BytesAndID
func (mr *MockRepoPushEndorsementMockRecorder) BytesAndID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesAndID", reflect.TypeOf((*MockRepoPushEndorsement)(nil).BytesAndID))
}

// MockRemoteServer is a mock of RemoteServer interface
type MockRemoteServer struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteServerMockRecorder
}

// MockRemoteServerMockRecorder is the mock recorder for MockRemoteServer
type MockRemoteServerMockRecorder struct {
	mock *MockRemoteServer
}

// NewMockRemoteServer creates a new mock instance
func NewMockRemoteServer(ctrl *gomock.Controller) *MockRemoteServer {
	mock := &MockRemoteServer{ctrl: ctrl}
	mock.recorder = &MockRemoteServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteServer) EXPECT() *MockRemoteServerMockRecorder {
	return m.recorder
}

// GetPushPool mocks base method
func (m *MockRemoteServer) GetPushPool() core.PushPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushPool")
	ret0, _ := ret[0].(core.PushPool)
	return ret0
}

// GetPushPool indicates an expected call of GetPushPool
func (mr *MockRemoteServerMockRecorder) GetPushPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushPool", reflect.TypeOf((*MockRemoteServer)(nil).GetPushPool))
}

// GetMempool mocks base method
func (m *MockRemoteServer) GetMempool() mempool.Mempool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMempool")
	ret0, _ := ret[0].(mempool.Mempool)
	return ret0
}

// GetMempool indicates an expected call of GetMempool
func (mr *MockRemoteServerMockRecorder) GetMempool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempool", reflect.TypeOf((*MockRemoteServer)(nil).GetMempool))
}

// GetRepo mocks base method
func (m *MockRemoteServer) GetRepo(name string) (core.LocalRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", name)
	ret0, _ := ret[0].(core.LocalRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo
func (mr *MockRemoteServerMockRecorder) GetRepo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockRemoteServer)(nil).GetRepo), name)
}

// UpdateRepoWithTxPush mocks base method
func (m *MockRemoteServer) UpdateRepoWithTxPush(tx *core.TxPush) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoWithTxPush", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoWithTxPush indicates an expected call of UpdateRepoWithTxPush
func (mr *MockRemoteServerMockRecorder) UpdateRepoWithTxPush(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoWithTxPush", reflect.TypeOf((*MockRemoteServer)(nil).UpdateRepoWithTxPush), tx)
}

// Log mocks base method
func (m *MockRemoteServer) Log() logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockRemoteServerMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockRemoteServer)(nil).Log))
}

// Cfg mocks base method
func (m *MockRemoteServer) Cfg() *config.AppConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cfg")
	ret0, _ := ret[0].(*config.AppConfig)
	return ret0
}

// Cfg indicates an expected call of Cfg
func (mr *MockRemoteServerMockRecorder) Cfg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cfg", reflect.TypeOf((*MockRemoteServer)(nil).Cfg))
}

// GetRepoState mocks base method
func (m *MockRemoteServer) GetRepoState(target core.LocalRepo, options ...core.KVOption) (core.BareRepoState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{target}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepoState", varargs...)
	ret0, _ := ret[0].(core.BareRepoState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoState indicates an expected call of GetRepoState
func (mr *MockRemoteServerMockRecorder) GetRepoState(target interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{target}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoState", reflect.TypeOf((*MockRemoteServer)(nil).GetRepoState), varargs...)
}

// GetPushKeyGetter mocks base method
func (m *MockRemoteServer) GetPushKeyGetter() core.PushKeyGetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushKeyGetter")
	ret0, _ := ret[0].(core.PushKeyGetter)
	return ret0
}

// GetPushKeyGetter indicates an expected call of GetPushKeyGetter
func (mr *MockRemoteServerMockRecorder) GetPushKeyGetter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushKeyGetter", reflect.TypeOf((*MockRemoteServer)(nil).GetPushKeyGetter))
}

// GetLogic mocks base method
func (m *MockRemoteServer) GetLogic() core.Logic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogic")
	ret0, _ := ret[0].(core.Logic)
	return ret0
}

// GetLogic indicates an expected call of GetLogic
func (mr *MockRemoteServerMockRecorder) GetLogic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogic", reflect.TypeOf((*MockRemoteServer)(nil).GetLogic))
}

// GetPrivateValidatorKey mocks base method
func (m *MockRemoteServer) GetPrivateValidatorKey() *crypto.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateValidatorKey")
	ret0, _ := ret[0].(*crypto.Key)
	return ret0
}

// GetPrivateValidatorKey indicates an expected call of GetPrivateValidatorKey
func (mr *MockRemoteServerMockRecorder) GetPrivateValidatorKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateValidatorKey", reflect.TypeOf((*MockRemoteServer)(nil).GetPrivateValidatorKey))
}

// Start mocks base method
func (m *MockRemoteServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockRemoteServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRemoteServer)(nil).Start))
}

// Wait mocks base method
func (m *MockRemoteServer) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockRemoteServerMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRemoteServer)(nil).Wait))
}

// CreateRepository mocks base method
func (m *MockRemoteServer) CreateRepository(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockRemoteServerMockRecorder) CreateRepository(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockRemoteServer)(nil).CreateRepository), name)
}

// BroadcastMsg mocks base method
func (m *MockRemoteServer) BroadcastMsg(ch byte, msg []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastMsg", ch, msg)
}

// BroadcastMsg indicates an expected call of BroadcastMsg
func (mr *MockRemoteServerMockRecorder) BroadcastMsg(ch, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMsg", reflect.TypeOf((*MockRemoteServer)(nil).BroadcastMsg), ch, msg)
}

// BroadcastPushObjects mocks base method
func (m *MockRemoteServer) BroadcastPushObjects(note core.RepoPushNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastPushObjects", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastPushObjects indicates an expected call of BroadcastPushObjects
func (mr *MockRemoteServerMockRecorder) BroadcastPushObjects(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastPushObjects", reflect.TypeOf((*MockRemoteServer)(nil).BroadcastPushObjects), note)
}

// SetPGPPubKeyGetter mocks base method
func (m *MockRemoteServer) SetPGPPubKeyGetter(pkGetter core.PushKeyGetter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPGPPubKeyGetter", pkGetter)
}

// SetPGPPubKeyGetter indicates an expected call of SetPGPPubKeyGetter
func (mr *MockRemoteServerMockRecorder) SetPGPPubKeyGetter(pkGetter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPGPPubKeyGetter", reflect.TypeOf((*MockRemoteServer)(nil).SetPGPPubKeyGetter), pkGetter)
}

// RegisterAPIHandlers mocks base method
func (m *MockRemoteServer) RegisterAPIHandlers(agg modules.ModuleHub) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterAPIHandlers", agg)
}

// RegisterAPIHandlers indicates an expected call of RegisterAPIHandlers
func (mr *MockRemoteServerMockRecorder) RegisterAPIHandlers(agg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAPIHandlers", reflect.TypeOf((*MockRemoteServer)(nil).RegisterAPIHandlers), agg)
}

// GetPruner mocks base method
func (m *MockRemoteServer) GetPruner() core.Pruner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPruner")
	ret0, _ := ret[0].(core.Pruner)
	return ret0
}

// GetPruner indicates an expected call of GetPruner
func (mr *MockRemoteServerMockRecorder) GetPruner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPruner", reflect.TypeOf((*MockRemoteServer)(nil).GetPruner))
}

// GetDHT mocks base method
func (m *MockRemoteServer) GetDHT() types.DHTNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHT")
	ret0, _ := ret[0].(types.DHTNode)
	return ret0
}

// GetDHT indicates an expected call of GetDHT
func (mr *MockRemoteServerMockRecorder) GetDHT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHT", reflect.TypeOf((*MockRemoteServer)(nil).GetDHT))
}

// ExecTxPush mocks base method
func (m *MockRemoteServer) ExecTxPush(tx *core.TxPush) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTxPush", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTxPush indicates an expected call of ExecTxPush
func (mr *MockRemoteServerMockRecorder) ExecTxPush(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTxPush", reflect.TypeOf((*MockRemoteServer)(nil).ExecTxPush), tx)
}

// Shutdown mocks base method
func (m *MockRemoteServer) Shutdown(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockRemoteServerMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRemoteServer)(nil).Shutdown), ctx)
}

// Stop mocks base method
func (m *MockRemoteServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockRemoteServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRemoteServer)(nil).Stop))
}

// MockLiteGit is a mock of LiteGit interface
type MockLiteGit struct {
	ctrl     *gomock.Controller
	recorder *MockLiteGitMockRecorder
}

// MockLiteGitMockRecorder is the mock recorder for MockLiteGit
type MockLiteGitMockRecorder struct {
	mock *MockLiteGit
}

// NewMockLiteGit creates a new mock instance
func NewMockLiteGit(ctrl *gomock.Controller) *MockLiteGit {
	mock := &MockLiteGit{ctrl: ctrl}
	mock.recorder = &MockLiteGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLiteGit) EXPECT() *MockLiteGitMockRecorder {
	return m.recorder
}

// RefDelete mocks base method
func (m *MockLiteGit) RefDelete(refname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefDelete", refname)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefDelete indicates an expected call of RefDelete
func (mr *MockLiteGitMockRecorder) RefDelete(refname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefDelete", reflect.TypeOf((*MockLiteGit)(nil).RefDelete), refname)
}

// RefUpdate mocks base method
func (m *MockLiteGit) RefUpdate(refname, commitHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefUpdate", refname, commitHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefUpdate indicates an expected call of RefUpdate
func (mr *MockLiteGitMockRecorder) RefUpdate(refname, commitHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefUpdate", reflect.TypeOf((*MockLiteGit)(nil).RefUpdate), refname, commitHash)
}

// TagDelete mocks base method
func (m *MockLiteGit) TagDelete(tagname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", tagname)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagDelete indicates an expected call of TagDelete
func (mr *MockLiteGitMockRecorder) TagDelete(tagname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockLiteGit)(nil).TagDelete), tagname)
}

// RefGet mocks base method
func (m *MockLiteGit) RefGet(refname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefGet", refname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefGet indicates an expected call of RefGet
func (mr *MockLiteGitMockRecorder) RefGet(refname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefGet", reflect.TypeOf((*MockLiteGit)(nil).RefGet), refname)
}

// GetRecentCommitHash mocks base method
func (m *MockLiteGit) GetRecentCommitHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentCommitHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentCommitHash indicates an expected call of GetRecentCommitHash
func (mr *MockLiteGitMockRecorder) GetRecentCommitHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentCommitHash", reflect.TypeOf((*MockLiteGit)(nil).GetRecentCommitHash))
}

// GetHEAD mocks base method
func (m *MockLiteGit) GetHEAD(short bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHEAD", short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHEAD indicates an expected call of GetHEAD
func (mr *MockLiteGitMockRecorder) GetHEAD(short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHEAD", reflect.TypeOf((*MockLiteGit)(nil).GetHEAD), short)
}

// NumCommits mocks base method
func (m *MockLiteGit) NumCommits(branch string, noMerges bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumCommits", branch, noMerges)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumCommits indicates an expected call of NumCommits
func (mr *MockLiteGitMockRecorder) NumCommits(branch, noMerges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumCommits", reflect.TypeOf((*MockLiteGit)(nil).NumCommits), branch, noMerges)
}

// GetConfig mocks base method
func (m *MockLiteGit) GetConfig(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockLiteGitMockRecorder) GetConfig(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockLiteGit)(nil).GetConfig), path)
}

// CreateSignedEmptyCommit mocks base method
func (m *MockLiteGit) CreateSignedEmptyCommit(msg, signingKey string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, signingKey}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSignedEmptyCommit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSignedEmptyCommit indicates an expected call of CreateSignedEmptyCommit
func (mr *MockLiteGitMockRecorder) CreateSignedEmptyCommit(msg, signingKey interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, signingKey}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignedEmptyCommit", reflect.TypeOf((*MockLiteGit)(nil).CreateSignedEmptyCommit), varargs...)
}

// CreateTagWithMsg mocks base method
func (m *MockLiteGit) CreateTagWithMsg(args []string, msg, signingKey string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{args, msg, signingKey}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagWithMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTagWithMsg indicates an expected call of CreateTagWithMsg
func (mr *MockLiteGitMockRecorder) CreateTagWithMsg(args, msg, signingKey interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{args, msg, signingKey}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagWithMsg", reflect.TypeOf((*MockLiteGit)(nil).CreateTagWithMsg), varargs...)
}

// ListTreeObjects mocks base method
func (m *MockLiteGit) ListTreeObjects(treename string, recursive bool, env ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{treename, recursive}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjects", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjects indicates an expected call of ListTreeObjects
func (mr *MockLiteGitMockRecorder) ListTreeObjects(treename, recursive interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{treename, recursive}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjects", reflect.TypeOf((*MockLiteGit)(nil).ListTreeObjects), varargs...)
}

// ListTreeObjectsSlice mocks base method
func (m *MockLiteGit) ListTreeObjectsSlice(treename string, recursive, showTrees bool, env ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{treename, recursive, showTrees}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjectsSlice", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjectsSlice indicates an expected call of ListTreeObjectsSlice
func (mr *MockLiteGitMockRecorder) ListTreeObjectsSlice(treename, recursive, showTrees interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{treename, recursive, showTrees}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjectsSlice", reflect.TypeOf((*MockLiteGit)(nil).ListTreeObjectsSlice), varargs...)
}

// RemoveEntryFromNote mocks base method
func (m *MockLiteGit) RemoveEntryFromNote(notename, objectHash string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{notename, objectHash}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEntryFromNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEntryFromNote indicates an expected call of RemoveEntryFromNote
func (mr *MockLiteGitMockRecorder) RemoveEntryFromNote(notename, objectHash interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{notename, objectHash}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntryFromNote", reflect.TypeOf((*MockLiteGit)(nil).RemoveEntryFromNote), varargs...)
}

// AddEntryToNote mocks base method
func (m *MockLiteGit) AddEntryToNote(notename, objectHash, note string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{notename, objectHash, note}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEntryToNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntryToNote indicates an expected call of AddEntryToNote
func (mr *MockLiteGitMockRecorder) AddEntryToNote(notename, objectHash, note interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{notename, objectHash, note}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntryToNote", reflect.TypeOf((*MockLiteGit)(nil).AddEntryToNote), varargs...)
}

// CreateBlob mocks base method
func (m *MockLiteGit) CreateBlob(content string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob
func (mr *MockLiteGitMockRecorder) CreateBlob(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockLiteGit)(nil).CreateBlob), content)
}

// UpdateRecentCommitMsg mocks base method
func (m *MockLiteGit) UpdateRecentCommitMsg(msg, signingKey string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, signingKey}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecentCommitMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecentCommitMsg indicates an expected call of UpdateRecentCommitMsg
func (mr *MockLiteGitMockRecorder) UpdateRecentCommitMsg(msg, signingKey interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, signingKey}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecentCommitMsg", reflect.TypeOf((*MockLiteGit)(nil).UpdateRecentCommitMsg), varargs...)
}

// IsAncestor mocks base method
func (m *MockLiteGit) IsAncestor(commitA, commitB string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{commitA, commitB}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAncestor", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAncestor indicates an expected call of IsAncestor
func (mr *MockLiteGitMockRecorder) IsAncestor(commitA, commitB interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{commitA, commitB}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAncestor", reflect.TypeOf((*MockLiteGit)(nil).IsAncestor), varargs...)
}

// HasMergeCommits mocks base method
func (m *MockLiteGit) HasMergeCommits(reference string, env ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{reference}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasMergeCommits", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMergeCommits indicates an expected call of HasMergeCommits
func (mr *MockLiteGitMockRecorder) HasMergeCommits(reference interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{reference}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMergeCommits", reflect.TypeOf((*MockLiteGit)(nil).HasMergeCommits), varargs...)
}

// GetMergeCommits mocks base method
func (m *MockLiteGit) GetMergeCommits(reference string, env ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{reference}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeCommits", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeCommits indicates an expected call of GetMergeCommits
func (mr *MockLiteGitMockRecorder) GetMergeCommits(reference interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{reference}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeCommits", reflect.TypeOf((*MockLiteGit)(nil).GetMergeCommits), varargs...)
}

// CreateSingleFileCommit mocks base method
func (m *MockLiteGit) CreateSingleFileCommit(filename, content, commitMsg, parent string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSingleFileCommit", filename, content, commitMsg, parent)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleFileCommit indicates an expected call of CreateSingleFileCommit
func (mr *MockLiteGitMockRecorder) CreateSingleFileCommit(filename, content, commitMsg, parent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleFileCommit", reflect.TypeOf((*MockLiteGit)(nil).CreateSingleFileCommit), filename, content, commitMsg, parent)
}

// Checkout mocks base method
func (m *MockLiteGit) Checkout(refname string, create, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", refname, create, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout
func (mr *MockLiteGitMockRecorder) Checkout(refname, create, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockLiteGit)(nil).Checkout), refname, create, force)
}

// GetRefRootCommit mocks base method
func (m *MockLiteGit) GetRefRootCommit(ref string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefRootCommit", ref)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefRootCommit indicates an expected call of GetRefRootCommit
func (mr *MockLiteGitMockRecorder) GetRefRootCommit(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefRootCommit", reflect.TypeOf((*MockLiteGit)(nil).GetRefRootCommit), ref)
}

// GetRefCommits mocks base method
func (m *MockLiteGit) GetRefCommits(ref string, noMerges bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefCommits", ref, noMerges)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefCommits indicates an expected call of GetRefCommits
func (mr *MockLiteGitMockRecorder) GetRefCommits(ref, noMerges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefCommits", reflect.TypeOf((*MockLiteGit)(nil).GetRefCommits), ref, noMerges)
}

// Var mocks base method
func (m *MockLiteGit) Var(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Var", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Var indicates an expected call of Var
func (mr *MockLiteGitMockRecorder) Var(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Var", reflect.TypeOf((*MockLiteGit)(nil).Var), name)
}

// ExpandShortHash mocks base method
func (m *MockLiteGit) ExpandShortHash(hash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandShortHash", hash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandShortHash indicates an expected call of ExpandShortHash
func (mr *MockLiteGitMockRecorder) ExpandShortHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandShortHash", reflect.TypeOf((*MockLiteGit)(nil).ExpandShortHash), hash)
}

// MockCommitTree is a mock of CommitTree interface
type MockCommitTree struct {
	ctrl     *gomock.Controller
	recorder *MockCommitTreeMockRecorder
}

// MockCommitTreeMockRecorder is the mock recorder for MockCommitTree
type MockCommitTreeMockRecorder struct {
	mock *MockCommitTree
}

// NewMockCommitTree creates a new mock instance
func NewMockCommitTree(ctrl *gomock.Controller) *MockCommitTree {
	mock := &MockCommitTree{ctrl: ctrl}
	mock.recorder = &MockCommitTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitTree) EXPECT() *MockCommitTreeMockRecorder {
	return m.recorder
}

// File mocks base method
func (m *MockCommitTree) File(path string) (*object.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File", path)
	ret0, _ := ret[0].(*object.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File
func (mr *MockCommitTreeMockRecorder) File(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockCommitTree)(nil).File), path)
}

// Size mocks base method
func (m *MockCommitTree) Size(path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size
func (mr *MockCommitTreeMockRecorder) Size(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockCommitTree)(nil).Size), path)
}

// Tree mocks base method
func (m *MockCommitTree) Tree(path string) (*object.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tree", path)
	ret0, _ := ret[0].(*object.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tree indicates an expected call of Tree
func (mr *MockCommitTreeMockRecorder) Tree(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tree", reflect.TypeOf((*MockCommitTree)(nil).Tree), path)
}

// TreeEntryFile mocks base method
func (m *MockCommitTree) TreeEntryFile(e *object.TreeEntry) (*object.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TreeEntryFile", e)
	ret0, _ := ret[0].(*object.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TreeEntryFile indicates an expected call of TreeEntryFile
func (mr *MockCommitTreeMockRecorder) TreeEntryFile(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TreeEntryFile", reflect.TypeOf((*MockCommitTree)(nil).TreeEntryFile), e)
}

// FindEntry mocks base method
func (m *MockCommitTree) FindEntry(path string) (*object.TreeEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntry", path)
	ret0, _ := ret[0].(*object.TreeEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntry indicates an expected call of FindEntry
func (mr *MockCommitTreeMockRecorder) FindEntry(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntry", reflect.TypeOf((*MockCommitTree)(nil).FindEntry), path)
}

// Files mocks base method
func (m *MockCommitTree) Files() *object.FileIter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Files")
	ret0, _ := ret[0].(*object.FileIter)
	return ret0
}

// Files indicates an expected call of Files
func (mr *MockCommitTreeMockRecorder) Files() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Files", reflect.TypeOf((*MockCommitTree)(nil).Files))
}

// ID mocks base method
func (m *MockCommitTree) ID() plumbing.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(plumbing.Hash)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockCommitTreeMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCommitTree)(nil).ID))
}

// Type mocks base method
func (m *MockCommitTree) Type() plumbing.ObjectType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(plumbing.ObjectType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockCommitTreeMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCommitTree)(nil).Type))
}

// Decode mocks base method
func (m *MockCommitTree) Decode(o plumbing.EncodedObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockCommitTreeMockRecorder) Decode(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCommitTree)(nil).Decode), o)
}

// Encode mocks base method
func (m *MockCommitTree) Encode(o plumbing.EncodedObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode
func (mr *MockCommitTreeMockRecorder) Encode(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockCommitTree)(nil).Encode), o)
}

// MockPushHandler is a mock of PushHandler interface
type MockPushHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPushHandlerMockRecorder
}

// MockPushHandlerMockRecorder is the mock recorder for MockPushHandler
type MockPushHandlerMockRecorder struct {
	mock *MockPushHandler
}

// NewMockPushHandler creates a new mock instance
func NewMockPushHandler(ctrl *gomock.Controller) *MockPushHandler {
	mock := &MockPushHandler{ctrl: ctrl}
	mock.recorder = &MockPushHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushHandler) EXPECT() *MockPushHandlerMockRecorder {
	return m.recorder
}

// HandleStream mocks base method
func (m *MockPushHandler) HandleStream(packfile io.Reader, gitReceivePack io.WriteCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleStream", packfile, gitReceivePack)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStream indicates an expected call of HandleStream
func (mr *MockPushHandlerMockRecorder) HandleStream(packfile, gitReceivePack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStream", reflect.TypeOf((*MockPushHandler)(nil).HandleStream), packfile, gitReceivePack)
}

// HandleAuthorization mocks base method
func (m *MockPushHandler) HandleAuthorization(ur *packp.ReferenceUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAuthorization", ur)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAuthorization indicates an expected call of HandleAuthorization
func (mr *MockPushHandlerMockRecorder) HandleAuthorization(ur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAuthorization", reflect.TypeOf((*MockPushHandler)(nil).HandleAuthorization), ur)
}

// HandleReferences mocks base method
func (m *MockPushHandler) HandleReferences() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleReferences")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleReferences indicates an expected call of HandleReferences
func (mr *MockPushHandlerMockRecorder) HandleReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleReferences", reflect.TypeOf((*MockPushHandler)(nil).HandleReferences))
}

// HandleUpdate mocks base method
func (m *MockPushHandler) HandleUpdate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUpdate")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUpdate indicates an expected call of HandleUpdate
func (mr *MockPushHandlerMockRecorder) HandleUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdate", reflect.TypeOf((*MockPushHandler)(nil).HandleUpdate))
}
