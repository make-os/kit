// Code generated by MockGen. DO NOT EDIT.
// Source: types/core/remote.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	config "gitlab.com/makeos/mosdef/config"
	crypto "gitlab.com/makeos/mosdef/crypto"
	types "gitlab.com/makeos/mosdef/dht/types"
	logger "gitlab.com/makeos/mosdef/pkgs/logger"
	types0 "gitlab.com/makeos/mosdef/remote/pushpool/types"
	types1 "gitlab.com/makeos/mosdef/remote/types"
	types2 "gitlab.com/makeos/mosdef/types"
	core "gitlab.com/makeos/mosdef/types/core"
	modules "gitlab.com/makeos/mosdef/types/modules"
	util "gitlab.com/makeos/mosdef/util"
	reflect "reflect"
)

// MockPoolGetter is a mock of PoolGetter interface
type MockPoolGetter struct {
	ctrl     *gomock.Controller
	recorder *MockPoolGetterMockRecorder
}

// MockPoolGetterMockRecorder is the mock recorder for MockPoolGetter
type MockPoolGetterMockRecorder struct {
	mock *MockPoolGetter
}

// NewMockPoolGetter creates a new mock instance
func NewMockPoolGetter(ctrl *gomock.Controller) *MockPoolGetter {
	mock := &MockPoolGetter{ctrl: ctrl}
	mock.recorder = &MockPoolGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoolGetter) EXPECT() *MockPoolGetterMockRecorder {
	return m.recorder
}

// GetPushPool mocks base method
func (m *MockPoolGetter) GetPushPool() types0.PushPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushPool")
	ret0, _ := ret[0].(types0.PushPool)
	return ret0
}

// GetPushPool indicates an expected call of GetPushPool
func (mr *MockPoolGetterMockRecorder) GetPushPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushPool", reflect.TypeOf((*MockPoolGetter)(nil).GetPushPool))
}

// GetMempool mocks base method
func (m *MockPoolGetter) GetMempool() core.Mempool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMempool")
	ret0, _ := ret[0].(core.Mempool)
	return ret0
}

// GetMempool indicates an expected call of GetMempool
func (mr *MockPoolGetterMockRecorder) GetMempool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempool", reflect.TypeOf((*MockPoolGetter)(nil).GetMempool))
}

// MockRepoGetter is a mock of RepoGetter interface
type MockRepoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRepoGetterMockRecorder
}

// MockRepoGetterMockRecorder is the mock recorder for MockRepoGetter
type MockRepoGetterMockRecorder struct {
	mock *MockRepoGetter
}

// NewMockRepoGetter creates a new mock instance
func NewMockRepoGetter(ctrl *gomock.Controller) *MockRepoGetter {
	mock := &MockRepoGetter{ctrl: ctrl}
	mock.recorder = &MockRepoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoGetter) EXPECT() *MockRepoGetterMockRecorder {
	return m.recorder
}

// GetRepo mocks base method
func (m *MockRepoGetter) GetRepo(name string) (types0.LocalRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", name)
	ret0, _ := ret[0].(types0.LocalRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo
func (mr *MockRepoGetterMockRecorder) GetRepo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockRepoGetter)(nil).GetRepo), name)
}

// MockRepoUpdater is a mock of RepoUpdater interface
type MockRepoUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRepoUpdaterMockRecorder
}

// MockRepoUpdaterMockRecorder is the mock recorder for MockRepoUpdater
type MockRepoUpdaterMockRecorder struct {
	mock *MockRepoUpdater
}

// NewMockRepoUpdater creates a new mock instance
func NewMockRepoUpdater(ctrl *gomock.Controller) *MockRepoUpdater {
	mock := &MockRepoUpdater{ctrl: ctrl}
	mock.recorder = &MockRepoUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoUpdater) EXPECT() *MockRepoUpdaterMockRecorder {
	return m.recorder
}

// UpdateRepoWithTxPush mocks base method
func (m *MockRepoUpdater) UpdateRepoWithTxPush(tx types2.BaseTx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoWithTxPush", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoWithTxPush indicates an expected call of UpdateRepoWithTxPush
func (mr *MockRepoUpdaterMockRecorder) UpdateRepoWithTxPush(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoWithTxPush", reflect.TypeOf((*MockRepoUpdater)(nil).UpdateRepoWithTxPush), tx)
}

// MockBareRepoState is a mock of BareRepoState interface
type MockBareRepoState struct {
	ctrl     *gomock.Controller
	recorder *MockBareRepoStateMockRecorder
}

// MockBareRepoStateMockRecorder is the mock recorder for MockBareRepoState
type MockBareRepoStateMockRecorder struct {
	mock *MockBareRepoState
}

// NewMockBareRepoState creates a new mock instance
func NewMockBareRepoState(ctrl *gomock.Controller) *MockBareRepoState {
	mock := &MockBareRepoState{ctrl: ctrl}
	mock.recorder = &MockBareRepoStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBareRepoState) EXPECT() *MockBareRepoStateMockRecorder {
	return m.recorder
}

// GetReferences mocks base method
func (m *MockBareRepoState) GetReferences() core.Items {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferences")
	ret0, _ := ret[0].(core.Items)
	return ret0
}

// GetReferences indicates an expected call of GetReferences
func (mr *MockBareRepoStateMockRecorder) GetReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferences", reflect.TypeOf((*MockBareRepoState)(nil).GetReferences))
}

// IsEmpty mocks base method
func (m *MockBareRepoState) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (mr *MockBareRepoStateMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockBareRepoState)(nil).IsEmpty))
}

// GetChanges mocks base method
func (m *MockBareRepoState) GetChanges(y core.BareRepoState) *core.Changes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChanges", y)
	ret0, _ := ret[0].(*core.Changes)
	return ret0
}

// GetChanges indicates an expected call of GetChanges
func (mr *MockBareRepoStateMockRecorder) GetChanges(y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChanges", reflect.TypeOf((*MockBareRepoState)(nil).GetChanges), y)
}

// MockItem is a mock of Item interface
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockItem) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockItemMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockItem)(nil).GetName))
}

// Equal mocks base method
func (m *MockItem) Equal(o interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", o)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockItemMockRecorder) Equal(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockItem)(nil).Equal), o)
}

// GetData mocks base method
func (m *MockItem) GetData() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetData indicates an expected call of GetData
func (mr *MockItemMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockItem)(nil).GetData))
}

// GetType mocks base method
func (m *MockItem) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockItemMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockItem)(nil).GetType))
}

// MockItems is a mock of Items interface
type MockItems struct {
	ctrl     *gomock.Controller
	recorder *MockItemsMockRecorder
}

// MockItemsMockRecorder is the mock recorder for MockItems
type MockItemsMockRecorder struct {
	mock *MockItems
}

// NewMockItems creates a new mock instance
func NewMockItems(ctrl *gomock.Controller) *MockItems {
	mock := &MockItems{ctrl: ctrl}
	mock.recorder = &MockItemsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItems) EXPECT() *MockItemsMockRecorder {
	return m.recorder
}

// Has mocks base method
func (m *MockItems) Has(name interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockItemsMockRecorder) Has(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockItems)(nil).Has), name)
}

// Get mocks base method
func (m *MockItems) Get(name interface{}) core.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(core.Item)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockItemsMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItems)(nil).Get), name)
}

// Equal mocks base method
func (m *MockItems) Equal(o interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", o)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockItemsMockRecorder) Equal(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockItems)(nil).Equal), o)
}

// ForEach mocks base method
func (m *MockItems) ForEach(arg0 func(core.Item) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEach", arg0)
}

// ForEach indicates an expected call of ForEach
func (mr *MockItemsMockRecorder) ForEach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockItems)(nil).ForEach), arg0)
}

// Len mocks base method
func (m *MockItems) Len() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockItemsMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockItems)(nil).Len))
}

// Bytes mocks base method
func (m *MockItems) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockItemsMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockItems)(nil).Bytes))
}

// Hash mocks base method
func (m *MockItems) Hash() util.Bytes32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(util.Bytes32)
	return ret0
}

// Hash indicates an expected call of Hash
func (mr *MockItemsMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockItems)(nil).Hash))
}

// MockRepoPushEndorsement is a mock of RepoPushEndorsement interface
type MockRepoPushEndorsement struct {
	ctrl     *gomock.Controller
	recorder *MockRepoPushEndorsementMockRecorder
}

// MockRepoPushEndorsementMockRecorder is the mock recorder for MockRepoPushEndorsement
type MockRepoPushEndorsementMockRecorder struct {
	mock *MockRepoPushEndorsement
}

// NewMockRepoPushEndorsement creates a new mock instance
func NewMockRepoPushEndorsement(ctrl *gomock.Controller) *MockRepoPushEndorsement {
	mock := &MockRepoPushEndorsement{ctrl: ctrl}
	mock.recorder = &MockRepoPushEndorsementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoPushEndorsement) EXPECT() *MockRepoPushEndorsementMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockRepoPushEndorsement) ID() util.Bytes32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(util.Bytes32)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockRepoPushEndorsementMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRepoPushEndorsement)(nil).ID))
}

// Bytes mocks base method
func (m *MockRepoPushEndorsement) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockRepoPushEndorsementMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockRepoPushEndorsement)(nil).Bytes))
}

// BytesAndID mocks base method
func (m *MockRepoPushEndorsement) BytesAndID() ([]byte, util.Bytes32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesAndID")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(util.Bytes32)
	return ret0, ret1
}

// BytesAndID indicates an expected call of BytesAndID
func (mr *MockRepoPushEndorsementMockRecorder) BytesAndID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesAndID", reflect.TypeOf((*MockRepoPushEndorsement)(nil).BytesAndID))
}

// MockRemoteServer is a mock of RemoteServer interface
type MockRemoteServer struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteServerMockRecorder
}

// MockRemoteServerMockRecorder is the mock recorder for MockRemoteServer
type MockRemoteServerMockRecorder struct {
	mock *MockRemoteServer
}

// NewMockRemoteServer creates a new mock instance
func NewMockRemoteServer(ctrl *gomock.Controller) *MockRemoteServer {
	mock := &MockRemoteServer{ctrl: ctrl}
	mock.recorder = &MockRemoteServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteServer) EXPECT() *MockRemoteServerMockRecorder {
	return m.recorder
}

// GetPushPool mocks base method
func (m *MockRemoteServer) GetPushPool() types0.PushPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushPool")
	ret0, _ := ret[0].(types0.PushPool)
	return ret0
}

// GetPushPool indicates an expected call of GetPushPool
func (mr *MockRemoteServerMockRecorder) GetPushPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushPool", reflect.TypeOf((*MockRemoteServer)(nil).GetPushPool))
}

// GetMempool mocks base method
func (m *MockRemoteServer) GetMempool() core.Mempool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMempool")
	ret0, _ := ret[0].(core.Mempool)
	return ret0
}

// GetMempool indicates an expected call of GetMempool
func (mr *MockRemoteServerMockRecorder) GetMempool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempool", reflect.TypeOf((*MockRemoteServer)(nil).GetMempool))
}

// GetRepo mocks base method
func (m *MockRemoteServer) GetRepo(name string) (types0.LocalRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", name)
	ret0, _ := ret[0].(types0.LocalRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo
func (mr *MockRemoteServerMockRecorder) GetRepo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockRemoteServer)(nil).GetRepo), name)
}

// UpdateRepoWithTxPush mocks base method
func (m *MockRemoteServer) UpdateRepoWithTxPush(tx types2.BaseTx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoWithTxPush", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoWithTxPush indicates an expected call of UpdateRepoWithTxPush
func (mr *MockRemoteServerMockRecorder) UpdateRepoWithTxPush(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoWithTxPush", reflect.TypeOf((*MockRemoteServer)(nil).UpdateRepoWithTxPush), tx)
}

// Log mocks base method
func (m *MockRemoteServer) Log() logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockRemoteServerMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockRemoteServer)(nil).Log))
}

// Cfg mocks base method
func (m *MockRemoteServer) Cfg() *config.AppConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cfg")
	ret0, _ := ret[0].(*config.AppConfig)
	return ret0
}

// Cfg indicates an expected call of Cfg
func (mr *MockRemoteServerMockRecorder) Cfg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cfg", reflect.TypeOf((*MockRemoteServer)(nil).Cfg))
}

// GetRepoState mocks base method
func (m *MockRemoteServer) GetRepoState(target types0.LocalRepo, options ...core.KVOption) (core.BareRepoState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{target}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepoState", varargs...)
	ret0, _ := ret[0].(core.BareRepoState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoState indicates an expected call of GetRepoState
func (mr *MockRemoteServerMockRecorder) GetRepoState(target interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{target}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoState", reflect.TypeOf((*MockRemoteServer)(nil).GetRepoState), varargs...)
}

// GetPushKeyGetter mocks base method
func (m *MockRemoteServer) GetPushKeyGetter() core.PushKeyGetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushKeyGetter")
	ret0, _ := ret[0].(core.PushKeyGetter)
	return ret0
}

// GetPushKeyGetter indicates an expected call of GetPushKeyGetter
func (mr *MockRemoteServerMockRecorder) GetPushKeyGetter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushKeyGetter", reflect.TypeOf((*MockRemoteServer)(nil).GetPushKeyGetter))
}

// GetLogic mocks base method
func (m *MockRemoteServer) GetLogic() core.Logic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogic")
	ret0, _ := ret[0].(core.Logic)
	return ret0
}

// GetLogic indicates an expected call of GetLogic
func (mr *MockRemoteServerMockRecorder) GetLogic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogic", reflect.TypeOf((*MockRemoteServer)(nil).GetLogic))
}

// GetPrivateValidatorKey mocks base method
func (m *MockRemoteServer) GetPrivateValidatorKey() *crypto.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateValidatorKey")
	ret0, _ := ret[0].(*crypto.Key)
	return ret0
}

// GetPrivateValidatorKey indicates an expected call of GetPrivateValidatorKey
func (mr *MockRemoteServerMockRecorder) GetPrivateValidatorKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateValidatorKey", reflect.TypeOf((*MockRemoteServer)(nil).GetPrivateValidatorKey))
}

// Start mocks base method
func (m *MockRemoteServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockRemoteServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRemoteServer)(nil).Start))
}

// Wait mocks base method
func (m *MockRemoteServer) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockRemoteServerMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRemoteServer)(nil).Wait))
}

// CreateRepository mocks base method
func (m *MockRemoteServer) CreateRepository(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockRemoteServerMockRecorder) CreateRepository(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockRemoteServer)(nil).CreateRepository), name)
}

// BroadcastMsg mocks base method
func (m *MockRemoteServer) BroadcastMsg(ch byte, msg []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastMsg", ch, msg)
}

// BroadcastMsg indicates an expected call of BroadcastMsg
func (mr *MockRemoteServerMockRecorder) BroadcastMsg(ch, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMsg", reflect.TypeOf((*MockRemoteServer)(nil).BroadcastMsg), ch, msg)
}

// BroadcastPushObjects mocks base method
func (m *MockRemoteServer) BroadcastPushObjects(note types0.PushNotice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastPushObjects", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastPushObjects indicates an expected call of BroadcastPushObjects
func (mr *MockRemoteServerMockRecorder) BroadcastPushObjects(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastPushObjects", reflect.TypeOf((*MockRemoteServer)(nil).BroadcastPushObjects), note)
}

// SetPushKeyPubKeyGetter mocks base method
func (m *MockRemoteServer) SetPushKeyPubKeyGetter(pkGetter core.PushKeyGetter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPushKeyPubKeyGetter", pkGetter)
}

// SetPushKeyPubKeyGetter indicates an expected call of SetPushKeyPubKeyGetter
func (mr *MockRemoteServerMockRecorder) SetPushKeyPubKeyGetter(pkGetter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPushKeyPubKeyGetter", reflect.TypeOf((*MockRemoteServer)(nil).SetPushKeyPubKeyGetter), pkGetter)
}

// RegisterAPIHandlers mocks base method
func (m *MockRemoteServer) RegisterAPIHandlers(agg modules.ModuleHub) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterAPIHandlers", agg)
}

// RegisterAPIHandlers indicates an expected call of RegisterAPIHandlers
func (mr *MockRemoteServerMockRecorder) RegisterAPIHandlers(agg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAPIHandlers", reflect.TypeOf((*MockRemoteServer)(nil).RegisterAPIHandlers), agg)
}

// GetPruner mocks base method
func (m *MockRemoteServer) GetPruner() types1.RepoPruner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPruner")
	ret0, _ := ret[0].(types1.RepoPruner)
	return ret0
}

// GetPruner indicates an expected call of GetPruner
func (mr *MockRemoteServerMockRecorder) GetPruner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPruner", reflect.TypeOf((*MockRemoteServer)(nil).GetPruner))
}

// GetDHT mocks base method
func (m *MockRemoteServer) GetDHT() types.DHTNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHT")
	ret0, _ := ret[0].(types.DHTNode)
	return ret0
}

// GetDHT indicates an expected call of GetDHT
func (mr *MockRemoteServerMockRecorder) GetDHT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHT", reflect.TypeOf((*MockRemoteServer)(nil).GetDHT))
}

// ExecTxPush mocks base method
func (m *MockRemoteServer) ExecTxPush(tx types2.BaseTx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTxPush", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTxPush indicates an expected call of ExecTxPush
func (mr *MockRemoteServerMockRecorder) ExecTxPush(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTxPush", reflect.TypeOf((*MockRemoteServer)(nil).ExecTxPush), tx)
}

// Shutdown mocks base method
func (m *MockRemoteServer) Shutdown(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockRemoteServerMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRemoteServer)(nil).Shutdown), ctx)
}

// Stop mocks base method
func (m *MockRemoteServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockRemoteServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRemoteServer)(nil).Stop))
}
