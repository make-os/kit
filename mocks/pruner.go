// Code generated by MockGen. DO NOT EDIT.
// Source: remote/types/pruner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoPruner is a mock of RepoPruner interface
type MockRepoPruner struct {
	ctrl     *gomock.Controller
	recorder *MockRepoPrunerMockRecorder
}

// MockRepoPrunerMockRecorder is the mock recorder for MockRepoPruner
type MockRepoPrunerMockRecorder struct {
	mock *MockRepoPruner
}

// NewMockRepoPruner creates a new mock instance
func NewMockRepoPruner(ctrl *gomock.Controller) *MockRepoPruner {
	mock := &MockRepoPruner{ctrl: ctrl}
	mock.recorder = &MockRepoPrunerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoPruner) EXPECT() *MockRepoPrunerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockRepoPruner) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockRepoPrunerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRepoPruner)(nil).Start))
}

// Schedule mocks base method
func (m *MockRepoPruner) Schedule(repoName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Schedule", repoName)
}

// Schedule indicates an expected call of Schedule
func (mr *MockRepoPrunerMockRecorder) Schedule(repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockRepoPruner)(nil).Schedule), repoName)
}

// Prune mocks base method
func (m *MockRepoPruner) Prune(repoName string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prune", repoName, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prune indicates an expected call of Prune
func (mr *MockRepoPrunerMockRecorder) Prune(repoName, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockRepoPruner)(nil).Prune), repoName, force)
}

// Stop mocks base method
func (m *MockRepoPruner) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockRepoPrunerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRepoPruner)(nil).Stop))
}
