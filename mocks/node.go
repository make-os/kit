// Code generated by MockGen. DO NOT EDIT.
// Source: node/types/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/tendermint/tendermint/types"
	reflect "reflect"
)

// MockBlockGetter is a mock of BlockGetter interface
type MockBlockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockBlockGetterMockRecorder
}

// MockBlockGetterMockRecorder is the mock recorder for MockBlockGetter
type MockBlockGetterMockRecorder struct {
	mock *MockBlockGetter
}

// NewMockBlockGetter creates a new mock instance
func NewMockBlockGetter(ctrl *gomock.Controller) *MockBlockGetter {
	mock := &MockBlockGetter{ctrl: ctrl}
	mock.recorder = &MockBlockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockGetter) EXPECT() *MockBlockGetterMockRecorder {
	return m.recorder
}

// GetBlock mocks base method
func (m *MockBlockGetter) GetBlock(height int64) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", height)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockBlockGetterMockRecorder) GetBlock(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockGetter)(nil).GetBlock), height)
}

// GetChainHeight mocks base method
func (m *MockBlockGetter) GetChainHeight() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainHeight")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetChainHeight indicates an expected call of GetChainHeight
func (mr *MockBlockGetterMockRecorder) GetChainHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainHeight", reflect.TypeOf((*MockBlockGetter)(nil).GetChainHeight))
}
