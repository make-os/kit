// Code generated by MockGen. DO NOT EDIT.
// Source: rpc/server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	rpc "github.com/themakeos/lobe/rpc"
	reflect "reflect"
)

// MockServer is a mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// GetAddr mocks base method
func (m *MockServer) GetAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddr indicates an expected call of GetAddr
func (mr *MockServerMockRecorder) GetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddr", reflect.TypeOf((*MockServer)(nil).GetAddr))
}

// Serve mocks base method
func (m *MockServer) Serve() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve")
}

// Serve indicates an expected call of Serve
func (mr *MockServerMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockServer)(nil).Serve))
}

// IsRunning mocks base method
func (m *MockServer) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockServerMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockServer)(nil).IsRunning))
}

// Stop mocks base method
func (m *MockServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServer)(nil).Stop))
}

// AddAPI mocks base method
func (m *MockServer) AddAPI(apis ...rpc.APISet) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range apis {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddAPI", varargs...)
}

// AddAPI indicates an expected call of AddAPI
func (mr *MockServerMockRecorder) AddAPI(apis ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAPI", reflect.TypeOf((*MockServer)(nil).AddAPI), apis...)
}

// GetMethods mocks base method
func (m *MockServer) GetMethods() []rpc.MethodInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMethods")
	ret0, _ := ret[0].([]rpc.MethodInfo)
	return ret0
}

// GetMethods indicates an expected call of GetMethods
func (mr *MockServerMockRecorder) GetMethods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethods", reflect.TypeOf((*MockServer)(nil).GetMethods))
}
