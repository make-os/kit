// Code generated by MockGen. DO NOT EDIT.
// Source: rpc/api/client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	client "gitlab.com/makeos/mosdef/rpc/api/client"
	api "gitlab.com/makeos/mosdef/types/api"
	util "gitlab.com/makeos/mosdef/util"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendTxPayload mocks base method
func (m *MockClient) SendTxPayload(data map[string]interface{}) (*api.SendTxPayloadResponse, *util.StatusError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTxPayload", data)
	ret0, _ := ret[0].(*api.SendTxPayloadResponse)
	ret1, _ := ret[1].(*util.StatusError)
	return ret0, ret1
}

// SendTxPayload indicates an expected call of SendTxPayload
func (mr *MockClientMockRecorder) SendTxPayload(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTxPayload", reflect.TypeOf((*MockClient)(nil).SendTxPayload), data)
}

// GetAccount mocks base method
func (m *MockClient) GetAccount(address string, blockHeight ...uint64) (*api.GetAccountResponse, *util.StatusError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*api.GetAccountResponse)
	ret1, _ := ret[1].(*util.StatusError)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockClientMockRecorder) GetAccount(address interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockClient)(nil).GetAccount), varargs...)
}

// GetPushKeyOwner mocks base method
func (m *MockClient) GetPushKeyOwner(id string, blockHeight ...uint64) (*api.GetAccountResponse, *util.StatusError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPushKeyOwner", varargs...)
	ret0, _ := ret[0].(*api.GetAccountResponse)
	ret1, _ := ret[1].(*util.StatusError)
	return ret0, ret1
}

// GetPushKeyOwner indicates an expected call of GetPushKeyOwner
func (mr *MockClientMockRecorder) GetPushKeyOwner(id interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushKeyOwner", reflect.TypeOf((*MockClient)(nil).GetPushKeyOwner), varargs...)
}

// GetOptions mocks base method
func (m *MockClient) GetOptions() *client.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.Options)
	return ret0
}

// GetOptions indicates an expected call of GetOptions
func (mr *MockClientMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockClient)(nil).GetOptions))
}

// Call mocks base method
func (m *MockClient) Call(method string, params interface{}) (util.Map, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", method, params)
	ret0, _ := ret[0].(util.Map)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Call indicates an expected call of Call
func (mr *MockClientMockRecorder) Call(method, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClient)(nil).Call), method, params)
}
