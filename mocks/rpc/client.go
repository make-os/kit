// Code generated by MockGen. DO NOT EDIT.
// Source: api/rpc/client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/make-os/lobe/api/rpc/client"
	util "github.com/make-os/lobe/util"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetOptions mocks base method
func (m *MockClient) GetOptions() *client.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].(*client.Options)
	return ret0
}

// GetOptions indicates an expected call of GetOptions
func (mr *MockClientMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockClient)(nil).GetOptions))
}

// Call mocks base method
func (m *MockClient) Call(method string, params interface{}) (util.Map, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", method, params)
	ret0, _ := ret[0].(util.Map)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Call indicates an expected call of Call
func (mr *MockClientMockRecorder) Call(method, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockClient)(nil).Call), method, params)
}

// Chain mocks base method
func (m *MockClient) Chain() client.Chain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].(client.Chain)
	return ret0
}

// Chain indicates an expected call of Chain
func (mr *MockClientMockRecorder) Chain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockClient)(nil).Chain))
}

// PushKey mocks base method
func (m *MockClient) PushKey() client.PushKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushKey")
	ret0, _ := ret[0].(client.PushKey)
	return ret0
}

// PushKey indicates an expected call of PushKey
func (mr *MockClientMockRecorder) PushKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushKey", reflect.TypeOf((*MockClient)(nil).PushKey))
}

// Repo mocks base method
func (m *MockClient) Repo() client.Repo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repo")
	ret0, _ := ret[0].(client.Repo)
	return ret0
}

// Repo indicates an expected call of Repo
func (mr *MockClientMockRecorder) Repo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repo", reflect.TypeOf((*MockClient)(nil).Repo))
}

// RPC mocks base method
func (m *MockClient) RPC() client.RPC {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPC")
	ret0, _ := ret[0].(client.RPC)
	return ret0
}

// RPC indicates an expected call of RPC
func (mr *MockClientMockRecorder) RPC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPC", reflect.TypeOf((*MockClient)(nil).RPC))
}

// Tx mocks base method
func (m *MockClient) Tx() client.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(client.Tx)
	return ret0
}

// Tx indicates an expected call of Tx
func (mr *MockClientMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockClient)(nil).Tx))
}

// User mocks base method
func (m *MockClient) User() client.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(client.User)
	return ret0
}

// User indicates an expected call of User
func (mr *MockClientMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockClient)(nil).User))
}
