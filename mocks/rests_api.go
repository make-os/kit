// Code generated by MockGen. DO NOT EDIT.
// Source: api/remote/api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockServeMux is a mock of ServeMux interface
type MockServeMux struct {
	ctrl     *gomock.Controller
	recorder *MockServeMuxMockRecorder
}

// MockServeMuxMockRecorder is the mock recorder for MockServeMux
type MockServeMuxMockRecorder struct {
	mock *MockServeMux
}

// NewMockServeMux creates a new mock instance
func NewMockServeMux(ctrl *gomock.Controller) *MockServeMux {
	mock := &MockServeMux{ctrl: ctrl}
	mock.recorder = &MockServeMuxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServeMux) EXPECT() *MockServeMuxMockRecorder {
	return m.recorder
}

// HandleFunc mocks base method
func (m *MockServeMux) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleFunc", pattern, handler)
}

// HandleFunc indicates an expected call of HandleFunc
func (mr *MockServeMuxMockRecorder) HandleFunc(pattern, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFunc", reflect.TypeOf((*MockServeMux)(nil).HandleFunc), pattern, handler)
}
