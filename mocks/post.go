// Code generated by MockGen. DO NOT EDIT.
// Source: remote/plumbing/post.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	plumbing "gitlab.com/makeos/mosdef/remote/plumbing"
	reflect "reflect"
)

// MockIPost is a mock of IPost interface
type MockIPost struct {
	ctrl     *gomock.Controller
	recorder *MockIPostMockRecorder
}

// MockIPostMockRecorder is the mock recorder for MockIPost
type MockIPostMockRecorder struct {
	mock *MockIPost
}

// NewMockIPost creates a new mock instance
func NewMockIPost(ctrl *gomock.Controller) *MockIPost {
	mock := &MockIPost{ctrl: ctrl}
	mock.recorder = &MockIPostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPost) EXPECT() *MockIPostMockRecorder {
	return m.recorder
}

// GetComments mocks base method
func (m *MockIPost) GetComments() (plumbing.Comments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments")
	ret0, _ := ret[0].(plumbing.Comments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments
func (mr *MockIPostMockRecorder) GetComments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockIPost)(nil).GetComments))
}

// IsClosed mocks base method
func (m *MockIPost) IsClosed() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsClosed indicates an expected call of IsClosed
func (mr *MockIPostMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockIPost)(nil).IsClosed))
}

// GetTitle mocks base method
func (m *MockIPost) GetTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTitle indicates an expected call of GetTitle
func (mr *MockIPostMockRecorder) GetTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitle", reflect.TypeOf((*MockIPost)(nil).GetTitle))
}

// GetName mocks base method
func (m *MockIPost) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockIPostMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIPost)(nil).GetName))
}

// FirstComment mocks base method
func (m *MockIPost) FirstComment() *plumbing.Comment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstComment")
	ret0, _ := ret[0].(*plumbing.Comment)
	return ret0
}

// FirstComment indicates an expected call of FirstComment
func (mr *MockIPostMockRecorder) FirstComment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstComment", reflect.TypeOf((*MockIPost)(nil).FirstComment))
}
