// Code generated by MockGen. DO NOT EDIT.
// Source: keystore/types/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	go_prompt "github.com/c-bata/go-prompt"
	gomock "github.com/golang/mock/gomock"
	crypto "gitlab.com/makeos/mosdef/crypto"
	types "gitlab.com/makeos/mosdef/keystore/types"
	reflect "reflect"
	time "time"
)

// MockStoredKey is a mock of StoredKey interface
type MockStoredKey struct {
	ctrl     *gomock.Controller
	recorder *MockStoredKeyMockRecorder
}

// MockStoredKeyMockRecorder is the mock recorder for MockStoredKey
type MockStoredKeyMockRecorder struct {
	mock *MockStoredKey
}

// NewMockStoredKey creates a new mock instance
func NewMockStoredKey(ctrl *gomock.Controller) *MockStoredKey {
	mock := &MockStoredKey{ctrl: ctrl}
	mock.recorder = &MockStoredKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoredKey) EXPECT() *MockStoredKeyMockRecorder {
	return m.recorder
}

// GetMeta mocks base method
func (m *MockStoredKey) GetMeta() types.StoredKeyMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta")
	ret0, _ := ret[0].(types.StoredKeyMeta)
	return ret0
}

// GetMeta indicates an expected call of GetMeta
func (mr *MockStoredKeyMockRecorder) GetMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockStoredKey)(nil).GetMeta))
}

// GetKey mocks base method
func (m *MockStoredKey) GetKey() *crypto.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(*crypto.Key)
	return ret0
}

// GetKey indicates an expected call of GetKey
func (mr *MockStoredKeyMockRecorder) GetKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockStoredKey)(nil).GetKey))
}

// GetPayload mocks base method
func (m *MockStoredKey) GetPayload() *types.KeyPayload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayload")
	ret0, _ := ret[0].(*types.KeyPayload)
	return ret0
}

// GetPayload indicates an expected call of GetPayload
func (mr *MockStoredKeyMockRecorder) GetPayload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayload", reflect.TypeOf((*MockStoredKey)(nil).GetPayload))
}

// Unlock mocks base method
func (m *MockStoredKey) Unlock(passphrase string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", passphrase)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *MockStoredKeyMockRecorder) Unlock(passphrase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockStoredKey)(nil).Unlock), passphrase)
}

// GetFilename mocks base method
func (m *MockStoredKey) GetFilename() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilename")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFilename indicates an expected call of GetFilename
func (mr *MockStoredKeyMockRecorder) GetFilename() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilename", reflect.TypeOf((*MockStoredKey)(nil).GetFilename))
}

// GetAddress mocks base method
func (m *MockStoredKey) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockStoredKeyMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockStoredKey)(nil).GetAddress))
}

// IsUnprotected mocks base method
func (m *MockStoredKey) IsUnprotected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnprotected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUnprotected indicates an expected call of IsUnprotected
func (mr *MockStoredKeyMockRecorder) IsUnprotected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnprotected", reflect.TypeOf((*MockStoredKey)(nil).IsUnprotected))
}

// GetType mocks base method
func (m *MockStoredKey) GetType() types.KeyType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(types.KeyType)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockStoredKeyMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockStoredKey)(nil).GetType))
}

// GetUnlockedData mocks base method
func (m *MockStoredKey) GetUnlockedData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnlockedData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetUnlockedData indicates an expected call of GetUnlockedData
func (mr *MockStoredKeyMockRecorder) GetUnlockedData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnlockedData", reflect.TypeOf((*MockStoredKey)(nil).GetUnlockedData))
}

// GetCreatedAt mocks base method
func (m *MockStoredKey) GetCreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt
func (mr *MockStoredKeyMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockStoredKey)(nil).GetCreatedAt))
}

// MockAccountManager is a mock of AccountManager interface
type MockAccountManager struct {
	ctrl     *gomock.Controller
	recorder *MockAccountManagerMockRecorder
}

// MockAccountManagerMockRecorder is the mock recorder for MockAccountManager
type MockAccountManagerMockRecorder struct {
	mock *MockAccountManager
}

// NewMockAccountManager creates a new mock instance
func NewMockAccountManager(ctrl *gomock.Controller) *MockAccountManager {
	mock := &MockAccountManager{ctrl: ctrl}
	mock.recorder = &MockAccountManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountManager) EXPECT() *MockAccountManagerMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockAccountManager) Configure() []go_prompt.Suggest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure")
	ret0, _ := ret[0].([]go_prompt.Suggest)
	return ret0
}

// Configure indicates an expected call of Configure
func (mr *MockAccountManagerMockRecorder) Configure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockAccountManager)(nil).Configure))
}

// UpdateCmd mocks base method
func (m *MockAccountManager) UpdateCmd(addressOrIndex, passphrase string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCmd", addressOrIndex, passphrase)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCmd indicates an expected call of UpdateCmd
func (mr *MockAccountManagerMockRecorder) UpdateCmd(addressOrIndex, passphrase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCmd", reflect.TypeOf((*MockAccountManager)(nil).UpdateCmd), addressOrIndex, passphrase)
}

// RevealCmd mocks base method
func (m *MockAccountManager) RevealCmd(addrOrIdx, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevealCmd", addrOrIdx, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevealCmd indicates an expected call of RevealCmd
func (mr *MockAccountManagerMockRecorder) RevealCmd(addrOrIdx, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevealCmd", reflect.TypeOf((*MockAccountManager)(nil).RevealCmd), addrOrIdx, pass)
}

// ListAccounts mocks base method
func (m *MockAccountManager) ListAccounts() ([]types.StoredKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts")
	ret0, _ := ret[0].([]types.StoredKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts
func (mr *MockAccountManagerMockRecorder) ListAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccountManager)(nil).ListAccounts))
}

// ListCmd mocks base method
func (m *MockAccountManager) ListCmd() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCmd")
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCmd indicates an expected call of ListCmd
func (mr *MockAccountManagerMockRecorder) ListCmd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCmd", reflect.TypeOf((*MockAccountManager)(nil).ListCmd))
}

// CreateAccount mocks base method
func (m *MockAccountManager) CreateAccount(defaultAccount bool, address *crypto.Key, passphrase string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", defaultAccount, address, passphrase)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockAccountManagerMockRecorder) CreateAccount(defaultAccount, address, passphrase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountManager)(nil).CreateAccount), defaultAccount, address, passphrase)
}

// CreateCmd mocks base method
func (m *MockAccountManager) CreateCmd(defaultAccount bool, seed int64, pass string) (*crypto.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCmd", defaultAccount, seed, pass)
	ret0, _ := ret[0].(*crypto.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCmd indicates an expected call of CreateCmd
func (mr *MockAccountManagerMockRecorder) CreateCmd(defaultAccount, seed, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCmd", reflect.TypeOf((*MockAccountManager)(nil).CreateCmd), defaultAccount, seed, pass)
}

// ImportCmd mocks base method
func (m *MockAccountManager) ImportCmd(keyFile, pass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCmd", keyFile, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportCmd indicates an expected call of ImportCmd
func (mr *MockAccountManagerMockRecorder) ImportCmd(keyFile, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCmd", reflect.TypeOf((*MockAccountManager)(nil).ImportCmd), keyFile, pass)
}

// AskForPassword mocks base method
func (m *MockAccountManager) AskForPassword() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForPassword")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskForPassword indicates an expected call of AskForPassword
func (mr *MockAccountManagerMockRecorder) AskForPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForPassword", reflect.TypeOf((*MockAccountManager)(nil).AskForPassword))
}

// AskForPasswordOnce mocks base method
func (m *MockAccountManager) AskForPasswordOnce() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskForPasswordOnce")
	ret0, _ := ret[0].(string)
	return ret0
}

// AskForPasswordOnce indicates an expected call of AskForPasswordOnce
func (mr *MockAccountManagerMockRecorder) AskForPasswordOnce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskForPasswordOnce", reflect.TypeOf((*MockAccountManager)(nil).AskForPasswordOnce))
}

// AccountExist mocks base method
func (m *MockAccountManager) AccountExist(address string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountExist", address)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountExist indicates an expected call of AccountExist
func (mr *MockAccountManagerMockRecorder) AccountExist(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountExist", reflect.TypeOf((*MockAccountManager)(nil).AccountExist), address)
}

// GetDefault mocks base method
func (m *MockAccountManager) GetDefault() (types.StoredKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefault")
	ret0, _ := ret[0].(types.StoredKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefault indicates an expected call of GetDefault
func (mr *MockAccountManagerMockRecorder) GetDefault() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefault", reflect.TypeOf((*MockAccountManager)(nil).GetDefault))
}

// GetByIndex mocks base method
func (m *MockAccountManager) GetByIndex(i int) (types.StoredKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndex", i)
	ret0, _ := ret[0].(types.StoredKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndex indicates an expected call of GetByIndex
func (mr *MockAccountManagerMockRecorder) GetByIndex(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndex", reflect.TypeOf((*MockAccountManager)(nil).GetByIndex), i)
}

// GetByIndexOrAddress mocks base method
func (m *MockAccountManager) GetByIndexOrAddress(idxOrAddr string) (types.StoredKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIndexOrAddress", idxOrAddr)
	ret0, _ := ret[0].(types.StoredKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIndexOrAddress indicates an expected call of GetByIndexOrAddress
func (mr *MockAccountManagerMockRecorder) GetByIndexOrAddress(idxOrAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIndexOrAddress", reflect.TypeOf((*MockAccountManager)(nil).GetByIndexOrAddress), idxOrAddr)
}

// GetByAddress mocks base method
func (m *MockAccountManager) GetByAddress(addr string) (types.StoredKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", addr)
	ret0, _ := ret[0].(types.StoredKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAddress indicates an expected call of GetByAddress
func (mr *MockAccountManagerMockRecorder) GetByAddress(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockAccountManager)(nil).GetByAddress), addr)
}

// UIUnlockAccount mocks base method
func (m *MockAccountManager) UIUnlockAccount(addressOrIndex, passphrase string) (types.StoredKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UIUnlockAccount", addressOrIndex, passphrase)
	ret0, _ := ret[0].(types.StoredKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UIUnlockAccount indicates an expected call of UIUnlockAccount
func (mr *MockAccountManagerMockRecorder) UIUnlockAccount(addressOrIndex, passphrase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UIUnlockAccount", reflect.TypeOf((*MockAccountManager)(nil).UIUnlockAccount), addressOrIndex, passphrase)
}
