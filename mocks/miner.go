// Code generated by MockGen. DO NOT EDIT.
// Source: miner/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMiner is a mock of Miner interface
type MockMiner struct {
	ctrl     *gomock.Controller
	recorder *MockMinerMockRecorder
}

// MockMinerMockRecorder is the mock recorder for MockMiner
type MockMinerMockRecorder struct {
	mock *MockMiner
}

// NewMockMiner creates a new mock instance
func NewMockMiner(ctrl *gomock.Controller) *MockMiner {
	mock := &MockMiner{ctrl: ctrl}
	mock.recorder = &MockMinerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMiner) EXPECT() *MockMinerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockMiner) Start(scheduleStart bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", scheduleStart)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockMinerMockRecorder) Start(scheduleStart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMiner)(nil).Start), scheduleStart)
}

// IsMining mocks base method
func (m *MockMiner) IsMining() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMining")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMining indicates an expected call of IsMining
func (mr *MockMinerMockRecorder) IsMining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMining", reflect.TypeOf((*MockMiner)(nil).IsMining))
}

// Stop mocks base method
func (m *MockMiner) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockMinerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMiner)(nil).Stop))
}

// GetHashrate mocks base method
func (m *MockMiner) GetHashrate() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashrate")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetHashrate indicates an expected call of GetHashrate
func (mr *MockMinerMockRecorder) GetHashrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashrate", reflect.TypeOf((*MockMiner)(nil).GetHashrate))
}
