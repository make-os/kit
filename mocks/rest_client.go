// Code generated by MockGen. DO NOT EDIT.
// Source: api/rest/client/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	req "github.com/imroc/req"
	types "gitlab.com/makeos/mosdef/api/types"
	state "gitlab.com/makeos/mosdef/types/state"
	reflect "reflect"
)

// MockRestClient is a mock of RestClient interface
type MockRestClient struct {
	ctrl     *gomock.Controller
	recorder *MockRestClientMockRecorder
}

// MockRestClientMockRecorder is the mock recorder for MockRestClient
type MockRestClientMockRecorder struct {
	mock *MockRestClient
}

// NewMockRestClient creates a new mock instance
func NewMockRestClient(ctrl *gomock.Controller) *MockRestClient {
	mock := &MockRestClient{ctrl: ctrl}
	mock.recorder = &MockRestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestClient) EXPECT() *MockRestClientMockRecorder {
	return m.recorder
}

// TxSendPayload mocks base method
func (m *MockRestClient) TxSendPayload(data map[string]interface{}) (*types.TxSendPayloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSendPayload", data)
	ret0, _ := ret[0].(*types.TxSendPayloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxSendPayload indicates an expected call of TxSendPayload
func (mr *MockRestClientMockRecorder) TxSendPayload(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSendPayload", reflect.TypeOf((*MockRestClient)(nil).TxSendPayload), data)
}

// AccountGetNonce mocks base method
func (m *MockRestClient) AccountGetNonce(address string, blockHeight ...uint64) (*types.AccountGetNonceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountGetNonce", varargs...)
	ret0, _ := ret[0].(*types.AccountGetNonceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGetNonce indicates an expected call of AccountGetNonce
func (mr *MockRestClientMockRecorder) AccountGetNonce(address interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGetNonce", reflect.TypeOf((*MockRestClient)(nil).AccountGetNonce), varargs...)
}

// AccountGet mocks base method
func (m *MockRestClient) AccountGet(address string, blockHeight ...uint64) (*state.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountGet", varargs...)
	ret0, _ := ret[0].(*state.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountGet indicates an expected call of AccountGet
func (mr *MockRestClientMockRecorder) AccountGet(address interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountGet", reflect.TypeOf((*MockRestClient)(nil).AccountGet), varargs...)
}

// GetCall mocks base method
func (m *MockRestClient) GetCall(endpoint string, params map[string]interface{}) (*req.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCall", endpoint, params)
	ret0, _ := ret[0].(*req.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCall indicates an expected call of GetCall
func (mr *MockRestClientMockRecorder) GetCall(endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCall", reflect.TypeOf((*MockRestClient)(nil).GetCall), endpoint, params)
}

// PostCall mocks base method
func (m *MockRestClient) PostCall(endpoint string, body map[string]interface{}) (*req.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCall", endpoint, body)
	ret0, _ := ret[0].(*req.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCall indicates an expected call of PostCall
func (mr *MockRestClientMockRecorder) PostCall(endpoint, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCall", reflect.TypeOf((*MockRestClient)(nil).PostCall), endpoint, body)
}

// GPGGetNonceOfOwner mocks base method
func (m *MockRestClient) GPGGetNonceOfOwner(gpgID string, blockHeight ...uint64) (*types.AccountGetNonceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{gpgID}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GPGGetNonceOfOwner", varargs...)
	ret0, _ := ret[0].(*types.AccountGetNonceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GPGGetNonceOfOwner indicates an expected call of GPGGetNonceOfOwner
func (mr *MockRestClientMockRecorder) GPGGetNonceOfOwner(gpgID interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{gpgID}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GPGGetNonceOfOwner", reflect.TypeOf((*MockRestClient)(nil).GPGGetNonceOfOwner), varargs...)
}

// GPGFind mocks base method
func (m *MockRestClient) GPGFind(gpgID string, blockHeight ...uint64) (*state.PushKey, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{gpgID}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GPGFind", varargs...)
	ret0, _ := ret[0].(*state.PushKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GPGFind indicates an expected call of GPGFind
func (mr *MockRestClientMockRecorder) GPGFind(gpgID interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{gpgID}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GPGFind", reflect.TypeOf((*MockRestClient)(nil).GPGFind), varargs...)
}
