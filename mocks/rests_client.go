// Code generated by MockGen. DO NOT EDIT.
// Source: api/remote/client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	req "github.com/imroc/req"
	client "github.com/make-os/lobe/api/remote/client"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetCall mocks base method
func (m *MockClient) GetCall(endpoint string, params map[string]interface{}) (*req.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCall", endpoint, params)
	ret0, _ := ret[0].(*req.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCall indicates an expected call of GetCall
func (mr *MockClientMockRecorder) GetCall(endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCall", reflect.TypeOf((*MockClient)(nil).GetCall), endpoint, params)
}

// PostCall mocks base method
func (m *MockClient) PostCall(endpoint string, body map[string]interface{}) (*req.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCall", endpoint, body)
	ret0, _ := ret[0].(*req.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCall indicates an expected call of PostCall
func (mr *MockClientMockRecorder) PostCall(endpoint, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCall", reflect.TypeOf((*MockClient)(nil).PostCall), endpoint, body)
}

// PushKey mocks base method
func (m *MockClient) PushKey() client.PushKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushKey")
	ret0, _ := ret[0].(client.PushKey)
	return ret0
}

// PushKey indicates an expected call of PushKey
func (mr *MockClientMockRecorder) PushKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushKey", reflect.TypeOf((*MockClient)(nil).PushKey))
}

// Repo mocks base method
func (m *MockClient) Repo() client.Repo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repo")
	ret0, _ := ret[0].(client.Repo)
	return ret0
}

// Repo indicates an expected call of Repo
func (mr *MockClientMockRecorder) Repo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repo", reflect.TypeOf((*MockClient)(nil).Repo))
}

// Tx mocks base method
func (m *MockClient) Tx() client.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(client.Tx)
	return ret0
}

// Tx indicates an expected call of Tx
func (mr *MockClientMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockClient)(nil).Tx))
}

// User mocks base method
func (m *MockClient) User() client.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(client.User)
	return ret0
}

// User indicates an expected call of User
func (mr *MockClientMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockClient)(nil).User))
}
