// Code generated by MockGen. DO NOT EDIT.
// Source: types/core/logic.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/tendermint/tendermint/abci/types"
	config "gitlab.com/makeos/mosdef/config"
	tree "gitlab.com/makeos/mosdef/pkgs/tree"
	storage "gitlab.com/makeos/mosdef/storage"
	types0 "gitlab.com/makeos/mosdef/ticket/types"
	types1 "gitlab.com/makeos/mosdef/types"
	core "gitlab.com/makeos/mosdef/types/core"
	state "gitlab.com/makeos/mosdef/types/state"
	util "gitlab.com/makeos/mosdef/util"
	reflect "reflect"
)

// MockSystemKeeper is a mock of SystemKeeper interface
type MockSystemKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockSystemKeeperMockRecorder
}

// MockSystemKeeperMockRecorder is the mock recorder for MockSystemKeeper
type MockSystemKeeperMockRecorder struct {
	mock *MockSystemKeeper
}

// NewMockSystemKeeper creates a new mock instance
func NewMockSystemKeeper(ctrl *gomock.Controller) *MockSystemKeeper {
	mock := &MockSystemKeeper{ctrl: ctrl}
	mock.recorder = &MockSystemKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemKeeper) EXPECT() *MockSystemKeeperMockRecorder {
	return m.recorder
}

// SaveBlockInfo mocks base method
func (m *MockSystemKeeper) SaveBlockInfo(info *core.BlockInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBlockInfo", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockInfo indicates an expected call of SaveBlockInfo
func (mr *MockSystemKeeperMockRecorder) SaveBlockInfo(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockInfo", reflect.TypeOf((*MockSystemKeeper)(nil).SaveBlockInfo), info)
}

// GetLastBlockInfo mocks base method
func (m *MockSystemKeeper) GetLastBlockInfo() (*core.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlockInfo")
	ret0, _ := ret[0].(*core.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlockInfo indicates an expected call of GetLastBlockInfo
func (mr *MockSystemKeeperMockRecorder) GetLastBlockInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlockInfo", reflect.TypeOf((*MockSystemKeeper)(nil).GetLastBlockInfo))
}

// GetBlockInfo mocks base method
func (m *MockSystemKeeper) GetBlockInfo(height int64) (*core.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockInfo", height)
	ret0, _ := ret[0].(*core.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockInfo indicates an expected call of GetBlockInfo
func (mr *MockSystemKeeperMockRecorder) GetBlockInfo(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockInfo", reflect.TypeOf((*MockSystemKeeper)(nil).GetBlockInfo), height)
}

// SetLastRepoObjectsSyncHeight mocks base method
func (m *MockSystemKeeper) SetLastRepoObjectsSyncHeight(height uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastRepoObjectsSyncHeight", height)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastRepoObjectsSyncHeight indicates an expected call of SetLastRepoObjectsSyncHeight
func (mr *MockSystemKeeperMockRecorder) SetLastRepoObjectsSyncHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastRepoObjectsSyncHeight", reflect.TypeOf((*MockSystemKeeper)(nil).SetLastRepoObjectsSyncHeight), height)
}

// GetLastRepoObjectsSyncHeight mocks base method
func (m *MockSystemKeeper) GetLastRepoObjectsSyncHeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastRepoObjectsSyncHeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastRepoObjectsSyncHeight indicates an expected call of GetLastRepoObjectsSyncHeight
func (mr *MockSystemKeeperMockRecorder) GetLastRepoObjectsSyncHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastRepoObjectsSyncHeight", reflect.TypeOf((*MockSystemKeeper)(nil).GetLastRepoObjectsSyncHeight))
}

// SetHelmRepo mocks base method
func (m *MockSystemKeeper) SetHelmRepo(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHelmRepo", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHelmRepo indicates an expected call of SetHelmRepo
func (mr *MockSystemKeeperMockRecorder) SetHelmRepo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHelmRepo", reflect.TypeOf((*MockSystemKeeper)(nil).SetHelmRepo), name)
}

// GetHelmRepo mocks base method
func (m *MockSystemKeeper) GetHelmRepo() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelmRepo")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelmRepo indicates an expected call of GetHelmRepo
func (mr *MockSystemKeeperMockRecorder) GetHelmRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelmRepo", reflect.TypeOf((*MockSystemKeeper)(nil).GetHelmRepo))
}

// MockTxKeeper is a mock of TxKeeper interface
type MockTxKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockTxKeeperMockRecorder
}

// MockTxKeeperMockRecorder is the mock recorder for MockTxKeeper
type MockTxKeeperMockRecorder struct {
	mock *MockTxKeeper
}

// NewMockTxKeeper creates a new mock instance
func NewMockTxKeeper(ctrl *gomock.Controller) *MockTxKeeper {
	mock := &MockTxKeeper{ctrl: ctrl}
	mock.recorder = &MockTxKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxKeeper) EXPECT() *MockTxKeeperMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockTxKeeper) Index(tx types1.BaseTx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockTxKeeperMockRecorder) Index(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockTxKeeper)(nil).Index), tx)
}

// GetTx mocks base method
func (m *MockTxKeeper) GetTx(hash []byte) (types1.BaseTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", hash)
	ret0, _ := ret[0].(types1.BaseTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx
func (mr *MockTxKeeperMockRecorder) GetTx(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockTxKeeper)(nil).GetTx), hash)
}

// MockBalanceAccount is a mock of BalanceAccount interface
type MockBalanceAccount struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceAccountMockRecorder
}

// MockBalanceAccountMockRecorder is the mock recorder for MockBalanceAccount
type MockBalanceAccountMockRecorder struct {
	mock *MockBalanceAccount
}

// NewMockBalanceAccount creates a new mock instance
func NewMockBalanceAccount(ctrl *gomock.Controller) *MockBalanceAccount {
	mock := &MockBalanceAccount{ctrl: ctrl}
	mock.recorder = &MockBalanceAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBalanceAccount) EXPECT() *MockBalanceAccountMockRecorder {
	return m.recorder
}

// GetBalance mocks base method
func (m *MockBalanceAccount) GetBalance() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockBalanceAccountMockRecorder) GetBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceAccount)(nil).GetBalance))
}

// SetBalance mocks base method
func (m *MockBalanceAccount) SetBalance(bal string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", bal)
}

// SetBalance indicates an expected call of SetBalance
func (mr *MockBalanceAccountMockRecorder) SetBalance(bal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockBalanceAccount)(nil).SetBalance), bal)
}

// Clean mocks base method
func (m *MockBalanceAccount) Clean(chainHeight uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean", chainHeight)
}

// Clean indicates an expected call of Clean
func (mr *MockBalanceAccountMockRecorder) Clean(chainHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockBalanceAccount)(nil).Clean), chainHeight)
}

// MockAccountKeeper is a mock of AccountKeeper interface
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAccountKeeper) Get(address util.Address, blockNum ...uint64) *state.Account {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range blockNum {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*state.Account)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockAccountKeeperMockRecorder) Get(address interface{}, blockNum ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, blockNum...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountKeeper)(nil).Get), varargs...)
}

// Update mocks base method
func (m *MockAccountKeeper) Update(address util.Address, upd *state.Account) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", address, upd)
}

// Update indicates an expected call of Update
func (mr *MockAccountKeeperMockRecorder) Update(address, upd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountKeeper)(nil).Update), address, upd)
}

// MockRepoKeeper is a mock of RepoKeeper interface
type MockRepoKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockRepoKeeperMockRecorder
}

// MockRepoKeeperMockRecorder is the mock recorder for MockRepoKeeper
type MockRepoKeeperMockRecorder struct {
	mock *MockRepoKeeper
}

// NewMockRepoKeeper creates a new mock instance
func NewMockRepoKeeper(ctrl *gomock.Controller) *MockRepoKeeper {
	mock := &MockRepoKeeper{ctrl: ctrl}
	mock.recorder = &MockRepoKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoKeeper) EXPECT() *MockRepoKeeperMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepoKeeper) Get(name string, blockNum ...uint64) *state.Repository {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range blockNum {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*state.Repository)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockRepoKeeperMockRecorder) Get(name interface{}, blockNum ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, blockNum...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepoKeeper)(nil).Get), varargs...)
}

// GetWithNoPopulation mocks base method
func (m *MockRepoKeeper) GetWithNoPopulation(name string, blockNum ...uint64) *state.Repository {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range blockNum {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithNoPopulation", varargs...)
	ret0, _ := ret[0].(*state.Repository)
	return ret0
}

// GetWithNoPopulation indicates an expected call of GetWithNoPopulation
func (mr *MockRepoKeeperMockRecorder) GetWithNoPopulation(name interface{}, blockNum ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, blockNum...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithNoPopulation", reflect.TypeOf((*MockRepoKeeper)(nil).GetWithNoPopulation), varargs...)
}

// Update mocks base method
func (m *MockRepoKeeper) Update(name string, upd *state.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", name, upd)
}

// Update indicates an expected call of Update
func (mr *MockRepoKeeperMockRecorder) Update(name, upd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepoKeeper)(nil).Update), name, upd)
}

// IndexProposalVote mocks base method
func (m *MockRepoKeeper) IndexProposalVote(name, propID, voterAddr string, vote int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexProposalVote", name, propID, voterAddr, vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexProposalVote indicates an expected call of IndexProposalVote
func (mr *MockRepoKeeperMockRecorder) IndexProposalVote(name, propID, voterAddr, vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexProposalVote", reflect.TypeOf((*MockRepoKeeper)(nil).IndexProposalVote), name, propID, voterAddr, vote)
}

// GetProposalVote mocks base method
func (m *MockRepoKeeper) GetProposalVote(name, propID, voterAddr string) (int, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalVote", name, propID, voterAddr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProposalVote indicates an expected call of GetProposalVote
func (mr *MockRepoKeeperMockRecorder) GetProposalVote(name, propID, voterAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalVote", reflect.TypeOf((*MockRepoKeeper)(nil).GetProposalVote), name, propID, voterAddr)
}

// IndexProposalEnd mocks base method
func (m *MockRepoKeeper) IndexProposalEnd(name, propID string, endHeight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexProposalEnd", name, propID, endHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// IndexProposalEnd indicates an expected call of IndexProposalEnd
func (mr *MockRepoKeeperMockRecorder) IndexProposalEnd(name, propID, endHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexProposalEnd", reflect.TypeOf((*MockRepoKeeper)(nil).IndexProposalEnd), name, propID, endHeight)
}

// GetProposalsEndingAt mocks base method
func (m *MockRepoKeeper) GetProposalsEndingAt(height uint64) []*core.EndingProposals {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalsEndingAt", height)
	ret0, _ := ret[0].([]*core.EndingProposals)
	return ret0
}

// GetProposalsEndingAt indicates an expected call of GetProposalsEndingAt
func (mr *MockRepoKeeperMockRecorder) GetProposalsEndingAt(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalsEndingAt", reflect.TypeOf((*MockRepoKeeper)(nil).GetProposalsEndingAt), height)
}

// MarkProposalAsClosed mocks base method
func (m *MockRepoKeeper) MarkProposalAsClosed(name, propID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProposalAsClosed", name, propID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProposalAsClosed indicates an expected call of MarkProposalAsClosed
func (mr *MockRepoKeeperMockRecorder) MarkProposalAsClosed(name, propID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProposalAsClosed", reflect.TypeOf((*MockRepoKeeper)(nil).MarkProposalAsClosed), name, propID)
}

// IsProposalClosed mocks base method
func (m *MockRepoKeeper) IsProposalClosed(name, propID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProposalClosed", name, propID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProposalClosed indicates an expected call of IsProposalClosed
func (mr *MockRepoKeeperMockRecorder) IsProposalClosed(name, propID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProposalClosed", reflect.TypeOf((*MockRepoKeeper)(nil).IsProposalClosed), name, propID)
}

// MockNamespaceKeeper is a mock of NamespaceKeeper interface
type MockNamespaceKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceKeeperMockRecorder
}

// MockNamespaceKeeperMockRecorder is the mock recorder for MockNamespaceKeeper
type MockNamespaceKeeperMockRecorder struct {
	mock *MockNamespaceKeeper
}

// NewMockNamespaceKeeper creates a new mock instance
func NewMockNamespaceKeeper(ctrl *gomock.Controller) *MockNamespaceKeeper {
	mock := &MockNamespaceKeeper{ctrl: ctrl}
	mock.recorder = &MockNamespaceKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceKeeper) EXPECT() *MockNamespaceKeeperMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockNamespaceKeeper) Get(name string, blockNum ...uint64) *state.Namespace {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range blockNum {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*state.Namespace)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockNamespaceKeeperMockRecorder) Get(name interface{}, blockNum ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, blockNum...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespaceKeeper)(nil).Get), varargs...)
}

// GetTarget mocks base method
func (m *MockNamespaceKeeper) GetTarget(path string, blockNum ...uint64) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range blockNum {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTarget", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTarget indicates an expected call of GetTarget
func (mr *MockNamespaceKeeperMockRecorder) GetTarget(path interface{}, blockNum ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, blockNum...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTarget", reflect.TypeOf((*MockNamespaceKeeper)(nil).GetTarget), varargs...)
}

// Update mocks base method
func (m *MockNamespaceKeeper) Update(name string, upd *state.Namespace) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", name, upd)
}

// Update indicates an expected call of Update
func (mr *MockNamespaceKeeperMockRecorder) Update(name, upd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNamespaceKeeper)(nil).Update), name, upd)
}

// MockPushKeyKeeper is a mock of PushKeyKeeper interface
type MockPushKeyKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockPushKeyKeeperMockRecorder
}

// MockPushKeyKeeperMockRecorder is the mock recorder for MockPushKeyKeeper
type MockPushKeyKeeperMockRecorder struct {
	mock *MockPushKeyKeeper
}

// NewMockPushKeyKeeper creates a new mock instance
func NewMockPushKeyKeeper(ctrl *gomock.Controller) *MockPushKeyKeeper {
	mock := &MockPushKeyKeeper{ctrl: ctrl}
	mock.recorder = &MockPushKeyKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushKeyKeeper) EXPECT() *MockPushKeyKeeperMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockPushKeyKeeper) Update(gpgID string, upd *state.PushKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", gpgID, upd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPushKeyKeeperMockRecorder) Update(gpgID, upd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPushKeyKeeper)(nil).Update), gpgID, upd)
}

// Get mocks base method
func (m *MockPushKeyKeeper) Get(gpgID string, blockNum ...uint64) *state.PushKey {
	m.ctrl.T.Helper()
	varargs := []interface{}{gpgID}
	for _, a := range blockNum {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*state.PushKey)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockPushKeyKeeperMockRecorder) Get(gpgID interface{}, blockNum ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{gpgID}, blockNum...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPushKeyKeeper)(nil).Get), varargs...)
}

// GetByAddress mocks base method
func (m *MockPushKeyKeeper) GetByAddress(address string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", address)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetByAddress indicates an expected call of GetByAddress
func (mr *MockPushKeyKeeperMockRecorder) GetByAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockPushKeyKeeper)(nil).GetByAddress), address)
}

// Remove mocks base method
func (m *MockPushKeyKeeper) Remove(gpgID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", gpgID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockPushKeyKeeperMockRecorder) Remove(gpgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPushKeyKeeper)(nil).Remove), gpgID)
}

// MockAtomicLogic is a mock of AtomicLogic interface
type MockAtomicLogic struct {
	ctrl     *gomock.Controller
	recorder *MockAtomicLogicMockRecorder
}

// MockAtomicLogicMockRecorder is the mock recorder for MockAtomicLogic
type MockAtomicLogicMockRecorder struct {
	mock *MockAtomicLogic
}

// NewMockAtomicLogic creates a new mock instance
func NewMockAtomicLogic(ctrl *gomock.Controller) *MockAtomicLogic {
	mock := &MockAtomicLogic{ctrl: ctrl}
	mock.recorder = &MockAtomicLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAtomicLogic) EXPECT() *MockAtomicLogicMockRecorder {
	return m.recorder
}

// SysKeeper mocks base method
func (m *MockAtomicLogic) SysKeeper() core.SystemKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SysKeeper")
	ret0, _ := ret[0].(core.SystemKeeper)
	return ret0
}

// SysKeeper indicates an expected call of SysKeeper
func (mr *MockAtomicLogicMockRecorder) SysKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SysKeeper", reflect.TypeOf((*MockAtomicLogic)(nil).SysKeeper))
}

// ManagedSysKeeper mocks base method
func (m *MockAtomicLogic) ManagedSysKeeper() core.SystemKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagedSysKeeper")
	ret0, _ := ret[0].(core.SystemKeeper)
	return ret0
}

// ManagedSysKeeper indicates an expected call of ManagedSysKeeper
func (mr *MockAtomicLogicMockRecorder) ManagedSysKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedSysKeeper", reflect.TypeOf((*MockAtomicLogic)(nil).ManagedSysKeeper))
}

// AccountKeeper mocks base method
func (m *MockAtomicLogic) AccountKeeper() core.AccountKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountKeeper")
	ret0, _ := ret[0].(core.AccountKeeper)
	return ret0
}

// AccountKeeper indicates an expected call of AccountKeeper
func (mr *MockAtomicLogicMockRecorder) AccountKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountKeeper", reflect.TypeOf((*MockAtomicLogic)(nil).AccountKeeper))
}

// ValidatorKeeper mocks base method
func (m *MockAtomicLogic) ValidatorKeeper() core.ValidatorKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorKeeper")
	ret0, _ := ret[0].(core.ValidatorKeeper)
	return ret0
}

// ValidatorKeeper indicates an expected call of ValidatorKeeper
func (mr *MockAtomicLogicMockRecorder) ValidatorKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorKeeper", reflect.TypeOf((*MockAtomicLogic)(nil).ValidatorKeeper))
}

// TxKeeper mocks base method
func (m *MockAtomicLogic) TxKeeper() core.TxKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxKeeper")
	ret0, _ := ret[0].(core.TxKeeper)
	return ret0
}

// TxKeeper indicates an expected call of TxKeeper
func (mr *MockAtomicLogicMockRecorder) TxKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxKeeper", reflect.TypeOf((*MockAtomicLogic)(nil).TxKeeper))
}

// RepoKeeper mocks base method
func (m *MockAtomicLogic) RepoKeeper() core.RepoKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoKeeper")
	ret0, _ := ret[0].(core.RepoKeeper)
	return ret0
}

// RepoKeeper indicates an expected call of RepoKeeper
func (mr *MockAtomicLogicMockRecorder) RepoKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoKeeper", reflect.TypeOf((*MockAtomicLogic)(nil).RepoKeeper))
}

// PushKeyKeeper mocks base method
func (m *MockAtomicLogic) PushKeyKeeper() core.PushKeyKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushKeyKeeper")
	ret0, _ := ret[0].(core.PushKeyKeeper)
	return ret0
}

// PushKeyKeeper indicates an expected call of PushKeyKeeper
func (mr *MockAtomicLogicMockRecorder) PushKeyKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushKeyKeeper", reflect.TypeOf((*MockAtomicLogic)(nil).PushKeyKeeper))
}

// GetTicketManager mocks base method
func (m *MockAtomicLogic) GetTicketManager() types0.TicketManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketManager")
	ret0, _ := ret[0].(types0.TicketManager)
	return ret0
}

// GetTicketManager indicates an expected call of GetTicketManager
func (mr *MockAtomicLogicMockRecorder) GetTicketManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketManager", reflect.TypeOf((*MockAtomicLogic)(nil).GetTicketManager))
}

// NamespaceKeeper mocks base method
func (m *MockAtomicLogic) NamespaceKeeper() core.NamespaceKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceKeeper")
	ret0, _ := ret[0].(core.NamespaceKeeper)
	return ret0
}

// NamespaceKeeper indicates an expected call of NamespaceKeeper
func (mr *MockAtomicLogicMockRecorder) NamespaceKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceKeeper", reflect.TypeOf((*MockAtomicLogic)(nil).NamespaceKeeper))
}

// Tx mocks base method
func (m *MockAtomicLogic) Tx() core.TxLogic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(core.TxLogic)
	return ret0
}

// Tx indicates an expected call of Tx
func (mr *MockAtomicLogicMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockAtomicLogic)(nil).Tx))
}

// Sys mocks base method
func (m *MockAtomicLogic) Sys() core.SysLogic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sys")
	ret0, _ := ret[0].(core.SysLogic)
	return ret0
}

// Sys indicates an expected call of Sys
func (mr *MockAtomicLogicMockRecorder) Sys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sys", reflect.TypeOf((*MockAtomicLogic)(nil).Sys))
}

// Validator mocks base method
func (m *MockAtomicLogic) Validator() core.ValidatorLogic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validator")
	ret0, _ := ret[0].(core.ValidatorLogic)
	return ret0
}

// Validator indicates an expected call of Validator
func (mr *MockAtomicLogicMockRecorder) Validator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockAtomicLogic)(nil).Validator))
}

// DB mocks base method
func (m *MockAtomicLogic) DB() storage.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(storage.Engine)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockAtomicLogicMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockAtomicLogic)(nil).DB))
}

// StateTree mocks base method
func (m *MockAtomicLogic) StateTree() tree.Tree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateTree")
	ret0, _ := ret[0].(tree.Tree)
	return ret0
}

// StateTree indicates an expected call of StateTree
func (mr *MockAtomicLogicMockRecorder) StateTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateTree", reflect.TypeOf((*MockAtomicLogic)(nil).StateTree))
}

// WriteGenesisState mocks base method
func (m *MockAtomicLogic) WriteGenesisState() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGenesisState")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGenesisState indicates an expected call of WriteGenesisState
func (mr *MockAtomicLogicMockRecorder) WriteGenesisState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGenesisState", reflect.TypeOf((*MockAtomicLogic)(nil).WriteGenesisState))
}

// SetTicketManager mocks base method
func (m *MockAtomicLogic) SetTicketManager(tm types0.TicketManager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTicketManager", tm)
}

// SetTicketManager indicates an expected call of SetTicketManager
func (mr *MockAtomicLogicMockRecorder) SetTicketManager(tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTicketManager", reflect.TypeOf((*MockAtomicLogic)(nil).SetTicketManager), tm)
}

// SetRepoManager mocks base method
func (m_2 *MockAtomicLogic) SetRepoManager(m core.RepoManager) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "SetRepoManager", m)
}

// SetRepoManager indicates an expected call of SetRepoManager
func (mr *MockAtomicLogicMockRecorder) SetRepoManager(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepoManager", reflect.TypeOf((*MockAtomicLogic)(nil).SetRepoManager), m)
}

// GetRepoManager mocks base method
func (m *MockAtomicLogic) GetRepoManager() core.RepoManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoManager")
	ret0, _ := ret[0].(core.RepoManager)
	return ret0
}

// GetRepoManager indicates an expected call of GetRepoManager
func (mr *MockAtomicLogicMockRecorder) GetRepoManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoManager", reflect.TypeOf((*MockAtomicLogic)(nil).GetRepoManager))
}

// Cfg mocks base method
func (m *MockAtomicLogic) Cfg() *config.AppConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cfg")
	ret0, _ := ret[0].(*config.AppConfig)
	return ret0
}

// Cfg indicates an expected call of Cfg
func (mr *MockAtomicLogicMockRecorder) Cfg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cfg", reflect.TypeOf((*MockAtomicLogic)(nil).Cfg))
}

// GetMempoolReactor mocks base method
func (m *MockAtomicLogic) GetMempoolReactor() core.MempoolReactor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMempoolReactor")
	ret0, _ := ret[0].(core.MempoolReactor)
	return ret0
}

// GetMempoolReactor indicates an expected call of GetMempoolReactor
func (mr *MockAtomicLogicMockRecorder) GetMempoolReactor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempoolReactor", reflect.TypeOf((*MockAtomicLogic)(nil).GetMempoolReactor))
}

// SetMempoolReactor mocks base method
func (m *MockAtomicLogic) SetMempoolReactor(mr core.MempoolReactor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMempoolReactor", mr)
}

// SetMempoolReactor indicates an expected call of SetMempoolReactor
func (mr_2 *MockAtomicLogicMockRecorder) SetMempoolReactor(mr interface{}) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "SetMempoolReactor", reflect.TypeOf((*MockAtomicLogic)(nil).SetMempoolReactor), mr)
}

// OnEndBlock mocks base method
func (m *MockAtomicLogic) OnEndBlock(block *core.BlockInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnEndBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnEndBlock indicates an expected call of OnEndBlock
func (mr *MockAtomicLogicMockRecorder) OnEndBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEndBlock", reflect.TypeOf((*MockAtomicLogic)(nil).OnEndBlock), block)
}

// GetDBTx mocks base method
func (m *MockAtomicLogic) GetDBTx() storage.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBTx")
	ret0, _ := ret[0].(storage.Tx)
	return ret0
}

// GetDBTx indicates an expected call of GetDBTx
func (mr *MockAtomicLogicMockRecorder) GetDBTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBTx", reflect.TypeOf((*MockAtomicLogic)(nil).GetDBTx))
}

// Commit mocks base method
func (m *MockAtomicLogic) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockAtomicLogicMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockAtomicLogic)(nil).Commit))
}

// Discard mocks base method
func (m *MockAtomicLogic) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard
func (mr *MockAtomicLogicMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockAtomicLogic)(nil).Discard))
}

// MockLogic is a mock of Logic interface
type MockLogic struct {
	ctrl     *gomock.Controller
	recorder *MockLogicMockRecorder
}

// MockLogicMockRecorder is the mock recorder for MockLogic
type MockLogicMockRecorder struct {
	mock *MockLogic
}

// NewMockLogic creates a new mock instance
func NewMockLogic(ctrl *gomock.Controller) *MockLogic {
	mock := &MockLogic{ctrl: ctrl}
	mock.recorder = &MockLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogic) EXPECT() *MockLogicMockRecorder {
	return m.recorder
}

// SysKeeper mocks base method
func (m *MockLogic) SysKeeper() core.SystemKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SysKeeper")
	ret0, _ := ret[0].(core.SystemKeeper)
	return ret0
}

// SysKeeper indicates an expected call of SysKeeper
func (mr *MockLogicMockRecorder) SysKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SysKeeper", reflect.TypeOf((*MockLogic)(nil).SysKeeper))
}

// ManagedSysKeeper mocks base method
func (m *MockLogic) ManagedSysKeeper() core.SystemKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagedSysKeeper")
	ret0, _ := ret[0].(core.SystemKeeper)
	return ret0
}

// ManagedSysKeeper indicates an expected call of ManagedSysKeeper
func (mr *MockLogicMockRecorder) ManagedSysKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedSysKeeper", reflect.TypeOf((*MockLogic)(nil).ManagedSysKeeper))
}

// AccountKeeper mocks base method
func (m *MockLogic) AccountKeeper() core.AccountKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountKeeper")
	ret0, _ := ret[0].(core.AccountKeeper)
	return ret0
}

// AccountKeeper indicates an expected call of AccountKeeper
func (mr *MockLogicMockRecorder) AccountKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountKeeper", reflect.TypeOf((*MockLogic)(nil).AccountKeeper))
}

// ValidatorKeeper mocks base method
func (m *MockLogic) ValidatorKeeper() core.ValidatorKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorKeeper")
	ret0, _ := ret[0].(core.ValidatorKeeper)
	return ret0
}

// ValidatorKeeper indicates an expected call of ValidatorKeeper
func (mr *MockLogicMockRecorder) ValidatorKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorKeeper", reflect.TypeOf((*MockLogic)(nil).ValidatorKeeper))
}

// TxKeeper mocks base method
func (m *MockLogic) TxKeeper() core.TxKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxKeeper")
	ret0, _ := ret[0].(core.TxKeeper)
	return ret0
}

// TxKeeper indicates an expected call of TxKeeper
func (mr *MockLogicMockRecorder) TxKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxKeeper", reflect.TypeOf((*MockLogic)(nil).TxKeeper))
}

// RepoKeeper mocks base method
func (m *MockLogic) RepoKeeper() core.RepoKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoKeeper")
	ret0, _ := ret[0].(core.RepoKeeper)
	return ret0
}

// RepoKeeper indicates an expected call of RepoKeeper
func (mr *MockLogicMockRecorder) RepoKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoKeeper", reflect.TypeOf((*MockLogic)(nil).RepoKeeper))
}

// PushKeyKeeper mocks base method
func (m *MockLogic) PushKeyKeeper() core.PushKeyKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushKeyKeeper")
	ret0, _ := ret[0].(core.PushKeyKeeper)
	return ret0
}

// PushKeyKeeper indicates an expected call of PushKeyKeeper
func (mr *MockLogicMockRecorder) PushKeyKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushKeyKeeper", reflect.TypeOf((*MockLogic)(nil).PushKeyKeeper))
}

// GetTicketManager mocks base method
func (m *MockLogic) GetTicketManager() types0.TicketManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketManager")
	ret0, _ := ret[0].(types0.TicketManager)
	return ret0
}

// GetTicketManager indicates an expected call of GetTicketManager
func (mr *MockLogicMockRecorder) GetTicketManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketManager", reflect.TypeOf((*MockLogic)(nil).GetTicketManager))
}

// NamespaceKeeper mocks base method
func (m *MockLogic) NamespaceKeeper() core.NamespaceKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceKeeper")
	ret0, _ := ret[0].(core.NamespaceKeeper)
	return ret0
}

// NamespaceKeeper indicates an expected call of NamespaceKeeper
func (mr *MockLogicMockRecorder) NamespaceKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceKeeper", reflect.TypeOf((*MockLogic)(nil).NamespaceKeeper))
}

// Tx mocks base method
func (m *MockLogic) Tx() core.TxLogic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(core.TxLogic)
	return ret0
}

// Tx indicates an expected call of Tx
func (mr *MockLogicMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockLogic)(nil).Tx))
}

// Sys mocks base method
func (m *MockLogic) Sys() core.SysLogic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sys")
	ret0, _ := ret[0].(core.SysLogic)
	return ret0
}

// Sys indicates an expected call of Sys
func (mr *MockLogicMockRecorder) Sys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sys", reflect.TypeOf((*MockLogic)(nil).Sys))
}

// Validator mocks base method
func (m *MockLogic) Validator() core.ValidatorLogic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validator")
	ret0, _ := ret[0].(core.ValidatorLogic)
	return ret0
}

// Validator indicates an expected call of Validator
func (mr *MockLogicMockRecorder) Validator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockLogic)(nil).Validator))
}

// DB mocks base method
func (m *MockLogic) DB() storage.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(storage.Engine)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockLogicMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockLogic)(nil).DB))
}

// StateTree mocks base method
func (m *MockLogic) StateTree() tree.Tree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateTree")
	ret0, _ := ret[0].(tree.Tree)
	return ret0
}

// StateTree indicates an expected call of StateTree
func (mr *MockLogicMockRecorder) StateTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateTree", reflect.TypeOf((*MockLogic)(nil).StateTree))
}

// WriteGenesisState mocks base method
func (m *MockLogic) WriteGenesisState() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGenesisState")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGenesisState indicates an expected call of WriteGenesisState
func (mr *MockLogicMockRecorder) WriteGenesisState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGenesisState", reflect.TypeOf((*MockLogic)(nil).WriteGenesisState))
}

// SetTicketManager mocks base method
func (m *MockLogic) SetTicketManager(tm types0.TicketManager) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTicketManager", tm)
}

// SetTicketManager indicates an expected call of SetTicketManager
func (mr *MockLogicMockRecorder) SetTicketManager(tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTicketManager", reflect.TypeOf((*MockLogic)(nil).SetTicketManager), tm)
}

// SetRepoManager mocks base method
func (m_2 *MockLogic) SetRepoManager(m core.RepoManager) {
	m_2.ctrl.T.Helper()
	m_2.ctrl.Call(m_2, "SetRepoManager", m)
}

// SetRepoManager indicates an expected call of SetRepoManager
func (mr *MockLogicMockRecorder) SetRepoManager(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepoManager", reflect.TypeOf((*MockLogic)(nil).SetRepoManager), m)
}

// GetRepoManager mocks base method
func (m *MockLogic) GetRepoManager() core.RepoManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoManager")
	ret0, _ := ret[0].(core.RepoManager)
	return ret0
}

// GetRepoManager indicates an expected call of GetRepoManager
func (mr *MockLogicMockRecorder) GetRepoManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoManager", reflect.TypeOf((*MockLogic)(nil).GetRepoManager))
}

// Cfg mocks base method
func (m *MockLogic) Cfg() *config.AppConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cfg")
	ret0, _ := ret[0].(*config.AppConfig)
	return ret0
}

// Cfg indicates an expected call of Cfg
func (mr *MockLogicMockRecorder) Cfg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cfg", reflect.TypeOf((*MockLogic)(nil).Cfg))
}

// GetMempoolReactor mocks base method
func (m *MockLogic) GetMempoolReactor() core.MempoolReactor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMempoolReactor")
	ret0, _ := ret[0].(core.MempoolReactor)
	return ret0
}

// GetMempoolReactor indicates an expected call of GetMempoolReactor
func (mr *MockLogicMockRecorder) GetMempoolReactor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempoolReactor", reflect.TypeOf((*MockLogic)(nil).GetMempoolReactor))
}

// SetMempoolReactor mocks base method
func (m *MockLogic) SetMempoolReactor(mr core.MempoolReactor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMempoolReactor", mr)
}

// SetMempoolReactor indicates an expected call of SetMempoolReactor
func (mr_2 *MockLogicMockRecorder) SetMempoolReactor(mr interface{}) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "SetMempoolReactor", reflect.TypeOf((*MockLogic)(nil).SetMempoolReactor), mr)
}

// OnEndBlock mocks base method
func (m *MockLogic) OnEndBlock(block *core.BlockInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnEndBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnEndBlock indicates an expected call of OnEndBlock
func (mr *MockLogicMockRecorder) OnEndBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEndBlock", reflect.TypeOf((*MockLogic)(nil).OnEndBlock), block)
}

// MockKeepers is a mock of Keepers interface
type MockKeepers struct {
	ctrl     *gomock.Controller
	recorder *MockKeepersMockRecorder
}

// MockKeepersMockRecorder is the mock recorder for MockKeepers
type MockKeepersMockRecorder struct {
	mock *MockKeepers
}

// NewMockKeepers creates a new mock instance
func NewMockKeepers(ctrl *gomock.Controller) *MockKeepers {
	mock := &MockKeepers{ctrl: ctrl}
	mock.recorder = &MockKeepersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeepers) EXPECT() *MockKeepersMockRecorder {
	return m.recorder
}

// SysKeeper mocks base method
func (m *MockKeepers) SysKeeper() core.SystemKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SysKeeper")
	ret0, _ := ret[0].(core.SystemKeeper)
	return ret0
}

// SysKeeper indicates an expected call of SysKeeper
func (mr *MockKeepersMockRecorder) SysKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SysKeeper", reflect.TypeOf((*MockKeepers)(nil).SysKeeper))
}

// ManagedSysKeeper mocks base method
func (m *MockKeepers) ManagedSysKeeper() core.SystemKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagedSysKeeper")
	ret0, _ := ret[0].(core.SystemKeeper)
	return ret0
}

// ManagedSysKeeper indicates an expected call of ManagedSysKeeper
func (mr *MockKeepersMockRecorder) ManagedSysKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedSysKeeper", reflect.TypeOf((*MockKeepers)(nil).ManagedSysKeeper))
}

// AccountKeeper mocks base method
func (m *MockKeepers) AccountKeeper() core.AccountKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountKeeper")
	ret0, _ := ret[0].(core.AccountKeeper)
	return ret0
}

// AccountKeeper indicates an expected call of AccountKeeper
func (mr *MockKeepersMockRecorder) AccountKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountKeeper", reflect.TypeOf((*MockKeepers)(nil).AccountKeeper))
}

// ValidatorKeeper mocks base method
func (m *MockKeepers) ValidatorKeeper() core.ValidatorKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorKeeper")
	ret0, _ := ret[0].(core.ValidatorKeeper)
	return ret0
}

// ValidatorKeeper indicates an expected call of ValidatorKeeper
func (mr *MockKeepersMockRecorder) ValidatorKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorKeeper", reflect.TypeOf((*MockKeepers)(nil).ValidatorKeeper))
}

// TxKeeper mocks base method
func (m *MockKeepers) TxKeeper() core.TxKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxKeeper")
	ret0, _ := ret[0].(core.TxKeeper)
	return ret0
}

// TxKeeper indicates an expected call of TxKeeper
func (mr *MockKeepersMockRecorder) TxKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxKeeper", reflect.TypeOf((*MockKeepers)(nil).TxKeeper))
}

// RepoKeeper mocks base method
func (m *MockKeepers) RepoKeeper() core.RepoKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoKeeper")
	ret0, _ := ret[0].(core.RepoKeeper)
	return ret0
}

// RepoKeeper indicates an expected call of RepoKeeper
func (mr *MockKeepersMockRecorder) RepoKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoKeeper", reflect.TypeOf((*MockKeepers)(nil).RepoKeeper))
}

// PushKeyKeeper mocks base method
func (m *MockKeepers) PushKeyKeeper() core.PushKeyKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushKeyKeeper")
	ret0, _ := ret[0].(core.PushKeyKeeper)
	return ret0
}

// PushKeyKeeper indicates an expected call of PushKeyKeeper
func (mr *MockKeepersMockRecorder) PushKeyKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushKeyKeeper", reflect.TypeOf((*MockKeepers)(nil).PushKeyKeeper))
}

// GetTicketManager mocks base method
func (m *MockKeepers) GetTicketManager() types0.TicketManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketManager")
	ret0, _ := ret[0].(types0.TicketManager)
	return ret0
}

// GetTicketManager indicates an expected call of GetTicketManager
func (mr *MockKeepersMockRecorder) GetTicketManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketManager", reflect.TypeOf((*MockKeepers)(nil).GetTicketManager))
}

// NamespaceKeeper mocks base method
func (m *MockKeepers) NamespaceKeeper() core.NamespaceKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceKeeper")
	ret0, _ := ret[0].(core.NamespaceKeeper)
	return ret0
}

// NamespaceKeeper indicates an expected call of NamespaceKeeper
func (mr *MockKeepersMockRecorder) NamespaceKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceKeeper", reflect.TypeOf((*MockKeepers)(nil).NamespaceKeeper))
}

// MockLogicCommon is a mock of LogicCommon interface
type MockLogicCommon struct {
	ctrl     *gomock.Controller
	recorder *MockLogicCommonMockRecorder
}

// MockLogicCommonMockRecorder is the mock recorder for MockLogicCommon
type MockLogicCommonMockRecorder struct {
	mock *MockLogicCommon
}

// NewMockLogicCommon creates a new mock instance
func NewMockLogicCommon(ctrl *gomock.Controller) *MockLogicCommon {
	mock := &MockLogicCommon{ctrl: ctrl}
	mock.recorder = &MockLogicCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogicCommon) EXPECT() *MockLogicCommonMockRecorder {
	return m.recorder
}

// MockValidatorKeeper is a mock of ValidatorKeeper interface
type MockValidatorKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorKeeperMockRecorder
}

// MockValidatorKeeperMockRecorder is the mock recorder for MockValidatorKeeper
type MockValidatorKeeperMockRecorder struct {
	mock *MockValidatorKeeper
}

// NewMockValidatorKeeper creates a new mock instance
func NewMockValidatorKeeper(ctrl *gomock.Controller) *MockValidatorKeeper {
	mock := &MockValidatorKeeper{ctrl: ctrl}
	mock.recorder = &MockValidatorKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorKeeper) EXPECT() *MockValidatorKeeperMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockValidatorKeeper) GetByHeight(height int64) (core.BlockValidators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", height)
	ret0, _ := ret[0].(core.BlockValidators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockValidatorKeeperMockRecorder) GetByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockValidatorKeeper)(nil).GetByHeight), height)
}

// Index mocks base method
func (m *MockValidatorKeeper) Index(height int64, validators []*core.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", height, validators)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockValidatorKeeperMockRecorder) Index(height, validators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockValidatorKeeper)(nil).Index), height, validators)
}

// MockValidatorLogic is a mock of ValidatorLogic interface
type MockValidatorLogic struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorLogicMockRecorder
}

// MockValidatorLogicMockRecorder is the mock recorder for MockValidatorLogic
type MockValidatorLogicMockRecorder struct {
	mock *MockValidatorLogic
}

// NewMockValidatorLogic creates a new mock instance
func NewMockValidatorLogic(ctrl *gomock.Controller) *MockValidatorLogic {
	mock := &MockValidatorLogic{ctrl: ctrl}
	mock.recorder = &MockValidatorLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorLogic) EXPECT() *MockValidatorLogicMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockValidatorLogic) Index(height int64, valUpdates []types.ValidatorUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", height, valUpdates)
	ret0, _ := ret[0].(error)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockValidatorLogicMockRecorder) Index(height, valUpdates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockValidatorLogic)(nil).Index), height, valUpdates)
}

// MockTxLogic is a mock of TxLogic interface
type MockTxLogic struct {
	ctrl     *gomock.Controller
	recorder *MockTxLogicMockRecorder
}

// MockTxLogicMockRecorder is the mock recorder for MockTxLogic
type MockTxLogicMockRecorder struct {
	mock *MockTxLogic
}

// NewMockTxLogic creates a new mock instance
func NewMockTxLogic(ctrl *gomock.Controller) *MockTxLogic {
	mock := &MockTxLogic{ctrl: ctrl}
	mock.recorder = &MockTxLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxLogic) EXPECT() *MockTxLogicMockRecorder {
	return m.recorder
}

// ExecTx mocks base method
func (m *MockTxLogic) ExecTx(tx types1.BaseTx, chainHeight uint64) types.ResponseDeliverTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", tx, chainHeight)
	ret0, _ := ret[0].(types.ResponseDeliverTx)
	return ret0
}

// ExecTx indicates an expected call of ExecTx
func (mr *MockTxLogicMockRecorder) ExecTx(tx, chainHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockTxLogic)(nil).ExecTx), tx, chainHeight)
}

// CanExecCoinTransfer mocks base method
func (m *MockTxLogic) CanExecCoinTransfer(sender interface{}, value, fee util.String, nonce, chainHeight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanExecCoinTransfer", sender, value, fee, nonce, chainHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanExecCoinTransfer indicates an expected call of CanExecCoinTransfer
func (mr *MockTxLogicMockRecorder) CanExecCoinTransfer(sender, value, fee, nonce, chainHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanExecCoinTransfer", reflect.TypeOf((*MockTxLogic)(nil).CanExecCoinTransfer), sender, value, fee, nonce, chainHeight)
}

// MockSysLogic is a mock of SysLogic interface
type MockSysLogic struct {
	ctrl     *gomock.Controller
	recorder *MockSysLogicMockRecorder
}

// MockSysLogicMockRecorder is the mock recorder for MockSysLogic
type MockSysLogicMockRecorder struct {
	mock *MockSysLogic
}

// NewMockSysLogic creates a new mock instance
func NewMockSysLogic(ctrl *gomock.Controller) *MockSysLogic {
	mock := &MockSysLogic{ctrl: ctrl}
	mock.recorder = &MockSysLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSysLogic) EXPECT() *MockSysLogicMockRecorder {
	return m.recorder
}

// GetCurValidatorTicketPrice mocks base method
func (m *MockSysLogic) GetCurValidatorTicketPrice() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurValidatorTicketPrice")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetCurValidatorTicketPrice indicates an expected call of GetCurValidatorTicketPrice
func (mr *MockSysLogicMockRecorder) GetCurValidatorTicketPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurValidatorTicketPrice", reflect.TypeOf((*MockSysLogic)(nil).GetCurValidatorTicketPrice))
}
