// Code generated by MockGen. DO NOT EDIT.
// Source: remote/refsync/refsync.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	fetcher "github.com/make-os/lobe/remote/fetcher"
	txns "github.com/make-os/lobe/types/txns"
	reflect "reflect"
)

// MockRefSyncer is a mock of RefSyncer interface
type MockRefSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockRefSyncerMockRecorder
}

// MockRefSyncerMockRecorder is the mock recorder for MockRefSyncer
type MockRefSyncerMockRecorder struct {
	mock *MockRefSyncer
}

// NewMockRefSyncer creates a new mock instance
func NewMockRefSyncer(ctrl *gomock.Controller) *MockRefSyncer {
	mock := &MockRefSyncer{ctrl: ctrl}
	mock.recorder = &MockRefSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRefSyncer) EXPECT() *MockRefSyncerMockRecorder {
	return m.recorder
}

// OnNewTx mocks base method
func (m *MockRefSyncer) OnNewTx(tx *txns.TxPush) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNewTx", tx)
}

// OnNewTx indicates an expected call of OnNewTx
func (mr *MockRefSyncerMockRecorder) OnNewTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewTx", reflect.TypeOf((*MockRefSyncer)(nil).OnNewTx), tx)
}

// SetFetcher mocks base method
func (m *MockRefSyncer) SetFetcher(fetcher fetcher.ObjectFetcherService) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFetcher", fetcher)
}

// SetFetcher indicates an expected call of SetFetcher
func (mr *MockRefSyncerMockRecorder) SetFetcher(fetcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFetcher", reflect.TypeOf((*MockRefSyncer)(nil).SetFetcher), fetcher)
}

// Start mocks base method
func (m *MockRefSyncer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockRefSyncerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRefSyncer)(nil).Start))
}

// IsRunning mocks base method
func (m *MockRefSyncer) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockRefSyncerMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockRefSyncer)(nil).IsRunning))
}

// HasTask mocks base method
func (m *MockRefSyncer) HasTask() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTask")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTask indicates an expected call of HasTask
func (mr *MockRefSyncerMockRecorder) HasTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTask", reflect.TypeOf((*MockRefSyncer)(nil).HasTask))
}

// QueueSize mocks base method
func (m *MockRefSyncer) QueueSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// QueueSize indicates an expected call of QueueSize
func (mr *MockRefSyncerMockRecorder) QueueSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSize", reflect.TypeOf((*MockRefSyncer)(nil).QueueSize))
}

// CanSync mocks base method
func (m *MockRefSyncer) CanSync(namespace, repoName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSync", namespace, repoName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanSync indicates an expected call of CanSync
func (mr *MockRefSyncerMockRecorder) CanSync(namespace, repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSync", reflect.TypeOf((*MockRefSyncer)(nil).CanSync), namespace, repoName)
}

// Stop mocks base method
func (m *MockRefSyncer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockRefSyncerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRefSyncer)(nil).Stop))
}
