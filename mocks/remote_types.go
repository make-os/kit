// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/make-os/kit/remote/types (interfaces: GitModule,LocalRepo,Commit)

// Package mocks is a generated GoMock package.
package mocks

import (
	config "github.com/go-git/go-git/v5/config"
	plumbing "github.com/go-git/go-git/v5/plumbing"
	object "github.com/go-git/go-git/v5/plumbing/object"
	storer "github.com/go-git/go-git/v5/plumbing/storer"
	storage "github.com/go-git/go-git/v5/storage"
	gomock "github.com/golang/mock/gomock"
	types "github.com/make-os/kit/remote/types"
	state "github.com/make-os/kit/types/state"
	reflect "reflect"
	time "time"
)

// MockGitModule is a mock of GitModule interface
type MockGitModule struct {
	ctrl     *gomock.Controller
	recorder *MockGitModuleMockRecorder
}

// MockGitModuleMockRecorder is the mock recorder for MockGitModule
type MockGitModuleMockRecorder struct {
	mock *MockGitModule
}

// NewMockGitModule creates a new mock instance
func NewMockGitModule(ctrl *gomock.Controller) *MockGitModule {
	mock := &MockGitModule{ctrl: ctrl}
	mock.recorder = &MockGitModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitModule) EXPECT() *MockGitModuleMockRecorder {
	return m.recorder
}

// AddEntryToNote mocks base method
func (m *MockGitModule) AddEntryToNote(arg0, arg1, arg2 string, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEntryToNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntryToNote indicates an expected call of AddEntryToNote
func (mr *MockGitModuleMockRecorder) AddEntryToNote(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntryToNote", reflect.TypeOf((*MockGitModule)(nil).AddEntryToNote), varargs...)
}

// AmendRecentCommitWithMsg mocks base method
func (m *MockGitModule) AmendRecentCommitWithMsg(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AmendRecentCommitWithMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AmendRecentCommitWithMsg indicates an expected call of AmendRecentCommitWithMsg
func (mr *MockGitModuleMockRecorder) AmendRecentCommitWithMsg(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmendRecentCommitWithMsg", reflect.TypeOf((*MockGitModule)(nil).AmendRecentCommitWithMsg), varargs...)
}

// Checkout mocks base method
func (m *MockGitModule) Checkout(arg0 string, arg1, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout
func (mr *MockGitModuleMockRecorder) Checkout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockGitModule)(nil).Checkout), arg0, arg1, arg2)
}

// CreateBlob mocks base method
func (m *MockGitModule) CreateBlob(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob
func (mr *MockGitModuleMockRecorder) CreateBlob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockGitModule)(nil).CreateBlob), arg0)
}

// CreateEmptyCommit mocks base method
func (m *MockGitModule) CreateEmptyCommit(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmptyCommit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmptyCommit indicates an expected call of CreateEmptyCommit
func (mr *MockGitModuleMockRecorder) CreateEmptyCommit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmptyCommit", reflect.TypeOf((*MockGitModule)(nil).CreateEmptyCommit), varargs...)
}

// CreateSingleFileCommit mocks base method
func (m *MockGitModule) CreateSingleFileCommit(arg0, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSingleFileCommit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleFileCommit indicates an expected call of CreateSingleFileCommit
func (mr *MockGitModuleMockRecorder) CreateSingleFileCommit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleFileCommit", reflect.TypeOf((*MockGitModule)(nil).CreateSingleFileCommit), arg0, arg1, arg2, arg3)
}

// CreateTagWithMsg mocks base method
func (m *MockGitModule) CreateTagWithMsg(arg0 []string, arg1, arg2 string, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagWithMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTagWithMsg indicates an expected call of CreateTagWithMsg
func (mr *MockGitModuleMockRecorder) CreateTagWithMsg(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagWithMsg", reflect.TypeOf((*MockGitModule)(nil).CreateTagWithMsg), varargs...)
}

// ExpandShortHash mocks base method
func (m *MockGitModule) ExpandShortHash(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandShortHash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandShortHash indicates an expected call of ExpandShortHash
func (mr *MockGitModuleMockRecorder) ExpandShortHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandShortHash", reflect.TypeOf((*MockGitModule)(nil).ExpandShortHash), arg0)
}

// GC mocks base method
func (m *MockGitModule) GC(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GC", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GC indicates an expected call of GC
func (mr *MockGitModuleMockRecorder) GC(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockGitModule)(nil).GC), arg0...)
}

// GetHEAD mocks base method
func (m *MockGitModule) GetHEAD(arg0 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHEAD", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHEAD indicates an expected call of GetHEAD
func (mr *MockGitModuleMockRecorder) GetHEAD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHEAD", reflect.TypeOf((*MockGitModule)(nil).GetHEAD), arg0)
}

// GetMergeCommits mocks base method
func (m *MockGitModule) GetMergeCommits(arg0 string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeCommits", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeCommits indicates an expected call of GetMergeCommits
func (mr *MockGitModuleMockRecorder) GetMergeCommits(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeCommits", reflect.TypeOf((*MockGitModule)(nil).GetMergeCommits), varargs...)
}

// GetPathUpdateTime mocks base method
func (m *MockGitModule) GetPathUpdateTime(arg0 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathUpdateTime", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPathUpdateTime indicates an expected call of GetPathUpdateTime
func (mr *MockGitModuleMockRecorder) GetPathUpdateTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathUpdateTime", reflect.TypeOf((*MockGitModule)(nil).GetPathUpdateTime), arg0)
}

// GetRecentCommitHash mocks base method
func (m *MockGitModule) GetRecentCommitHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentCommitHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentCommitHash indicates an expected call of GetRecentCommitHash
func (mr *MockGitModuleMockRecorder) GetRecentCommitHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentCommitHash", reflect.TypeOf((*MockGitModule)(nil).GetRecentCommitHash))
}

// GetRefCommits mocks base method
func (m *MockGitModule) GetRefCommits(arg0 string, arg1 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefCommits", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefCommits indicates an expected call of GetRefCommits
func (mr *MockGitModuleMockRecorder) GetRefCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefCommits", reflect.TypeOf((*MockGitModule)(nil).GetRefCommits), arg0, arg1)
}

// GetRefRootCommit mocks base method
func (m *MockGitModule) GetRefRootCommit(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefRootCommit", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefRootCommit indicates an expected call of GetRefRootCommit
func (mr *MockGitModuleMockRecorder) GetRefRootCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefRootCommit", reflect.TypeOf((*MockGitModule)(nil).GetRefRootCommit), arg0)
}

// HasMergeCommits mocks base method
func (m *MockGitModule) HasMergeCommits(arg0 string, arg1 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasMergeCommits", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMergeCommits indicates an expected call of HasMergeCommits
func (mr *MockGitModuleMockRecorder) HasMergeCommits(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMergeCommits", reflect.TypeOf((*MockGitModule)(nil).HasMergeCommits), varargs...)
}

// ListTreeObjects mocks base method
func (m *MockGitModule) ListTreeObjects(arg0 string, arg1 bool, arg2 ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjects", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjects indicates an expected call of ListTreeObjects
func (mr *MockGitModuleMockRecorder) ListTreeObjects(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjects", reflect.TypeOf((*MockGitModule)(nil).ListTreeObjects), varargs...)
}

// ListTreeObjectsSlice mocks base method
func (m *MockGitModule) ListTreeObjectsSlice(arg0 string, arg1, arg2 bool, arg3 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjectsSlice", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjectsSlice indicates an expected call of ListTreeObjectsSlice
func (mr *MockGitModuleMockRecorder) ListTreeObjectsSlice(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjectsSlice", reflect.TypeOf((*MockGitModule)(nil).ListTreeObjectsSlice), varargs...)
}

// NumCommits mocks base method
func (m *MockGitModule) NumCommits(arg0 string, arg1 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumCommits", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumCommits indicates an expected call of NumCommits
func (mr *MockGitModuleMockRecorder) NumCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumCommits", reflect.TypeOf((*MockGitModule)(nil).NumCommits), arg0, arg1)
}

// RefDelete mocks base method
func (m *MockGitModule) RefDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefDelete indicates an expected call of RefDelete
func (mr *MockGitModuleMockRecorder) RefDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefDelete", reflect.TypeOf((*MockGitModule)(nil).RefDelete), arg0)
}

// RefFetch mocks base method
func (m *MockGitModule) RefFetch(arg0 types.RefFetchArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefFetch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefFetch indicates an expected call of RefFetch
func (mr *MockGitModuleMockRecorder) RefFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefFetch", reflect.TypeOf((*MockGitModule)(nil).RefFetch), arg0)
}

// RefGet mocks base method
func (m *MockGitModule) RefGet(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefGet", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefGet indicates an expected call of RefGet
func (mr *MockGitModuleMockRecorder) RefGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefGet", reflect.TypeOf((*MockGitModule)(nil).RefGet), arg0)
}

// RefUpdate mocks base method
func (m *MockGitModule) RefUpdate(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefUpdate indicates an expected call of RefUpdate
func (mr *MockGitModuleMockRecorder) RefUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefUpdate", reflect.TypeOf((*MockGitModule)(nil).RefUpdate), arg0, arg1)
}

// RemoveEntryFromNote mocks base method
func (m *MockGitModule) RemoveEntryFromNote(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEntryFromNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEntryFromNote indicates an expected call of RemoveEntryFromNote
func (mr *MockGitModuleMockRecorder) RemoveEntryFromNote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntryFromNote", reflect.TypeOf((*MockGitModule)(nil).RemoveEntryFromNote), varargs...)
}

// Size mocks base method
func (m *MockGitModule) Size() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size
func (mr *MockGitModuleMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockGitModule)(nil).Size))
}

// TagDelete mocks base method
func (m *MockGitModule) TagDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagDelete indicates an expected call of TagDelete
func (mr *MockGitModuleMockRecorder) TagDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockGitModule)(nil).TagDelete), arg0)
}

// Var mocks base method
func (m *MockGitModule) Var(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Var", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Var indicates an expected call of Var
func (mr *MockGitModuleMockRecorder) Var(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Var", reflect.TypeOf((*MockGitModule)(nil).Var), arg0)
}

// MockLocalRepo is a mock of LocalRepo interface
type MockLocalRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLocalRepoMockRecorder
}

// MockLocalRepoMockRecorder is the mock recorder for MockLocalRepo
type MockLocalRepoMockRecorder struct {
	mock *MockLocalRepo
}

// NewMockLocalRepo creates a new mock instance
func NewMockLocalRepo(ctrl *gomock.Controller) *MockLocalRepo {
	mock := &MockLocalRepo{ctrl: ctrl}
	mock.recorder = &MockLocalRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLocalRepo) EXPECT() *MockLocalRepoMockRecorder {
	return m.recorder
}

// AddEntryToNote mocks base method
func (m *MockLocalRepo) AddEntryToNote(arg0, arg1, arg2 string, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEntryToNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntryToNote indicates an expected call of AddEntryToNote
func (mr *MockLocalRepoMockRecorder) AddEntryToNote(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntryToNote", reflect.TypeOf((*MockLocalRepo)(nil).AddEntryToNote), varargs...)
}

// AmendRecentCommitWithMsg mocks base method
func (m *MockLocalRepo) AmendRecentCommitWithMsg(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AmendRecentCommitWithMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AmendRecentCommitWithMsg indicates an expected call of AmendRecentCommitWithMsg
func (mr *MockLocalRepoMockRecorder) AmendRecentCommitWithMsg(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmendRecentCommitWithMsg", reflect.TypeOf((*MockLocalRepo)(nil).AmendRecentCommitWithMsg), varargs...)
}

// BlobObject mocks base method
func (m *MockLocalRepo) BlobObject(arg0 plumbing.Hash) (*object.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlobObject", arg0)
	ret0, _ := ret[0].(*object.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobObject indicates an expected call of BlobObject
func (mr *MockLocalRepoMockRecorder) BlobObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobObject", reflect.TypeOf((*MockLocalRepo)(nil).BlobObject), arg0)
}

// Checkout mocks base method
func (m *MockLocalRepo) Checkout(arg0 string, arg1, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout
func (mr *MockLocalRepoMockRecorder) Checkout(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockLocalRepo)(nil).Checkout), arg0, arg1, arg2)
}

// CommitObject mocks base method
func (m *MockLocalRepo) CommitObject(arg0 plumbing.Hash) (*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitObject", arg0)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObject indicates an expected call of CommitObject
func (mr *MockLocalRepoMockRecorder) CommitObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObject", reflect.TypeOf((*MockLocalRepo)(nil).CommitObject), arg0)
}

// CommitObjects mocks base method
func (m *MockLocalRepo) CommitObjects() (object.CommitIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitObjects")
	ret0, _ := ret[0].(object.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObjects indicates an expected call of CommitObjects
func (mr *MockLocalRepoMockRecorder) CommitObjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObjects", reflect.TypeOf((*MockLocalRepo)(nil).CommitObjects))
}

// Config mocks base method
func (m *MockLocalRepo) Config() (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config
func (mr *MockLocalRepoMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockLocalRepo)(nil).Config))
}

// CreateBlob mocks base method
func (m *MockLocalRepo) CreateBlob(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob
func (mr *MockLocalRepoMockRecorder) CreateBlob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockLocalRepo)(nil).CreateBlob), arg0)
}

// CreateEmptyCommit mocks base method
func (m *MockLocalRepo) CreateEmptyCommit(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEmptyCommit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmptyCommit indicates an expected call of CreateEmptyCommit
func (mr *MockLocalRepoMockRecorder) CreateEmptyCommit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmptyCommit", reflect.TypeOf((*MockLocalRepo)(nil).CreateEmptyCommit), varargs...)
}

// CreateSingleFileCommit mocks base method
func (m *MockLocalRepo) CreateSingleFileCommit(arg0, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSingleFileCommit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSingleFileCommit indicates an expected call of CreateSingleFileCommit
func (mr *MockLocalRepoMockRecorder) CreateSingleFileCommit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSingleFileCommit", reflect.TypeOf((*MockLocalRepo)(nil).CreateSingleFileCommit), arg0, arg1, arg2, arg3)
}

// CreateTagWithMsg mocks base method
func (m *MockLocalRepo) CreateTagWithMsg(arg0 []string, arg1, arg2 string, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagWithMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTagWithMsg indicates an expected call of CreateTagWithMsg
func (mr *MockLocalRepoMockRecorder) CreateTagWithMsg(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagWithMsg", reflect.TypeOf((*MockLocalRepo)(nil).CreateTagWithMsg), varargs...)
}

// DeleteObject mocks base method
func (m *MockLocalRepo) DeleteObject(arg0 plumbing.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject
func (mr *MockLocalRepoMockRecorder) DeleteObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockLocalRepo)(nil).DeleteObject), arg0)
}

// ExpandShortHash mocks base method
func (m *MockLocalRepo) ExpandShortHash(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandShortHash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandShortHash indicates an expected call of ExpandShortHash
func (mr *MockLocalRepoMockRecorder) ExpandShortHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandShortHash", reflect.TypeOf((*MockLocalRepo)(nil).ExpandShortHash), arg0)
}

// GC mocks base method
func (m *MockLocalRepo) GC(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GC", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GC indicates an expected call of GC
func (mr *MockLocalRepoMockRecorder) GC(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockLocalRepo)(nil).GC), arg0...)
}

// GetAncestors mocks base method
func (m *MockLocalRepo) GetAncestors(arg0 *object.Commit, arg1 string, arg2 bool) ([]*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAncestors", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAncestors indicates an expected call of GetAncestors
func (mr *MockLocalRepoMockRecorder) GetAncestors(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAncestors", reflect.TypeOf((*MockLocalRepo)(nil).GetAncestors), arg0, arg1, arg2)
}

// GetBranches mocks base method
func (m *MockLocalRepo) GetBranches() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranches indicates an expected call of GetBranches
func (mr *MockLocalRepoMockRecorder) GetBranches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockLocalRepo)(nil).GetBranches))
}

// GetCommitAncestors mocks base method
func (m *MockLocalRepo) GetCommitAncestors(arg0 string, arg1 int) ([]*types.BranchCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitAncestors", arg0, arg1)
	ret0, _ := ret[0].([]*types.BranchCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitAncestors indicates an expected call of GetCommitAncestors
func (mr *MockLocalRepoMockRecorder) GetCommitAncestors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitAncestors", reflect.TypeOf((*MockLocalRepo)(nil).GetCommitAncestors), arg0, arg1)
}

// GetCommits mocks base method
func (m *MockLocalRepo) GetCommits(arg0 string, arg1 int) ([]*types.BranchCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommits", arg0, arg1)
	ret0, _ := ret[0].([]*types.BranchCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommits indicates an expected call of GetCommits
func (mr *MockLocalRepoMockRecorder) GetCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommits", reflect.TypeOf((*MockLocalRepo)(nil).GetCommits), arg0, arg1)
}

// GetFileLines mocks base method
func (m *MockLocalRepo) GetFileLines(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileLines", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileLines indicates an expected call of GetFileLines
func (mr *MockLocalRepoMockRecorder) GetFileLines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileLines", reflect.TypeOf((*MockLocalRepo)(nil).GetFileLines), arg0, arg1)
}

// GetGitConfigOption mocks base method
func (m *MockLocalRepo) GetGitConfigOption(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitConfigOption", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGitConfigOption indicates an expected call of GetGitConfigOption
func (mr *MockLocalRepoMockRecorder) GetGitConfigOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitConfigOption", reflect.TypeOf((*MockLocalRepo)(nil).GetGitConfigOption), arg0)
}

// GetHEAD mocks base method
func (m *MockLocalRepo) GetHEAD(arg0 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHEAD", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHEAD indicates an expected call of GetHEAD
func (mr *MockLocalRepoMockRecorder) GetHEAD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHEAD", reflect.TypeOf((*MockLocalRepo)(nil).GetHEAD), arg0)
}

// GetLatestCommit mocks base method
func (m *MockLocalRepo) GetLatestCommit(arg0 string) (*types.BranchCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestCommit", arg0)
	ret0, _ := ret[0].(*types.BranchCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestCommit indicates an expected call of GetLatestCommit
func (mr *MockLocalRepoMockRecorder) GetLatestCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestCommit", reflect.TypeOf((*MockLocalRepo)(nil).GetLatestCommit), arg0)
}

// GetMergeCommits mocks base method
func (m *MockLocalRepo) GetMergeCommits(arg0 string, arg1 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeCommits", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMergeCommits indicates an expected call of GetMergeCommits
func (mr *MockLocalRepoMockRecorder) GetMergeCommits(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeCommits", reflect.TypeOf((*MockLocalRepo)(nil).GetMergeCommits), varargs...)
}

// GetName mocks base method
func (m *MockLocalRepo) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockLocalRepoMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockLocalRepo)(nil).GetName))
}

// GetNamespace mocks base method
func (m *MockLocalRepo) GetNamespace() *state.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(*state.Namespace)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockLocalRepoMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockLocalRepo)(nil).GetNamespace))
}

// GetNamespaceName mocks base method
func (m *MockLocalRepo) GetNamespaceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespaceName indicates an expected call of GetNamespaceName
func (mr *MockLocalRepoMockRecorder) GetNamespaceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceName", reflect.TypeOf((*MockLocalRepo)(nil).GetNamespaceName))
}

// GetObject mocks base method
func (m *MockLocalRepo) GetObject(arg0 string) (object.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0)
	ret0, _ := ret[0].(object.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject
func (mr *MockLocalRepoMockRecorder) GetObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockLocalRepo)(nil).GetObject), arg0)
}

// GetObjectSize mocks base method
func (m *MockLocalRepo) GetObjectSize(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectSize", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectSize indicates an expected call of GetObjectSize
func (mr *MockLocalRepoMockRecorder) GetObjectSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectSize", reflect.TypeOf((*MockLocalRepo)(nil).GetObjectSize), arg0)
}

// GetPath mocks base method
func (m *MockLocalRepo) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath
func (mr *MockLocalRepoMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockLocalRepo)(nil).GetPath))
}

// GetPathUpdateTime mocks base method
func (m *MockLocalRepo) GetPathUpdateTime(arg0 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathUpdateTime", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPathUpdateTime indicates an expected call of GetPathUpdateTime
func (mr *MockLocalRepoMockRecorder) GetPathUpdateTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathUpdateTime", reflect.TypeOf((*MockLocalRepo)(nil).GetPathUpdateTime), arg0)
}

// GetRecentCommitHash mocks base method
func (m *MockLocalRepo) GetRecentCommitHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentCommitHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentCommitHash indicates an expected call of GetRecentCommitHash
func (mr *MockLocalRepoMockRecorder) GetRecentCommitHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentCommitHash", reflect.TypeOf((*MockLocalRepo)(nil).GetRecentCommitHash))
}

// GetRefCommits mocks base method
func (m *MockLocalRepo) GetRefCommits(arg0 string, arg1 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefCommits", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefCommits indicates an expected call of GetRefCommits
func (mr *MockLocalRepoMockRecorder) GetRefCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefCommits", reflect.TypeOf((*MockLocalRepo)(nil).GetRefCommits), arg0, arg1)
}

// GetRefRootCommit mocks base method
func (m *MockLocalRepo) GetRefRootCommit(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefRootCommit", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefRootCommit indicates an expected call of GetRefRootCommit
func (mr *MockLocalRepoMockRecorder) GetRefRootCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefRootCommit", reflect.TypeOf((*MockLocalRepo)(nil).GetRefRootCommit), arg0)
}

// GetReferences mocks base method
func (m *MockLocalRepo) GetReferences() ([]plumbing.ReferenceName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferences")
	ret0, _ := ret[0].([]plumbing.ReferenceName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferences indicates an expected call of GetReferences
func (mr *MockLocalRepoMockRecorder) GetReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferences", reflect.TypeOf((*MockLocalRepo)(nil).GetReferences))
}

// GetRemoteURLs mocks base method
func (m *MockLocalRepo) GetRemoteURLs(arg0 ...string) []string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRemoteURLs", varargs...)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRemoteURLs indicates an expected call of GetRemoteURLs
func (mr *MockLocalRepoMockRecorder) GetRemoteURLs(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteURLs", reflect.TypeOf((*MockLocalRepo)(nil).GetRemoteURLs), arg0...)
}

// GetRepoConfig mocks base method
func (m *MockLocalRepo) GetRepoConfig() (*types.LocalConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoConfig")
	ret0, _ := ret[0].(*types.LocalConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoConfig indicates an expected call of GetRepoConfig
func (mr *MockLocalRepoMockRecorder) GetRepoConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoConfig", reflect.TypeOf((*MockLocalRepo)(nil).GetRepoConfig))
}

// GetState mocks base method
func (m *MockLocalRepo) GetState() *state.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(*state.Repository)
	return ret0
}

// GetState indicates an expected call of GetState
func (mr *MockLocalRepoMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockLocalRepo)(nil).GetState))
}

// GetStorer mocks base method
func (m *MockLocalRepo) GetStorer() storage.Storer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorer")
	ret0, _ := ret[0].(storage.Storer)
	return ret0
}

// GetStorer indicates an expected call of GetStorer
func (mr *MockLocalRepoMockRecorder) GetStorer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorer", reflect.TypeOf((*MockLocalRepo)(nil).GetStorer))
}

// HasMergeCommits mocks base method
func (m *MockLocalRepo) HasMergeCommits(arg0 string, arg1 ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasMergeCommits", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMergeCommits indicates an expected call of HasMergeCommits
func (mr *MockLocalRepoMockRecorder) HasMergeCommits(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMergeCommits", reflect.TypeOf((*MockLocalRepo)(nil).HasMergeCommits), varargs...)
}

// Head mocks base method
func (m *MockLocalRepo) Head() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head
func (mr *MockLocalRepoMockRecorder) Head() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockLocalRepo)(nil).Head))
}

// HeadObject mocks base method
func (m *MockLocalRepo) HeadObject() (object.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadObject")
	ret0, _ := ret[0].(object.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject
func (mr *MockLocalRepoMockRecorder) HeadObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObject", reflect.TypeOf((*MockLocalRepo)(nil).HeadObject))
}

// IsAncestor mocks base method
func (m *MockLocalRepo) IsAncestor(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAncestor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsAncestor indicates an expected call of IsAncestor
func (mr *MockLocalRepoMockRecorder) IsAncestor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAncestor", reflect.TypeOf((*MockLocalRepo)(nil).IsAncestor), arg0, arg1)
}

// IsClean mocks base method
func (m *MockLocalRepo) IsClean() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClean")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsClean indicates an expected call of IsClean
func (mr *MockLocalRepoMockRecorder) IsClean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClean", reflect.TypeOf((*MockLocalRepo)(nil).IsClean))
}

// IsContributor mocks base method
func (m *MockLocalRepo) IsContributor(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContributor", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsContributor indicates an expected call of IsContributor
func (mr *MockLocalRepoMockRecorder) IsContributor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContributor", reflect.TypeOf((*MockLocalRepo)(nil).IsContributor), arg0)
}

// ListPath mocks base method
func (m *MockLocalRepo) ListPath(arg0, arg1 string) ([]types.ListPathValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPath", arg0, arg1)
	ret0, _ := ret[0].([]types.ListPathValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPath indicates an expected call of ListPath
func (mr *MockLocalRepoMockRecorder) ListPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPath", reflect.TypeOf((*MockLocalRepo)(nil).ListPath), arg0, arg1)
}

// ListTreeObjects mocks base method
func (m *MockLocalRepo) ListTreeObjects(arg0 string, arg1 bool, arg2 ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjects", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjects indicates an expected call of ListTreeObjects
func (mr *MockLocalRepoMockRecorder) ListTreeObjects(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjects", reflect.TypeOf((*MockLocalRepo)(nil).ListTreeObjects), varargs...)
}

// ListTreeObjectsSlice mocks base method
func (m *MockLocalRepo) ListTreeObjectsSlice(arg0 string, arg1, arg2 bool, arg3 ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjectsSlice", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjectsSlice indicates an expected call of ListTreeObjectsSlice
func (mr *MockLocalRepoMockRecorder) ListTreeObjectsSlice(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjectsSlice", reflect.TypeOf((*MockLocalRepo)(nil).ListTreeObjectsSlice), varargs...)
}

// NumCommits mocks base method
func (m *MockLocalRepo) NumCommits(arg0 string, arg1 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumCommits", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumCommits indicates an expected call of NumCommits
func (mr *MockLocalRepoMockRecorder) NumCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumCommits", reflect.TypeOf((*MockLocalRepo)(nil).NumCommits), arg0, arg1)
}

// NumIssueBranches mocks base method
func (m *MockLocalRepo) NumIssueBranches() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumIssueBranches")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumIssueBranches indicates an expected call of NumIssueBranches
func (mr *MockLocalRepoMockRecorder) NumIssueBranches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumIssueBranches", reflect.TypeOf((*MockLocalRepo)(nil).NumIssueBranches))
}

// Object mocks base method
func (m *MockLocalRepo) Object(arg0 plumbing.ObjectType, arg1 plumbing.Hash) (object.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object", arg0, arg1)
	ret0, _ := ret[0].(object.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Object indicates an expected call of Object
func (mr *MockLocalRepoMockRecorder) Object(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockLocalRepo)(nil).Object), arg0, arg1)
}

// ObjectExist mocks base method
func (m *MockLocalRepo) ObjectExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ObjectExist indicates an expected call of ObjectExist
func (mr *MockLocalRepoMockRecorder) ObjectExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectExist", reflect.TypeOf((*MockLocalRepo)(nil).ObjectExist), arg0)
}

// Objects mocks base method
func (m *MockLocalRepo) Objects() (*object.ObjectIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Objects")
	ret0, _ := ret[0].(*object.ObjectIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Objects indicates an expected call of Objects
func (mr *MockLocalRepoMockRecorder) Objects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Objects", reflect.TypeOf((*MockLocalRepo)(nil).Objects))
}

// ObjectsOfCommit mocks base method
func (m *MockLocalRepo) ObjectsOfCommit(arg0 string) ([]plumbing.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectsOfCommit", arg0)
	ret0, _ := ret[0].([]plumbing.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectsOfCommit indicates an expected call of ObjectsOfCommit
func (mr *MockLocalRepoMockRecorder) ObjectsOfCommit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectsOfCommit", reflect.TypeOf((*MockLocalRepo)(nil).ObjectsOfCommit), arg0)
}

// Prune mocks base method
func (m *MockLocalRepo) Prune(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prune", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prune indicates an expected call of Prune
func (mr *MockLocalRepoMockRecorder) Prune(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockLocalRepo)(nil).Prune), arg0)
}

// RefDelete mocks base method
func (m *MockLocalRepo) RefDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefDelete indicates an expected call of RefDelete
func (mr *MockLocalRepoMockRecorder) RefDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefDelete", reflect.TypeOf((*MockLocalRepo)(nil).RefDelete), arg0)
}

// RefFetch mocks base method
func (m *MockLocalRepo) RefFetch(arg0 types.RefFetchArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefFetch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefFetch indicates an expected call of RefFetch
func (mr *MockLocalRepoMockRecorder) RefFetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefFetch", reflect.TypeOf((*MockLocalRepo)(nil).RefFetch), arg0)
}

// RefGet mocks base method
func (m *MockLocalRepo) RefGet(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefGet", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefGet indicates an expected call of RefGet
func (mr *MockLocalRepoMockRecorder) RefGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefGet", reflect.TypeOf((*MockLocalRepo)(nil).RefGet), arg0)
}

// RefUpdate mocks base method
func (m *MockLocalRepo) RefUpdate(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefUpdate indicates an expected call of RefUpdate
func (mr *MockLocalRepoMockRecorder) RefUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefUpdate", reflect.TypeOf((*MockLocalRepo)(nil).RefUpdate), arg0, arg1)
}

// Reference mocks base method
func (m *MockLocalRepo) Reference(arg0 plumbing.ReferenceName, arg1 bool) (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reference", arg0, arg1)
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reference indicates an expected call of Reference
func (mr *MockLocalRepoMockRecorder) Reference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reference", reflect.TypeOf((*MockLocalRepo)(nil).Reference), arg0, arg1)
}

// References mocks base method
func (m *MockLocalRepo) References() (storer.ReferenceIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "References")
	ret0, _ := ret[0].(storer.ReferenceIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// References indicates an expected call of References
func (mr *MockLocalRepoMockRecorder) References() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "References", reflect.TypeOf((*MockLocalRepo)(nil).References))
}

// Reload mocks base method
func (m *MockLocalRepo) Reload() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload
func (mr *MockLocalRepoMockRecorder) Reload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockLocalRepo)(nil).Reload))
}

// RemoveEntryFromNote mocks base method
func (m *MockLocalRepo) RemoveEntryFromNote(arg0, arg1 string, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEntryFromNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEntryFromNote indicates an expected call of RemoveEntryFromNote
func (mr *MockLocalRepoMockRecorder) RemoveEntryFromNote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntryFromNote", reflect.TypeOf((*MockLocalRepo)(nil).RemoveEntryFromNote), varargs...)
}

// SetConfig mocks base method
func (m *MockLocalRepo) SetConfig(arg0 *config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig
func (mr *MockLocalRepoMockRecorder) SetConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockLocalRepo)(nil).SetConfig), arg0)
}

// SetPath mocks base method
func (m *MockLocalRepo) SetPath(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPath", arg0)
}

// SetPath indicates an expected call of SetPath
func (mr *MockLocalRepoMockRecorder) SetPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockLocalRepo)(nil).SetPath), arg0)
}

// SetState mocks base method
func (m *MockLocalRepo) SetState(arg0 *state.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0)
}

// SetState indicates an expected call of SetState
func (mr *MockLocalRepoMockRecorder) SetState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockLocalRepo)(nil).SetState), arg0)
}

// Size mocks base method
func (m *MockLocalRepo) Size() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size
func (mr *MockLocalRepoMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockLocalRepo)(nil).Size))
}

// Tag mocks base method
func (m *MockLocalRepo) Tag(arg0 string) (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", arg0)
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tag indicates an expected call of Tag
func (mr *MockLocalRepoMockRecorder) Tag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockLocalRepo)(nil).Tag), arg0)
}

// TagDelete mocks base method
func (m *MockLocalRepo) TagDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagDelete indicates an expected call of TagDelete
func (mr *MockLocalRepoMockRecorder) TagDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockLocalRepo)(nil).TagDelete), arg0)
}

// TagObject mocks base method
func (m *MockLocalRepo) TagObject(arg0 plumbing.Hash) (*object.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagObject", arg0)
	ret0, _ := ret[0].(*object.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagObject indicates an expected call of TagObject
func (mr *MockLocalRepoMockRecorder) TagObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagObject", reflect.TypeOf((*MockLocalRepo)(nil).TagObject), arg0)
}

// Tags mocks base method
func (m *MockLocalRepo) Tags() (storer.ReferenceIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].(storer.ReferenceIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tags indicates an expected call of Tags
func (mr *MockLocalRepoMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockLocalRepo)(nil).Tags))
}

// UpdateRepoConfig mocks base method
func (m *MockLocalRepo) UpdateRepoConfig(arg0 *types.LocalConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoConfig indicates an expected call of UpdateRepoConfig
func (mr *MockLocalRepoMockRecorder) UpdateRepoConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoConfig", reflect.TypeOf((*MockLocalRepo)(nil).UpdateRepoConfig), arg0)
}

// Var mocks base method
func (m *MockLocalRepo) Var(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Var", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Var indicates an expected call of Var
func (mr *MockLocalRepoMockRecorder) Var(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Var", reflect.TypeOf((*MockLocalRepo)(nil).Var), arg0)
}

// WrappedCommitObject mocks base method
func (m *MockLocalRepo) WrappedCommitObject(arg0 plumbing.Hash) (types.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrappedCommitObject", arg0)
	ret0, _ := ret[0].(types.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WrappedCommitObject indicates an expected call of WrappedCommitObject
func (mr *MockLocalRepoMockRecorder) WrappedCommitObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrappedCommitObject", reflect.TypeOf((*MockLocalRepo)(nil).WrappedCommitObject), arg0)
}

// MockCommit is a mock of Commit interface
type MockCommit struct {
	ctrl     *gomock.Controller
	recorder *MockCommitMockRecorder
}

// MockCommitMockRecorder is the mock recorder for MockCommit
type MockCommitMockRecorder struct {
	mock *MockCommit
}

// NewMockCommit creates a new mock instance
func NewMockCommit(ctrl *gomock.Controller) *MockCommit {
	mock := &MockCommit{ctrl: ctrl}
	mock.recorder = &MockCommitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommit) EXPECT() *MockCommitMockRecorder {
	return m.recorder
}

// Decode mocks base method
func (m *MockCommit) Decode(arg0 plumbing.EncodedObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockCommitMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCommit)(nil).Decode), arg0)
}

// Encode mocks base method
func (m *MockCommit) Encode(arg0 plumbing.EncodedObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode
func (mr *MockCommitMockRecorder) Encode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockCommit)(nil).Encode), arg0)
}

// File mocks base method
func (m *MockCommit) File(arg0 string) (*object.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "File", arg0)
	ret0, _ := ret[0].(*object.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// File indicates an expected call of File
func (mr *MockCommitMockRecorder) File(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "File", reflect.TypeOf((*MockCommit)(nil).File), arg0)
}

// GetAuthor mocks base method
func (m *MockCommit) GetAuthor() *object.Signature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor")
	ret0, _ := ret[0].(*object.Signature)
	return ret0
}

// GetAuthor indicates an expected call of GetAuthor
func (mr *MockCommitMockRecorder) GetAuthor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockCommit)(nil).GetAuthor))
}

// GetCommitter mocks base method
func (m *MockCommit) GetCommitter() *object.Signature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitter")
	ret0, _ := ret[0].(*object.Signature)
	return ret0
}

// GetCommitter indicates an expected call of GetCommitter
func (mr *MockCommitMockRecorder) GetCommitter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitter", reflect.TypeOf((*MockCommit)(nil).GetCommitter))
}

// GetHash mocks base method
func (m *MockCommit) GetHash() plumbing.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(plumbing.Hash)
	return ret0
}

// GetHash indicates an expected call of GetHash
func (mr *MockCommitMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockCommit)(nil).GetHash))
}

// GetTreeHash mocks base method
func (m *MockCommit) GetTreeHash() plumbing.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreeHash")
	ret0, _ := ret[0].(plumbing.Hash)
	return ret0
}

// GetTreeHash indicates an expected call of GetTreeHash
func (mr *MockCommitMockRecorder) GetTreeHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeHash", reflect.TypeOf((*MockCommit)(nil).GetTreeHash))
}

// ID mocks base method
func (m *MockCommit) ID() plumbing.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(plumbing.Hash)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockCommitMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCommit)(nil).ID))
}

// IsParent mocks base method
func (m *MockCommit) IsParent(arg0 string) (bool, types.Commit) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsParent", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(types.Commit)
	return ret0, ret1
}

// IsParent indicates an expected call of IsParent
func (mr *MockCommitMockRecorder) IsParent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsParent", reflect.TypeOf((*MockCommit)(nil).IsParent), arg0)
}

// NumParents mocks base method
func (m *MockCommit) NumParents() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumParents")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumParents indicates an expected call of NumParents
func (mr *MockCommitMockRecorder) NumParents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumParents", reflect.TypeOf((*MockCommit)(nil).NumParents))
}

// Parent mocks base method
func (m *MockCommit) Parent(arg0 int) (types.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent", arg0)
	ret0, _ := ret[0].(types.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parent indicates an expected call of Parent
func (mr *MockCommitMockRecorder) Parent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockCommit)(nil).Parent), arg0)
}

// Tree mocks base method
func (m *MockCommit) Tree() (*object.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tree")
	ret0, _ := ret[0].(*object.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tree indicates an expected call of Tree
func (mr *MockCommitMockRecorder) Tree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tree", reflect.TypeOf((*MockCommit)(nil).Tree))
}

// Type mocks base method
func (m *MockCommit) Type() plumbing.ObjectType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(plumbing.ObjectType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockCommitMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCommit)(nil).Type))
}

// UnWrap mocks base method
func (m *MockCommit) UnWrap() *object.Commit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnWrap")
	ret0, _ := ret[0].(*object.Commit)
	return ret0
}

// UnWrap indicates an expected call of UnWrap
func (mr *MockCommitMockRecorder) UnWrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnWrap", reflect.TypeOf((*MockCommit)(nil).UnWrap))
}
