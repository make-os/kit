// Code generated by MockGen. DO NOT EDIT.
// Source: modules/types/modules.go

// Package mocks is a generated GoMock package.
package mocks

import (
	prompt "github.com/c-bata/go-prompt"
	gomock "github.com/golang/mock/gomock"
	otto "github.com/robertkrimen/otto"
	types "gitlab.com/makeos/lobe/modules/types"
	util "gitlab.com/makeos/lobe/util"
	reflect "reflect"
)

// MockModulesHub is a mock of ModulesHub interface
type MockModulesHub struct {
	ctrl     *gomock.Controller
	recorder *MockModulesHubMockRecorder
}

// MockModulesHubMockRecorder is the mock recorder for MockModulesHub
type MockModulesHubMockRecorder struct {
	mock *MockModulesHub
}

// NewMockModulesHub creates a new mock instance
func NewMockModulesHub(ctrl *gomock.Controller) *MockModulesHub {
	mock := &MockModulesHub{ctrl: ctrl}
	mock.recorder = &MockModulesHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModulesHub) EXPECT() *MockModulesHubMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockModulesHub) ConfigureVM(vm *otto.Otto) []prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].([]prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockModulesHubMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockModulesHub)(nil).ConfigureVM), vm)
}

// GetModules mocks base method
func (m *MockModulesHub) GetModules() *types.Modules {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModules")
	ret0, _ := ret[0].(*types.Modules)
	return ret0
}

// GetModules indicates an expected call of GetModules
func (mr *MockModulesHubMockRecorder) GetModules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModules", reflect.TypeOf((*MockModulesHub)(nil).GetModules))
}

// MockModule is a mock of Module interface
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockModule)(nil).ConfigureVM), vm)
}

// MockChainModule is a mock of ChainModule interface
type MockChainModule struct {
	ctrl     *gomock.Controller
	recorder *MockChainModuleMockRecorder
}

// MockChainModuleMockRecorder is the mock recorder for MockChainModule
type MockChainModuleMockRecorder struct {
	mock *MockChainModule
}

// NewMockChainModule creates a new mock instance
func NewMockChainModule(ctrl *gomock.Controller) *MockChainModule {
	mock := &MockChainModule{ctrl: ctrl}
	mock.recorder = &MockChainModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainModule) EXPECT() *MockChainModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockChainModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockChainModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockChainModule)(nil).ConfigureVM), vm)
}

// GetBlock mocks base method
func (m *MockChainModule) GetBlock(height string) util.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", height)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockChainModuleMockRecorder) GetBlock(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockChainModule)(nil).GetBlock), height)
}

// GetCurrentHeight mocks base method
func (m *MockChainModule) GetCurrentHeight() util.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentHeight")
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// GetCurrentHeight indicates an expected call of GetCurrentHeight
func (mr *MockChainModuleMockRecorder) GetCurrentHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentHeight", reflect.TypeOf((*MockChainModule)(nil).GetCurrentHeight))
}

// GetBlockInfo mocks base method
func (m *MockChainModule) GetBlockInfo(height string) util.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockInfo", height)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// GetBlockInfo indicates an expected call of GetBlockInfo
func (mr *MockChainModuleMockRecorder) GetBlockInfo(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockInfo", reflect.TypeOf((*MockChainModule)(nil).GetBlockInfo), height)
}

// GetValidators mocks base method
func (m *MockChainModule) GetValidators(height string) []util.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators", height)
	ret0, _ := ret[0].([]util.Map)
	return ret0
}

// GetValidators indicates an expected call of GetValidators
func (mr *MockChainModuleMockRecorder) GetValidators(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockChainModule)(nil).GetValidators), height)
}

// MockTxModule is a mock of TxModule interface
type MockTxModule struct {
	ctrl     *gomock.Controller
	recorder *MockTxModuleMockRecorder
}

// MockTxModuleMockRecorder is the mock recorder for MockTxModule
type MockTxModuleMockRecorder struct {
	mock *MockTxModule
}

// NewMockTxModule creates a new mock instance
func NewMockTxModule(ctrl *gomock.Controller) *MockTxModule {
	mock := &MockTxModule{ctrl: ctrl}
	mock.recorder = &MockTxModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxModule) EXPECT() *MockTxModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockTxModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockTxModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockTxModule)(nil).ConfigureVM), vm)
}

// Get mocks base method
func (m *MockTxModule) Get(hash string) util.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", hash)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockTxModuleMockRecorder) Get(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTxModule)(nil).Get), hash)
}

// SendPayload mocks base method
func (m *MockTxModule) SendPayload(params map[string]interface{}) util.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPayload", params)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// SendPayload indicates an expected call of SendPayload
func (mr *MockTxModuleMockRecorder) SendPayload(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPayload", reflect.TypeOf((*MockTxModule)(nil).SendPayload), params)
}

// MockPoolModule is a mock of PoolModule interface
type MockPoolModule struct {
	ctrl     *gomock.Controller
	recorder *MockPoolModuleMockRecorder
}

// MockPoolModuleMockRecorder is the mock recorder for MockPoolModule
type MockPoolModuleMockRecorder struct {
	mock *MockPoolModule
}

// NewMockPoolModule creates a new mock instance
func NewMockPoolModule(ctrl *gomock.Controller) *MockPoolModule {
	mock := &MockPoolModule{ctrl: ctrl}
	mock.recorder = &MockPoolModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoolModule) EXPECT() *MockPoolModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockPoolModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockPoolModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockPoolModule)(nil).ConfigureVM), vm)
}

// GetSize mocks base method
func (m *MockPoolModule) GetSize() util.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// GetSize indicates an expected call of GetSize
func (mr *MockPoolModuleMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockPoolModule)(nil).GetSize))
}

// GetTop mocks base method
func (m *MockPoolModule) GetTop(n int) []util.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTop", n)
	ret0, _ := ret[0].([]util.Map)
	return ret0
}

// GetTop indicates an expected call of GetTop
func (mr *MockPoolModuleMockRecorder) GetTop(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTop", reflect.TypeOf((*MockPoolModule)(nil).GetTop), n)
}

// GetPushPoolSize mocks base method
func (m *MockPoolModule) GetPushPoolSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushPoolSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPushPoolSize indicates an expected call of GetPushPoolSize
func (mr *MockPoolModuleMockRecorder) GetPushPoolSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushPoolSize", reflect.TypeOf((*MockPoolModule)(nil).GetPushPoolSize))
}

// MockUserModule is a mock of UserModule interface
type MockUserModule struct {
	ctrl     *gomock.Controller
	recorder *MockUserModuleMockRecorder
}

// MockUserModuleMockRecorder is the mock recorder for MockUserModule
type MockUserModuleMockRecorder struct {
	mock *MockUserModule
}

// NewMockUserModule creates a new mock instance
func NewMockUserModule(ctrl *gomock.Controller) *MockUserModule {
	mock := &MockUserModule{ctrl: ctrl}
	mock.recorder = &MockUserModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserModule) EXPECT() *MockUserModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockUserModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockUserModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockUserModule)(nil).ConfigureVM), vm)
}

// ListLocalAccounts mocks base method
func (m *MockUserModule) ListLocalAccounts() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocalAccounts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListLocalAccounts indicates an expected call of ListLocalAccounts
func (mr *MockUserModuleMockRecorder) ListLocalAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocalAccounts", reflect.TypeOf((*MockUserModule)(nil).ListLocalAccounts))
}

// GetKey mocks base method
func (m *MockUserModule) GetKey(address string, passphrase ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range passphrase {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKey", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKey indicates an expected call of GetKey
func (mr *MockUserModuleMockRecorder) GetKey(address interface{}, passphrase ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, passphrase...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockUserModule)(nil).GetKey), varargs...)
}

// GetPublicKey mocks base method
func (m *MockUserModule) GetPublicKey(address string, passphrase ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range passphrase {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKey", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockUserModuleMockRecorder) GetPublicKey(address interface{}, passphrase ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, passphrase...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockUserModule)(nil).GetPublicKey), varargs...)
}

// GetNonce mocks base method
func (m *MockUserModule) GetNonce(address string, height ...uint64) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range height {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNonce", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNonce indicates an expected call of GetNonce
func (mr *MockUserModuleMockRecorder) GetNonce(address interface{}, height ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, height...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockUserModule)(nil).GetNonce), varargs...)
}

// GetAccount mocks base method
func (m *MockUserModule) GetAccount(address string, height ...uint64) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range height {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockUserModuleMockRecorder) GetAccount(address interface{}, height ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, height...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockUserModule)(nil).GetAccount), varargs...)
}

// GetAvailableBalance mocks base method
func (m *MockUserModule) GetAvailableBalance(address string, height ...uint64) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range height {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvailableBalance", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAvailableBalance indicates an expected call of GetAvailableBalance
func (mr *MockUserModuleMockRecorder) GetAvailableBalance(address interface{}, height ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, height...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableBalance", reflect.TypeOf((*MockUserModule)(nil).GetAvailableBalance), varargs...)
}

// GetStakedBalance mocks base method
func (m *MockUserModule) GetStakedBalance(address string, height ...uint64) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range height {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStakedBalance", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStakedBalance indicates an expected call of GetStakedBalance
func (mr *MockUserModuleMockRecorder) GetStakedBalance(address interface{}, height ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, height...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakedBalance", reflect.TypeOf((*MockUserModule)(nil).GetStakedBalance), varargs...)
}

// GetValidatorInfo mocks base method
func (m *MockUserModule) GetValidatorInfo(includePrivKey ...bool) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range includePrivKey {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValidatorInfo", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// GetValidatorInfo indicates an expected call of GetValidatorInfo
func (mr *MockUserModuleMockRecorder) GetValidatorInfo(includePrivKey ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorInfo", reflect.TypeOf((*MockUserModule)(nil).GetValidatorInfo), includePrivKey...)
}

// SetCommission mocks base method
func (m *MockUserModule) SetCommission(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCommission", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// SetCommission indicates an expected call of SetCommission
func (mr *MockUserModuleMockRecorder) SetCommission(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommission", reflect.TypeOf((*MockUserModule)(nil).SetCommission), varargs...)
}

// SendCoin mocks base method
func (m *MockUserModule) SendCoin(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendCoin", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// SendCoin indicates an expected call of SendCoin
func (mr *MockUserModuleMockRecorder) SendCoin(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockUserModule)(nil).SendCoin), varargs...)
}

// MockPushKeyModule is a mock of PushKeyModule interface
type MockPushKeyModule struct {
	ctrl     *gomock.Controller
	recorder *MockPushKeyModuleMockRecorder
}

// MockPushKeyModuleMockRecorder is the mock recorder for MockPushKeyModule
type MockPushKeyModuleMockRecorder struct {
	mock *MockPushKeyModule
}

// NewMockPushKeyModule creates a new mock instance
func NewMockPushKeyModule(ctrl *gomock.Controller) *MockPushKeyModule {
	mock := &MockPushKeyModule{ctrl: ctrl}
	mock.recorder = &MockPushKeyModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushKeyModule) EXPECT() *MockPushKeyModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockPushKeyModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockPushKeyModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockPushKeyModule)(nil).ConfigureVM), vm)
}

// Register mocks base method
func (m *MockPushKeyModule) Register(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockPushKeyModuleMockRecorder) Register(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPushKeyModule)(nil).Register), varargs...)
}

// Get mocks base method
func (m *MockPushKeyModule) Get(id string, blockHeight ...uint64) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockPushKeyModuleMockRecorder) Get(id interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPushKeyModule)(nil).Get), varargs...)
}

// Unregister mocks base method
func (m *MockPushKeyModule) Unregister(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unregister", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Unregister indicates an expected call of Unregister
func (mr *MockPushKeyModuleMockRecorder) Unregister(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockPushKeyModule)(nil).Unregister), varargs...)
}

// GetByAddress mocks base method
func (m *MockPushKeyModule) GetByAddress(address string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", address)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetByAddress indicates an expected call of GetByAddress
func (mr *MockPushKeyModuleMockRecorder) GetByAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockPushKeyModule)(nil).GetByAddress), address)
}

// GetAccountOfOwner mocks base method
func (m *MockPushKeyModule) GetAccountOfOwner(gpgID string, blockHeight ...uint64) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{gpgID}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountOfOwner", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// GetAccountOfOwner indicates an expected call of GetAccountOfOwner
func (mr *MockPushKeyModuleMockRecorder) GetAccountOfOwner(gpgID interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{gpgID}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountOfOwner", reflect.TypeOf((*MockPushKeyModule)(nil).GetAccountOfOwner), varargs...)
}

// MockConsoleUtilModule is a mock of ConsoleUtilModule interface
type MockConsoleUtilModule struct {
	ctrl     *gomock.Controller
	recorder *MockConsoleUtilModuleMockRecorder
}

// MockConsoleUtilModuleMockRecorder is the mock recorder for MockConsoleUtilModule
type MockConsoleUtilModuleMockRecorder struct {
	mock *MockConsoleUtilModule
}

// NewMockConsoleUtilModule creates a new mock instance
func NewMockConsoleUtilModule(ctrl *gomock.Controller) *MockConsoleUtilModule {
	mock := &MockConsoleUtilModule{ctrl: ctrl}
	mock.recorder = &MockConsoleUtilModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsoleUtilModule) EXPECT() *MockConsoleUtilModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockConsoleUtilModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockConsoleUtilModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockConsoleUtilModule)(nil).ConfigureVM), vm)
}

// PrettyPrint mocks base method
func (m *MockConsoleUtilModule) PrettyPrint(values ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PrettyPrint", varargs...)
}

// PrettyPrint indicates an expected call of PrettyPrint
func (mr *MockConsoleUtilModuleMockRecorder) PrettyPrint(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrettyPrint", reflect.TypeOf((*MockConsoleUtilModule)(nil).PrettyPrint), values...)
}

// Dump mocks base method
func (m *MockConsoleUtilModule) Dump(objs ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range objs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Dump", varargs...)
}

// Dump indicates an expected call of Dump
func (mr *MockConsoleUtilModuleMockRecorder) Dump(objs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockConsoleUtilModule)(nil).Dump), objs...)
}

// Diff mocks base method
func (m *MockConsoleUtilModule) Diff(a, b interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Diff", a, b)
}

// Diff indicates an expected call of Diff
func (mr *MockConsoleUtilModuleMockRecorder) Diff(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diff", reflect.TypeOf((*MockConsoleUtilModule)(nil).Diff), a, b)
}

// Eval mocks base method
func (m *MockConsoleUtilModule) Eval(src interface{}) otto.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval", src)
	ret0, _ := ret[0].(otto.Value)
	return ret0
}

// Eval indicates an expected call of Eval
func (mr *MockConsoleUtilModuleMockRecorder) Eval(src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockConsoleUtilModule)(nil).Eval), src)
}

// EvalFile mocks base method
func (m *MockConsoleUtilModule) EvalFile(file string) otto.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalFile", file)
	ret0, _ := ret[0].(otto.Value)
	return ret0
}

// EvalFile indicates an expected call of EvalFile
func (mr *MockConsoleUtilModuleMockRecorder) EvalFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalFile", reflect.TypeOf((*MockConsoleUtilModule)(nil).EvalFile), file)
}

// ReadFile mocks base method
func (m *MockConsoleUtilModule) ReadFile(filename string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockConsoleUtilModuleMockRecorder) ReadFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockConsoleUtilModule)(nil).ReadFile), filename)
}

// ReadTextFile mocks base method
func (m *MockConsoleUtilModule) ReadTextFile(filename string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTextFile", filename)
	ret0, _ := ret[0].(string)
	return ret0
}

// ReadTextFile indicates an expected call of ReadTextFile
func (mr *MockConsoleUtilModuleMockRecorder) ReadTextFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTextFile", reflect.TypeOf((*MockConsoleUtilModule)(nil).ReadTextFile), filename)
}

// TreasuryAddress mocks base method
func (m *MockConsoleUtilModule) TreasuryAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TreasuryAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// TreasuryAddress indicates an expected call of TreasuryAddress
func (mr *MockConsoleUtilModuleMockRecorder) TreasuryAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TreasuryAddress", reflect.TypeOf((*MockConsoleUtilModule)(nil).TreasuryAddress))
}

// GenKey mocks base method
func (m *MockConsoleUtilModule) GenKey(seed ...int64) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range seed {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenKey", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// GenKey indicates an expected call of GenKey
func (mr *MockConsoleUtilModuleMockRecorder) GenKey(seed ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenKey", reflect.TypeOf((*MockConsoleUtilModule)(nil).GenKey), seed...)
}

// MockTicketModule is a mock of TicketModule interface
type MockTicketModule struct {
	ctrl     *gomock.Controller
	recorder *MockTicketModuleMockRecorder
}

// MockTicketModuleMockRecorder is the mock recorder for MockTicketModule
type MockTicketModuleMockRecorder struct {
	mock *MockTicketModule
}

// NewMockTicketModule creates a new mock instance
func NewMockTicketModule(ctrl *gomock.Controller) *MockTicketModule {
	mock := &MockTicketModule{ctrl: ctrl}
	mock.recorder = &MockTicketModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTicketModule) EXPECT() *MockTicketModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockTicketModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockTicketModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockTicketModule)(nil).ConfigureVM), vm)
}

// BuyValidatorTicket mocks base method
func (m *MockTicketModule) BuyValidatorTicket(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuyValidatorTicket", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// BuyValidatorTicket indicates an expected call of BuyValidatorTicket
func (mr *MockTicketModuleMockRecorder) BuyValidatorTicket(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyValidatorTicket", reflect.TypeOf((*MockTicketModule)(nil).BuyValidatorTicket), varargs...)
}

// BuyHostTicket mocks base method
func (m *MockTicketModule) BuyHostTicket(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuyHostTicket", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// BuyHostTicket indicates an expected call of BuyHostTicket
func (mr *MockTicketModuleMockRecorder) BuyHostTicket(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyHostTicket", reflect.TypeOf((*MockTicketModule)(nil).BuyHostTicket), varargs...)
}

// ListValidatorTicketsByProposer mocks base method
func (m *MockTicketModule) ListValidatorTicketsByProposer(proposerPubKey string, queryOpts ...map[string]interface{}) []util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{proposerPubKey}
	for _, a := range queryOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListValidatorTicketsByProposer", varargs...)
	ret0, _ := ret[0].([]util.Map)
	return ret0
}

// ListValidatorTicketsByProposer indicates an expected call of ListValidatorTicketsByProposer
func (mr *MockTicketModuleMockRecorder) ListValidatorTicketsByProposer(proposerPubKey interface{}, queryOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{proposerPubKey}, queryOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListValidatorTicketsByProposer", reflect.TypeOf((*MockTicketModule)(nil).ListValidatorTicketsByProposer), varargs...)
}

// ListHostTicketsByProposer mocks base method
func (m *MockTicketModule) ListHostTicketsByProposer(proposerPubKey string, queryOpts ...map[string]interface{}) []util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{proposerPubKey}
	for _, a := range queryOpts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostTicketsByProposer", varargs...)
	ret0, _ := ret[0].([]util.Map)
	return ret0
}

// ListHostTicketsByProposer indicates an expected call of ListHostTicketsByProposer
func (mr *MockTicketModuleMockRecorder) ListHostTicketsByProposer(proposerPubKey interface{}, queryOpts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{proposerPubKey}, queryOpts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostTicketsByProposer", reflect.TypeOf((*MockTicketModule)(nil).ListHostTicketsByProposer), varargs...)
}

// ListTopValidators mocks base method
func (m *MockTicketModule) ListTopValidators(limit ...int) []util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range limit {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopValidators", varargs...)
	ret0, _ := ret[0].([]util.Map)
	return ret0
}

// ListTopValidators indicates an expected call of ListTopValidators
func (mr *MockTicketModuleMockRecorder) ListTopValidators(limit ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopValidators", reflect.TypeOf((*MockTicketModule)(nil).ListTopValidators), limit...)
}

// ListTopHosts mocks base method
func (m *MockTicketModule) ListTopHosts(limit ...int) []util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range limit {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopHosts", varargs...)
	ret0, _ := ret[0].([]util.Map)
	return ret0
}

// ListTopHosts indicates an expected call of ListTopHosts
func (mr *MockTicketModuleMockRecorder) ListTopHosts(limit ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopHosts", reflect.TypeOf((*MockTicketModule)(nil).ListTopHosts), limit...)
}

// TicketStats mocks base method
func (m *MockTicketModule) TicketStats(proposerPubKey ...string) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range proposerPubKey {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TicketStats", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// TicketStats indicates an expected call of TicketStats
func (mr *MockTicketModuleMockRecorder) TicketStats(proposerPubKey ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TicketStats", reflect.TypeOf((*MockTicketModule)(nil).TicketStats), proposerPubKey...)
}

// ListRecent mocks base method
func (m *MockTicketModule) ListRecent(limit ...int) []util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range limit {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecent", varargs...)
	ret0, _ := ret[0].([]util.Map)
	return ret0
}

// ListRecent indicates an expected call of ListRecent
func (mr *MockTicketModuleMockRecorder) ListRecent(limit ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecent", reflect.TypeOf((*MockTicketModule)(nil).ListRecent), limit...)
}

// UnbondHostTicket mocks base method
func (m *MockTicketModule) UnbondHostTicket(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnbondHostTicket", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// UnbondHostTicket indicates an expected call of UnbondHostTicket
func (mr *MockTicketModuleMockRecorder) UnbondHostTicket(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbondHostTicket", reflect.TypeOf((*MockTicketModule)(nil).UnbondHostTicket), varargs...)
}

// MockRepoModule is a mock of RepoModule interface
type MockRepoModule struct {
	ctrl     *gomock.Controller
	recorder *MockRepoModuleMockRecorder
}

// MockRepoModuleMockRecorder is the mock recorder for MockRepoModule
type MockRepoModuleMockRecorder struct {
	mock *MockRepoModule
}

// NewMockRepoModule creates a new mock instance
func NewMockRepoModule(ctrl *gomock.Controller) *MockRepoModule {
	mock := &MockRepoModule{ctrl: ctrl}
	mock.recorder = &MockRepoModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoModule) EXPECT() *MockRepoModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockRepoModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockRepoModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockRepoModule)(nil).ConfigureVM), vm)
}

// Create mocks base method
func (m *MockRepoModule) Create(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRepoModuleMockRecorder) Create(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepoModule)(nil).Create), varargs...)
}

// UpsertOwner mocks base method
func (m *MockRepoModule) UpsertOwner(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertOwner", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// UpsertOwner indicates an expected call of UpsertOwner
func (mr *MockRepoModuleMockRecorder) UpsertOwner(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOwner", reflect.TypeOf((*MockRepoModule)(nil).UpsertOwner), varargs...)
}

// Vote mocks base method
func (m *MockRepoModule) Vote(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Vote", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Vote indicates an expected call of Vote
func (mr *MockRepoModuleMockRecorder) Vote(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockRepoModule)(nil).Vote), varargs...)
}

// Prune mocks base method
func (m *MockRepoModule) Prune(name string, force bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Prune", name, force)
}

// Prune indicates an expected call of Prune
func (mr *MockRepoModuleMockRecorder) Prune(name, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockRepoModule)(nil).Prune), name, force)
}

// Get mocks base method
func (m *MockRepoModule) Get(name string, opts ...types.GetOptions) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockRepoModuleMockRecorder) Get(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepoModule)(nil).Get), varargs...)
}

// Update mocks base method
func (m *MockRepoModule) Update(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepoModuleMockRecorder) Update(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepoModule)(nil).Update), varargs...)
}

// DepositProposalFee mocks base method
func (m *MockRepoModule) DepositProposalFee(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DepositProposalFee", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// DepositProposalFee indicates an expected call of DepositProposalFee
func (mr *MockRepoModuleMockRecorder) DepositProposalFee(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositProposalFee", reflect.TypeOf((*MockRepoModule)(nil).DepositProposalFee), varargs...)
}

// AddContributor mocks base method
func (m *MockRepoModule) AddContributor(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddContributor", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// AddContributor indicates an expected call of AddContributor
func (mr *MockRepoModuleMockRecorder) AddContributor(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContributor", reflect.TypeOf((*MockRepoModule)(nil).AddContributor), varargs...)
}

// MockNamespaceModule is a mock of NamespaceModule interface
type MockNamespaceModule struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceModuleMockRecorder
}

// MockNamespaceModuleMockRecorder is the mock recorder for MockNamespaceModule
type MockNamespaceModuleMockRecorder struct {
	mock *MockNamespaceModule
}

// NewMockNamespaceModule creates a new mock instance
func NewMockNamespaceModule(ctrl *gomock.Controller) *MockNamespaceModule {
	mock := &MockNamespaceModule{ctrl: ctrl}
	mock.recorder = &MockNamespaceModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceModule) EXPECT() *MockNamespaceModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockNamespaceModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockNamespaceModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockNamespaceModule)(nil).ConfigureVM), vm)
}

// Lookup mocks base method
func (m *MockNamespaceModule) Lookup(name string, height ...uint64) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range height {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lookup", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Lookup indicates an expected call of Lookup
func (mr *MockNamespaceModuleMockRecorder) Lookup(name interface{}, height ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, height...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockNamespaceModule)(nil).Lookup), varargs...)
}

// GetTarget mocks base method
func (m *MockNamespaceModule) GetTarget(path string, height ...uint64) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range height {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTarget", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTarget indicates an expected call of GetTarget
func (mr *MockNamespaceModuleMockRecorder) GetTarget(path interface{}, height ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, height...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTarget", reflect.TypeOf((*MockNamespaceModule)(nil).GetTarget), varargs...)
}

// Register mocks base method
func (m *MockNamespaceModule) Register(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockNamespaceModuleMockRecorder) Register(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockNamespaceModule)(nil).Register), varargs...)
}

// UpdateDomain mocks base method
func (m *MockNamespaceModule) UpdateDomain(params map[string]interface{}, options ...interface{}) util.Map {
	m.ctrl.T.Helper()
	varargs := []interface{}{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDomain", varargs...)
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// UpdateDomain indicates an expected call of UpdateDomain
func (mr *MockNamespaceModuleMockRecorder) UpdateDomain(params interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDomain", reflect.TypeOf((*MockNamespaceModule)(nil).UpdateDomain), varargs...)
}

// MockDHTModule is a mock of DHTModule interface
type MockDHTModule struct {
	ctrl     *gomock.Controller
	recorder *MockDHTModuleMockRecorder
}

// MockDHTModuleMockRecorder is the mock recorder for MockDHTModule
type MockDHTModuleMockRecorder struct {
	mock *MockDHTModule
}

// NewMockDHTModule creates a new mock instance
func NewMockDHTModule(ctrl *gomock.Controller) *MockDHTModule {
	mock := &MockDHTModule{ctrl: ctrl}
	mock.recorder = &MockDHTModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDHTModule) EXPECT() *MockDHTModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockDHTModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockDHTModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockDHTModule)(nil).ConfigureVM), vm)
}

// Store mocks base method
func (m *MockDHTModule) Store(key, val string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", key, val)
}

// Store indicates an expected call of Store
func (mr *MockDHTModuleMockRecorder) Store(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockDHTModule)(nil).Store), key, val)
}

// Lookup mocks base method
func (m *MockDHTModule) Lookup(key string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", key)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Lookup indicates an expected call of Lookup
func (mr *MockDHTModuleMockRecorder) Lookup(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockDHTModule)(nil).Lookup), key)
}

// Announce mocks base method
func (m *MockDHTModule) Announce(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Announce", key)
}

// Announce indicates an expected call of Announce
func (mr *MockDHTModuleMockRecorder) Announce(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Announce", reflect.TypeOf((*MockDHTModule)(nil).Announce), key)
}

// GetRepoObjectProviders mocks base method
func (m *MockDHTModule) GetRepoObjectProviders(key string) []map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoObjectProviders", key)
	ret0, _ := ret[0].([]map[string]interface{})
	return ret0
}

// GetRepoObjectProviders indicates an expected call of GetRepoObjectProviders
func (mr *MockDHTModuleMockRecorder) GetRepoObjectProviders(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoObjectProviders", reflect.TypeOf((*MockDHTModule)(nil).GetRepoObjectProviders), key)
}

// GetProviders mocks base method
func (m *MockDHTModule) GetProviders(key string) []map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviders", key)
	ret0, _ := ret[0].([]map[string]interface{})
	return ret0
}

// GetProviders indicates an expected call of GetProviders
func (mr *MockDHTModuleMockRecorder) GetProviders(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviders", reflect.TypeOf((*MockDHTModule)(nil).GetProviders), key)
}

// GetPeers mocks base method
func (m *MockDHTModule) GetPeers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPeers indicates an expected call of GetPeers
func (mr *MockDHTModuleMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockDHTModule)(nil).GetPeers))
}

// MockExtManager is a mock of ExtManager interface
type MockExtManager struct {
	ctrl     *gomock.Controller
	recorder *MockExtManagerMockRecorder
}

// MockExtManagerMockRecorder is the mock recorder for MockExtManager
type MockExtManagerMockRecorder struct {
	mock *MockExtManager
}

// NewMockExtManager creates a new mock instance
func NewMockExtManager(ctrl *gomock.Controller) *MockExtManager {
	mock := &MockExtManager{ctrl: ctrl}
	mock.recorder = &MockExtManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtManager) EXPECT() *MockExtManagerMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockExtManager) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockExtManagerMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockExtManager)(nil).ConfigureVM), vm)
}

// Exist mocks base method
func (m *MockExtManager) Exist(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist
func (mr *MockExtManagerMockRecorder) Exist(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockExtManager)(nil).Exist), name)
}

// Installed mocks base method
func (m *MockExtManager) Installed() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Installed")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Installed indicates an expected call of Installed
func (mr *MockExtManagerMockRecorder) Installed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Installed", reflect.TypeOf((*MockExtManager)(nil).Installed))
}

// Load mocks base method
func (m *MockExtManager) Load(name string, args ...map[string]string) map[string]interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Load", varargs...)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockExtManagerMockRecorder) Load(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockExtManager)(nil).Load), varargs...)
}

// Run mocks base method
func (m *MockExtManager) Run(name string, args ...map[string]string) map[string]interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockExtManagerMockRecorder) Run(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExtManager)(nil).Run), varargs...)
}

// Stop mocks base method
func (m *MockExtManager) Stop(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", name)
}

// Stop indicates an expected call of Stop
func (mr *MockExtManagerMockRecorder) Stop(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockExtManager)(nil).Stop), name)
}

// Running mocks base method
func (m *MockExtManager) Running() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Running")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Running indicates an expected call of Running
func (mr *MockExtManagerMockRecorder) Running() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Running", reflect.TypeOf((*MockExtManager)(nil).Running))
}

// IsRunning mocks base method
func (m *MockExtManager) IsRunning(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockExtManagerMockRecorder) IsRunning(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockExtManager)(nil).IsRunning), name)
}

// MockRPCModule is a mock of RPCModule interface
type MockRPCModule struct {
	ctrl     *gomock.Controller
	recorder *MockRPCModuleMockRecorder
}

// MockRPCModuleMockRecorder is the mock recorder for MockRPCModule
type MockRPCModuleMockRecorder struct {
	mock *MockRPCModule
}

// NewMockRPCModule creates a new mock instance
func NewMockRPCModule(ctrl *gomock.Controller) *MockRPCModule {
	mock := &MockRPCModule{ctrl: ctrl}
	mock.recorder = &MockRPCModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRPCModule) EXPECT() *MockRPCModuleMockRecorder {
	return m.recorder
}

// ConfigureVM mocks base method
func (m *MockRPCModule) ConfigureVM(vm *otto.Otto) prompt.Completer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureVM", vm)
	ret0, _ := ret[0].(prompt.Completer)
	return ret0
}

// ConfigureVM indicates an expected call of ConfigureVM
func (mr *MockRPCModuleMockRecorder) ConfigureVM(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVM", reflect.TypeOf((*MockRPCModule)(nil).ConfigureVM), vm)
}

// IsRunning mocks base method
func (m *MockRPCModule) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning
func (mr *MockRPCModuleMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockRPCModule)(nil).IsRunning))
}

// ConnectLocal mocks base method
func (m *MockRPCModule) ConnectLocal() util.Map {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectLocal")
	ret0, _ := ret[0].(util.Map)
	return ret0
}

// ConnectLocal indicates an expected call of ConnectLocal
func (mr *MockRPCModuleMockRecorder) ConnectLocal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectLocal", reflect.TypeOf((*MockRPCModule)(nil).ConnectLocal))
}
