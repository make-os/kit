// Code generated by MockGen. DO NOT EDIT.
// Source: dht/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p-core/peer"
	dht "gitlab.com/makeos/mosdef/dht"
	reflect "reflect"
)

// MockObjectFinder is a mock of ObjectFinder interface
type MockObjectFinder struct {
	ctrl     *gomock.Controller
	recorder *MockObjectFinderMockRecorder
}

// MockObjectFinderMockRecorder is the mock recorder for MockObjectFinder
type MockObjectFinderMockRecorder struct {
	mock *MockObjectFinder
}

// NewMockObjectFinder creates a new mock instance
func NewMockObjectFinder(ctrl *gomock.Controller) *MockObjectFinder {
	mock := &MockObjectFinder{ctrl: ctrl}
	mock.recorder = &MockObjectFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectFinder) EXPECT() *MockObjectFinderMockRecorder {
	return m.recorder
}

// FindObject mocks base method
func (m *MockObjectFinder) FindObject(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindObject", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindObject indicates an expected call of FindObject
func (mr *MockObjectFinderMockRecorder) FindObject(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindObject", reflect.TypeOf((*MockObjectFinder)(nil).FindObject), key)
}

// MockDHTNode is a mock of DHTNode interface
type MockDHTNode struct {
	ctrl     *gomock.Controller
	recorder *MockDHTNodeMockRecorder
}

// MockDHTNodeMockRecorder is the mock recorder for MockDHTNode
type MockDHTNodeMockRecorder struct {
	mock *MockDHTNode
}

// NewMockDHTNode creates a new mock instance
func NewMockDHTNode(ctrl *gomock.Controller) *MockDHTNode {
	mock := &MockDHTNode{ctrl: ctrl}
	mock.recorder = &MockDHTNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDHTNode) EXPECT() *MockDHTNodeMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockDHTNode) Store(ctx context.Context, key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockDHTNodeMockRecorder) Store(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockDHTNode)(nil).Store), ctx, key, value)
}

// Lookup mocks base method
func (m *MockDHTNode) Lookup(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup
func (mr *MockDHTNodeMockRecorder) Lookup(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockDHTNode)(nil).Lookup), ctx, key)
}

// GetProviders mocks base method
func (m *MockDHTNode) GetProviders(ctx context.Context, key []byte) ([]peer.AddrInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviders", ctx, key)
	ret0, _ := ret[0].([]peer.AddrInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviders indicates an expected call of GetProviders
func (mr *MockDHTNodeMockRecorder) GetProviders(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviders", reflect.TypeOf((*MockDHTNode)(nil).GetProviders), ctx, key)
}

// Announce mocks base method
func (m *MockDHTNode) Announce(ctx context.Context, key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Announce", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Announce indicates an expected call of Announce
func (mr *MockDHTNodeMockRecorder) Announce(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Announce", reflect.TypeOf((*MockDHTNode)(nil).Announce), ctx, key)
}

// GetObject mocks base method
func (m *MockDHTNode) GetObject(ctx context.Context, query *dht.DHTObjectQuery) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, query)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject
func (mr *MockDHTNodeMockRecorder) GetObject(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockDHTNode)(nil).GetObject), ctx, query)
}

// RegisterObjFinder mocks base method
func (m *MockDHTNode) RegisterObjFinder(objType string, finder dht.ObjectFinder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterObjFinder", objType, finder)
}

// RegisterObjFinder indicates an expected call of RegisterObjFinder
func (mr *MockDHTNodeMockRecorder) RegisterObjFinder(objType, finder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterObjFinder", reflect.TypeOf((*MockDHTNode)(nil).RegisterObjFinder), objType, finder)
}

// Start mocks base method
func (m *MockDHTNode) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockDHTNodeMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDHTNode)(nil).Start))
}

// Peers mocks base method
func (m *MockDHTNode) Peers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Peers indicates an expected call of Peers
func (mr *MockDHTNodeMockRecorder) Peers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockDHTNode)(nil).Peers))
}

// Close mocks base method
func (m *MockDHTNode) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDHTNodeMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDHTNode)(nil).Close))
}
