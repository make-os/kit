// Code generated by MockGen. DO NOT EDIT.
// Source: dht/commit_streamer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	network "github.com/libp2p/go-libp2p-core/network"
	dht "gitlab.com/makeos/mosdef/dht"
	io "gitlab.com/makeos/mosdef/util/io"
	object "gopkg.in/src-d/go-git.v4/plumbing/object"
	reflect "reflect"
)

// MockCommitStreamer is a mock of CommitStreamer interface
type MockCommitStreamer struct {
	ctrl     *gomock.Controller
	recorder *MockCommitStreamerMockRecorder
}

// MockCommitStreamerMockRecorder is the mock recorder for MockCommitStreamer
type MockCommitStreamerMockRecorder struct {
	mock *MockCommitStreamer
}

// NewMockCommitStreamer creates a new mock instance
func NewMockCommitStreamer(ctrl *gomock.Controller) *MockCommitStreamer {
	mock := &MockCommitStreamer{ctrl: ctrl}
	mock.recorder = &MockCommitStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitStreamer) EXPECT() *MockCommitStreamerMockRecorder {
	return m.recorder
}

// Announce mocks base method
func (m *MockCommitStreamer) Announce(ctx context.Context, hash []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Announce", ctx, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Announce indicates an expected call of Announce
func (mr *MockCommitStreamerMockRecorder) Announce(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Announce", reflect.TypeOf((*MockCommitStreamer)(nil).Announce), ctx, hash)
}

// Get mocks base method
func (m *MockCommitStreamer) Get(ctx context.Context, repoName string, hash []byte) (io.ReadSeekerCloser, *object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, repoName, hash)
	ret0, _ := ret[0].(io.ReadSeekerCloser)
	ret1, _ := ret[1].(*object.Commit)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockCommitStreamerMockRecorder) Get(ctx, repoName, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommitStreamer)(nil).Get), ctx, repoName, hash)
}

// GetAncestors mocks base method
func (m *MockCommitStreamer) GetAncestors(ctx context.Context, args dht.GetAncestorArgs) ([]io.ReadSeekerCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAncestors", ctx, args)
	ret0, _ := ret[0].([]io.ReadSeekerCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAncestors indicates an expected call of GetAncestors
func (mr *MockCommitStreamerMockRecorder) GetAncestors(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAncestors", reflect.TypeOf((*MockCommitStreamer)(nil).GetAncestors), ctx, args)
}

// Validate mocks base method
func (m *MockCommitStreamer) Validate(hash []byte, packfile io.ReadSeekerCloser) (*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", hash, packfile)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockCommitStreamerMockRecorder) Validate(hash, packfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCommitStreamer)(nil).Validate), hash, packfile)
}

// OnRequest mocks base method
func (m *MockCommitStreamer) OnRequest(s network.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRequest", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnRequest indicates an expected call of OnRequest
func (mr *MockCommitStreamerMockRecorder) OnRequest(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRequest", reflect.TypeOf((*MockCommitStreamer)(nil).OnRequest), s)
}
