// Code generated by MockGen. DO NOT EDIT.
// Source: dht/commit_requester.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	network "github.com/libp2p/go-libp2p-core/network"
	peer "github.com/libp2p/go-libp2p-core/peer"
	protocol "github.com/libp2p/go-libp2p-core/protocol"
	io "gitlab.com/makeos/mosdef/util/io"
	reflect "reflect"
)

// MockCommitRequester is a mock of CommitRequester interface
type MockCommitRequester struct {
	ctrl     *gomock.Controller
	recorder *MockCommitRequesterMockRecorder
}

// MockCommitRequesterMockRecorder is the mock recorder for MockCommitRequester
type MockCommitRequesterMockRecorder struct {
	mock *MockCommitRequester
}

// NewMockCommitRequester creates a new mock instance
func NewMockCommitRequester(ctrl *gomock.Controller) *MockCommitRequester {
	mock := &MockCommitRequester{ctrl: ctrl}
	mock.recorder = &MockCommitRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitRequester) EXPECT() *MockCommitRequesterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockCommitRequester) Write(ctx context.Context, prov peer.AddrInfo, pid protocol.ID, data []byte) (network.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, prov, pid, data)
	ret0, _ := ret[0].(network.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockCommitRequesterMockRecorder) Write(ctx, prov, pid, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCommitRequester)(nil).Write), ctx, prov, pid, data)
}

// WriteToStream mocks base method
func (m *MockCommitRequester) WriteToStream(str network.Stream, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToStream", str, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteToStream indicates an expected call of WriteToStream
func (mr *MockCommitRequesterMockRecorder) WriteToStream(str, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToStream", reflect.TypeOf((*MockCommitRequester)(nil).WriteToStream), str, data)
}

// DoWant mocks base method
func (m *MockCommitRequester) DoWant(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoWant", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoWant indicates an expected call of DoWant
func (mr *MockCommitRequesterMockRecorder) DoWant(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWant", reflect.TypeOf((*MockCommitRequester)(nil).DoWant), ctx)
}

// Do mocks base method
func (m *MockCommitRequester) Do(ctx context.Context) (io.ReadSeekerCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx)
	ret0, _ := ret[0].(io.ReadSeekerCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockCommitRequesterMockRecorder) Do(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCommitRequester)(nil).Do), ctx)
}

// GetProviderStreams mocks base method
func (m *MockCommitRequester) GetProviderStreams() []network.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderStreams")
	ret0, _ := ret[0].([]network.Stream)
	return ret0
}

// GetProviderStreams indicates an expected call of GetProviderStreams
func (mr *MockCommitRequesterMockRecorder) GetProviderStreams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderStreams", reflect.TypeOf((*MockCommitRequester)(nil).GetProviderStreams))
}

// OnWantResponse mocks base method
func (m *MockCommitRequester) OnWantResponse(s network.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnWantResponse", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnWantResponse indicates an expected call of OnWantResponse
func (mr *MockCommitRequesterMockRecorder) OnWantResponse(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnWantResponse", reflect.TypeOf((*MockCommitRequester)(nil).OnWantResponse), s)
}

// OnSendResponse mocks base method
func (m *MockCommitRequester) OnSendResponse(s network.Stream) (io.ReadSeekerCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSendResponse", s)
	ret0, _ := ret[0].(io.ReadSeekerCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnSendResponse indicates an expected call of OnSendResponse
func (mr *MockCommitRequesterMockRecorder) OnSendResponse(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSendResponse", reflect.TypeOf((*MockCommitRequester)(nil).OnSendResponse), s)
}
