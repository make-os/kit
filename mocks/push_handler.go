// Code generated by MockGen. DO NOT EDIT.
// Source: remote/push/push_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	packp "gopkg.in/src-d/go-git.v4/plumbing/protocol/packp"
	io "io"
	exec "os/exec"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandleStream mocks base method
func (m *MockHandler) HandleStream(packfile io.Reader, gitReceivePack io.WriteCloser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleStream", packfile, gitReceivePack)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStream indicates an expected call of HandleStream
func (mr *MockHandlerMockRecorder) HandleStream(packfile, gitReceivePack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStream", reflect.TypeOf((*MockHandler)(nil).HandleStream), packfile, gitReceivePack)
}

// EnsureReferencesHaveTxDetail mocks base method
func (m *MockHandler) EnsureReferencesHaveTxDetail() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureReferencesHaveTxDetail")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureReferencesHaveTxDetail indicates an expected call of EnsureReferencesHaveTxDetail
func (mr *MockHandlerMockRecorder) EnsureReferencesHaveTxDetail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureReferencesHaveTxDetail", reflect.TypeOf((*MockHandler)(nil).EnsureReferencesHaveTxDetail))
}

// DoAuth mocks base method
func (m *MockHandler) DoAuth(ur *packp.ReferenceUpdateRequest, targetRef string, ignorePostRefs bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAuth", ur, targetRef, ignorePostRefs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoAuth indicates an expected call of DoAuth
func (mr *MockHandlerMockRecorder) DoAuth(ur, targetRef, ignorePostRefs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAuth", reflect.TypeOf((*MockHandler)(nil).DoAuth), ur, targetRef, ignorePostRefs)
}

// HandleAuthorization mocks base method
func (m *MockHandler) HandleAuthorization(ur *packp.ReferenceUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAuthorization", ur)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAuthorization indicates an expected call of HandleAuthorization
func (mr *MockHandlerMockRecorder) HandleAuthorization(ur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAuthorization", reflect.TypeOf((*MockHandler)(nil).HandleAuthorization), ur)
}

// HandleReferences mocks base method
func (m *MockHandler) HandleReferences() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleReferences")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleReferences indicates an expected call of HandleReferences
func (mr *MockHandlerMockRecorder) HandleReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleReferences", reflect.TypeOf((*MockHandler)(nil).HandleReferences))
}

// HandleUpdate mocks base method
func (m *MockHandler) HandleUpdate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUpdate")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUpdate indicates an expected call of HandleUpdate
func (mr *MockHandlerMockRecorder) HandleUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdate", reflect.TypeOf((*MockHandler)(nil).HandleUpdate))
}

// HandleReference mocks base method
func (m *MockHandler) HandleReference(ref string, revertOnly bool) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleReference", ref, revertOnly)
	ret0, _ := ret[0].([]error)
	return ret0
}

// HandleReference indicates an expected call of HandleReference
func (mr *MockHandlerMockRecorder) HandleReference(ref, revertOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleReference", reflect.TypeOf((*MockHandler)(nil).HandleReference), ref, revertOnly)
}

// SetGitReceivePackCmd mocks base method
func (m *MockHandler) SetGitReceivePackCmd(cmd *exec.Cmd) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGitReceivePackCmd", cmd)
}

// SetGitReceivePackCmd indicates an expected call of SetGitReceivePackCmd
func (mr *MockHandlerMockRecorder) SetGitReceivePackCmd(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGitReceivePackCmd", reflect.TypeOf((*MockHandler)(nil).SetGitReceivePackCmd), cmd)
}
