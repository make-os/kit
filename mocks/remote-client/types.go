// Code generated by MockGen. DO NOT EDIT.
// Source: api/remote/client/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/make-os/lobe/api/types"
	reflect "reflect"
)

// MockPushKey is a mock of PushKey interface
type MockPushKey struct {
	ctrl     *gomock.Controller
	recorder *MockPushKeyMockRecorder
}

// MockPushKeyMockRecorder is the mock recorder for MockPushKey
type MockPushKeyMockRecorder struct {
	mock *MockPushKey
}

// NewMockPushKey creates a new mock instance
func NewMockPushKey(ctrl *gomock.Controller) *MockPushKey {
	mock := &MockPushKey{ctrl: ctrl}
	mock.recorder = &MockPushKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushKey) EXPECT() *MockPushKeyMockRecorder {
	return m.recorder
}

// GetOwnerNonce mocks base method
func (m *MockPushKey) GetOwnerNonce(pushKeyID string, blockHeight ...uint64) (*types.ResultAccountNonce, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pushKeyID}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOwnerNonce", varargs...)
	ret0, _ := ret[0].(*types.ResultAccountNonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerNonce indicates an expected call of GetOwnerNonce
func (mr *MockPushKeyMockRecorder) GetOwnerNonce(pushKeyID interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pushKeyID}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerNonce", reflect.TypeOf((*MockPushKey)(nil).GetOwnerNonce), varargs...)
}

// Get mocks base method
func (m *MockPushKey) Get(pushKeyID string, blockHeight ...uint64) (*types.ResultPushKey, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{pushKeyID}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*types.ResultPushKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPushKeyMockRecorder) Get(pushKeyID interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pushKeyID}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPushKey)(nil).Get), varargs...)
}

// Register mocks base method
func (m *MockPushKey) Register(body *types.BodyRegisterPushKey) (*types.ResultRegisterPushKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", body)
	ret0, _ := ret[0].(*types.ResultRegisterPushKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockPushKeyMockRecorder) Register(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockPushKey)(nil).Register), body)
}

// MockRepo is a mock of Repo interface
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRepo) Create(body *types.BodyCreateRepo) (*types.ResultCreateRepo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", body)
	ret0, _ := ret[0].(*types.ResultCreateRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockRepoMockRecorder) Create(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepo)(nil).Create), body)
}

// VoteProposal mocks base method
func (m *MockRepo) VoteProposal(body *types.BodyRepoVote) (*types.ResultHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteProposal", body)
	ret0, _ := ret[0].(*types.ResultHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoteProposal indicates an expected call of VoteProposal
func (mr *MockRepoMockRecorder) VoteProposal(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteProposal", reflect.TypeOf((*MockRepo)(nil).VoteProposal), body)
}

// Get mocks base method
func (m *MockRepo) Get(name string, opts ...*types.GetRepoOpts) (*types.ResultRepository, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*types.ResultRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepoMockRecorder) Get(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepo)(nil).Get), varargs...)
}

// AddContributors mocks base method
func (m *MockRepo) AddContributors(body *types.BodyAddRepoContribs) (*types.ResultHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContributors", body)
	ret0, _ := ret[0].(*types.ResultHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddContributors indicates an expected call of AddContributors
func (mr *MockRepoMockRecorder) AddContributors(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContributors", reflect.TypeOf((*MockRepo)(nil).AddContributors), body)
}

// MockTx is a mock of Tx interface
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockTx) Send(data map[string]interface{}) (*types.ResultHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", data)
	ret0, _ := ret[0].(*types.ResultHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockTxMockRecorder) Send(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTx)(nil).Send), data)
}

// Get mocks base method
func (m *MockTx) Get(hash string) (*types.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", hash)
	ret0, _ := ret[0].(*types.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTxMockRecorder) Get(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTx)(nil).Get), hash)
}

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// GetNonce mocks base method
func (m *MockUser) GetNonce(address string, blockHeight ...uint64) (*types.ResultAccountNonce, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNonce", varargs...)
	ret0, _ := ret[0].(*types.ResultAccountNonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce
func (mr *MockUserMockRecorder) GetNonce(address interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockUser)(nil).GetNonce), varargs...)
}

// Get mocks base method
func (m *MockUser) Get(address string, blockHeight ...uint64) (*types.ResultAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range blockHeight {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*types.ResultAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserMockRecorder) Get(address interface{}, blockHeight ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, blockHeight...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUser)(nil).Get), varargs...)
}

// Send mocks base method
func (m *MockUser) Send(body *types.BodySendCoin) (*types.ResultHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", body)
	ret0, _ := ret[0].(*types.ResultHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockUserMockRecorder) Send(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockUser)(nil).Send), body)
}
