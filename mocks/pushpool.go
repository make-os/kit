// Code generated by MockGen. DO NOT EDIT.
// Source: remote/pushpool/types/pushpool.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/makeos/mosdef/remote/pushpool/types"
	reflect "reflect"
)

// MockPushPool is a mock of PushPool interface
type MockPushPool struct {
	ctrl     *gomock.Controller
	recorder *MockPushPoolMockRecorder
}

// MockPushPoolMockRecorder is the mock recorder for MockPushPool
type MockPushPoolMockRecorder struct {
	mock *MockPushPool
}

// NewMockPushPool creates a new mock instance
func NewMockPushPool(ctrl *gomock.Controller) *MockPushPool {
	mock := &MockPushPool{ctrl: ctrl}
	mock.recorder = &MockPushPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushPool) EXPECT() *MockPushPoolMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockPushPool) Add(tx types.PushNotice, noValidation ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{tx}
	for _, a := range noValidation {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockPushPoolMockRecorder) Add(tx interface{}, noValidation ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tx}, noValidation...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPushPool)(nil).Add), varargs...)
}

// Full mocks base method
func (m *MockPushPool) Full() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Full")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Full indicates an expected call of Full
func (mr *MockPushPoolMockRecorder) Full() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Full", reflect.TypeOf((*MockPushPool)(nil).Full))
}

// RepoHasPushNote mocks base method
func (m *MockPushPool) RepoHasPushNote(repo string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoHasPushNote", repo)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RepoHasPushNote indicates an expected call of RepoHasPushNote
func (mr *MockPushPoolMockRecorder) RepoHasPushNote(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoHasPushNote", reflect.TypeOf((*MockPushPool)(nil).RepoHasPushNote), repo)
}

// Get mocks base method
func (m *MockPushPool) Get(noteID string) *types.PushNote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", noteID)
	ret0, _ := ret[0].(*types.PushNote)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockPushPoolMockRecorder) Get(noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPushPool)(nil).Get), noteID)
}

// Len mocks base method
func (m *MockPushPool) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockPushPoolMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockPushPool)(nil).Len))
}

// Remove mocks base method
func (m *MockPushPool) Remove(pushNote types.PushNotice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", pushNote)
}

// Remove indicates an expected call of Remove
func (mr *MockPushPoolMockRecorder) Remove(pushNote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPushPool)(nil).Remove), pushNote)
}
