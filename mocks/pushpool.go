// Code generated by MockGen. DO NOT EDIT.
// Source: remote/push/types/objects.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	msgpack "github.com/vmihailenco/msgpack"
	types "gitlab.com/makeos/mosdef/remote/push/types"
	types0 "gitlab.com/makeos/mosdef/remote/types"
	util "gitlab.com/makeos/mosdef/util"
	reflect "reflect"
)

// MockPushPooler is a mock of PushPooler interface
type MockPushPooler struct {
	ctrl     *gomock.Controller
	recorder *MockPushPoolerMockRecorder
}

// MockPushPoolerMockRecorder is the mock recorder for MockPushPooler
type MockPushPoolerMockRecorder struct {
	mock *MockPushPooler
}

// NewMockPushPooler creates a new mock instance
func NewMockPushPooler(ctrl *gomock.Controller) *MockPushPooler {
	mock := &MockPushPooler{ctrl: ctrl}
	mock.recorder = &MockPushPoolerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushPooler) EXPECT() *MockPushPoolerMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockPushPooler) Add(tx types.PushNotice, noValidation ...bool) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{tx}
	for _, a := range noValidation {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockPushPoolerMockRecorder) Add(tx interface{}, noValidation ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tx}, noValidation...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPushPooler)(nil).Add), varargs...)
}

// Full mocks base method
func (m *MockPushPooler) Full() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Full")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Full indicates an expected call of Full
func (mr *MockPushPoolerMockRecorder) Full() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Full", reflect.TypeOf((*MockPushPooler)(nil).Full))
}

// RepoHasPushNote mocks base method
func (m *MockPushPooler) RepoHasPushNote(repo string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepoHasPushNote", repo)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RepoHasPushNote indicates an expected call of RepoHasPushNote
func (mr *MockPushPoolerMockRecorder) RepoHasPushNote(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoHasPushNote", reflect.TypeOf((*MockPushPooler)(nil).RepoHasPushNote), repo)
}

// Get mocks base method
func (m *MockPushPooler) Get(noteID string) *types.PushNote {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", noteID)
	ret0, _ := ret[0].(*types.PushNote)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockPushPoolerMockRecorder) Get(noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPushPooler)(nil).Get), noteID)
}

// Len mocks base method
func (m *MockPushPooler) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockPushPoolerMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockPushPooler)(nil).Len))
}

// Remove mocks base method
func (m *MockPushPooler) Remove(pushNote types.PushNotice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", pushNote)
}

// Remove indicates an expected call of Remove
func (mr *MockPushPoolerMockRecorder) Remove(pushNote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPushPooler)(nil).Remove), pushNote)
}

// MockPushNotice is a mock of PushNotice interface
type MockPushNotice struct {
	ctrl     *gomock.Controller
	recorder *MockPushNoticeMockRecorder
}

// MockPushNoticeMockRecorder is the mock recorder for MockPushNotice
type MockPushNoticeMockRecorder struct {
	mock *MockPushNotice
}

// NewMockPushNotice creates a new mock instance
func NewMockPushNotice(ctrl *gomock.Controller) *MockPushNotice {
	mock := &MockPushNotice{ctrl: ctrl}
	mock.recorder = &MockPushNoticeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushNotice) EXPECT() *MockPushNoticeMockRecorder {
	return m.recorder
}

// GetTargetRepo mocks base method
func (m *MockPushNotice) GetTargetRepo() types0.LocalRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetRepo")
	ret0, _ := ret[0].(types0.LocalRepo)
	return ret0
}

// GetTargetRepo indicates an expected call of GetTargetRepo
func (mr *MockPushNoticeMockRecorder) GetTargetRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetRepo", reflect.TypeOf((*MockPushNotice)(nil).GetTargetRepo))
}

// SetTargetRepo mocks base method
func (m *MockPushNotice) SetTargetRepo(repo types0.LocalRepo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTargetRepo", repo)
}

// SetTargetRepo indicates an expected call of SetTargetRepo
func (mr *MockPushNoticeMockRecorder) SetTargetRepo(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTargetRepo", reflect.TypeOf((*MockPushNotice)(nil).SetTargetRepo), repo)
}

// GetPusherKeyID mocks base method
func (m *MockPushNotice) GetPusherKeyID() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPusherKeyID")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPusherKeyID indicates an expected call of GetPusherKeyID
func (mr *MockPushNoticeMockRecorder) GetPusherKeyID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPusherKeyID", reflect.TypeOf((*MockPushNotice)(nil).GetPusherKeyID))
}

// GetPusherAddress mocks base method
func (m *MockPushNotice) GetPusherAddress() util.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPusherAddress")
	ret0, _ := ret[0].(util.Address)
	return ret0
}

// GetPusherAddress indicates an expected call of GetPusherAddress
func (mr *MockPushNoticeMockRecorder) GetPusherAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPusherAddress", reflect.TypeOf((*MockPushNotice)(nil).GetPusherAddress))
}

// GetPusherAccountNonce mocks base method
func (m *MockPushNotice) GetPusherAccountNonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPusherAccountNonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPusherAccountNonce indicates an expected call of GetPusherAccountNonce
func (mr *MockPushNoticeMockRecorder) GetPusherAccountNonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPusherAccountNonce", reflect.TypeOf((*MockPushNotice)(nil).GetPusherAccountNonce))
}

// GetPusherKeyIDString mocks base method
func (m *MockPushNotice) GetPusherKeyIDString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPusherKeyIDString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPusherKeyIDString indicates an expected call of GetPusherKeyIDString
func (mr *MockPushNoticeMockRecorder) GetPusherKeyIDString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPusherKeyIDString", reflect.TypeOf((*MockPushNotice)(nil).GetPusherKeyIDString))
}

// EncodeMsgpack mocks base method
func (m *MockPushNotice) EncodeMsgpack(enc *msgpack.Encoder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeMsgpack", enc)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncodeMsgpack indicates an expected call of EncodeMsgpack
func (mr *MockPushNoticeMockRecorder) EncodeMsgpack(enc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeMsgpack", reflect.TypeOf((*MockPushNotice)(nil).EncodeMsgpack), enc)
}

// DecodeMsgpack mocks base method
func (m *MockPushNotice) DecodeMsgpack(dec *msgpack.Decoder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeMsgpack", dec)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecodeMsgpack indicates an expected call of DecodeMsgpack
func (mr *MockPushNoticeMockRecorder) DecodeMsgpack(dec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeMsgpack", reflect.TypeOf((*MockPushNotice)(nil).DecodeMsgpack), dec)
}

// Bytes mocks base method
func (m *MockPushNotice) Bytes(recompute ...bool) []byte {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range recompute {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Bytes", varargs...)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockPushNoticeMockRecorder) Bytes(recompute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockPushNotice)(nil).Bytes), recompute...)
}

// BytesNoCache mocks base method
func (m *MockPushNotice) BytesNoCache() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesNoCache")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// BytesNoCache indicates an expected call of BytesNoCache
func (mr *MockPushNoticeMockRecorder) BytesNoCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesNoCache", reflect.TypeOf((*MockPushNotice)(nil).BytesNoCache))
}

// BytesNoSig mocks base method
func (m *MockPushNotice) BytesNoSig() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BytesNoSig")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// BytesNoSig indicates an expected call of BytesNoSig
func (mr *MockPushNoticeMockRecorder) BytesNoSig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesNoSig", reflect.TypeOf((*MockPushNotice)(nil).BytesNoSig))
}

// GetPushedObjects mocks base method
func (m *MockPushNotice) GetPushedObjects() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushedObjects")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetPushedObjects indicates an expected call of GetPushedObjects
func (mr *MockPushNoticeMockRecorder) GetPushedObjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushedObjects", reflect.TypeOf((*MockPushNotice)(nil).GetPushedObjects))
}

// GetEcoSize mocks base method
func (m *MockPushNotice) GetEcoSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEcoSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEcoSize indicates an expected call of GetEcoSize
func (mr *MockPushNoticeMockRecorder) GetEcoSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEcoSize", reflect.TypeOf((*MockPushNotice)(nil).GetEcoSize))
}

// GetNodePubKey mocks base method
func (m *MockPushNotice) GetNodePubKey() util.Bytes32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePubKey")
	ret0, _ := ret[0].(util.Bytes32)
	return ret0
}

// GetNodePubKey indicates an expected call of GetNodePubKey
func (mr *MockPushNoticeMockRecorder) GetNodePubKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePubKey", reflect.TypeOf((*MockPushNotice)(nil).GetNodePubKey))
}

// GetNodeSignature mocks base method
func (m *MockPushNotice) GetNodeSignature() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeSignature")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetNodeSignature indicates an expected call of GetNodeSignature
func (mr *MockPushNoticeMockRecorder) GetNodeSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeSignature", reflect.TypeOf((*MockPushNotice)(nil).GetNodeSignature))
}

// GetRepoName mocks base method
func (m *MockPushNotice) GetRepoName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepoName indicates an expected call of GetRepoName
func (mr *MockPushNoticeMockRecorder) GetRepoName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoName", reflect.TypeOf((*MockPushNotice)(nil).GetRepoName))
}

// GetNamespace mocks base method
func (m *MockPushNotice) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockPushNoticeMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockPushNotice)(nil).GetNamespace))
}

// GetTimestamp mocks base method
func (m *MockPushNotice) GetTimestamp() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp
func (mr *MockPushNoticeMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockPushNotice)(nil).GetTimestamp))
}

// GetPushedReferences mocks base method
func (m *MockPushNotice) GetPushedReferences() types.PushedReferences {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushedReferences")
	ret0, _ := ret[0].(types.PushedReferences)
	return ret0
}

// GetPushedReferences indicates an expected call of GetPushedReferences
func (mr *MockPushNoticeMockRecorder) GetPushedReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushedReferences", reflect.TypeOf((*MockPushNotice)(nil).GetPushedReferences))
}

// Len mocks base method
func (m *MockPushNotice) Len() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockPushNoticeMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockPushNotice)(nil).Len))
}

// ID mocks base method
func (m *MockPushNotice) ID(recompute ...bool) util.Bytes32 {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range recompute {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ID", varargs...)
	ret0, _ := ret[0].(util.Bytes32)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPushNoticeMockRecorder) ID(recompute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPushNotice)(nil).ID), recompute...)
}

// BytesAndID mocks base method
func (m *MockPushNotice) BytesAndID(recompute ...bool) ([]byte, util.Bytes32) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range recompute {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BytesAndID", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(util.Bytes32)
	return ret0, ret1
}

// BytesAndID indicates an expected call of BytesAndID
func (mr *MockPushNoticeMockRecorder) BytesAndID(recompute ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesAndID", reflect.TypeOf((*MockPushNotice)(nil).BytesAndID), recompute...)
}

// TxSize mocks base method
func (m *MockPushNotice) TxSize() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSize")
	ret0, _ := ret[0].(uint)
	return ret0
}

// TxSize indicates an expected call of TxSize
func (mr *MockPushNoticeMockRecorder) TxSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSize", reflect.TypeOf((*MockPushNotice)(nil).TxSize))
}

// BillableSize mocks base method
func (m *MockPushNotice) BillableSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillableSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// BillableSize indicates an expected call of BillableSize
func (mr *MockPushNoticeMockRecorder) BillableSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillableSize", reflect.TypeOf((*MockPushNotice)(nil).BillableSize))
}

// GetSize mocks base method
func (m *MockPushNotice) GetSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetSize indicates an expected call of GetSize
func (mr *MockPushNoticeMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockPushNotice)(nil).GetSize))
}

// GetFee mocks base method
func (m *MockPushNotice) GetFee() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFee")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetFee indicates an expected call of GetFee
func (mr *MockPushNoticeMockRecorder) GetFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFee", reflect.TypeOf((*MockPushNotice)(nil).GetFee))
}

// GetValue mocks base method
func (m *MockPushNotice) GetValue() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// GetValue indicates an expected call of GetValue
func (mr *MockPushNoticeMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockPushNotice)(nil).GetValue))
}
