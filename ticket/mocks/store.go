// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types2 "gitlab.com/makeos/mosdef/ticket/types"
	reflect "reflect"
)

// MockHost is a mock of Host interface
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
}

// MockHostMockRecorder is the mock recorder for MockHost
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockHost) Add(tickets ...*types2.Ticket) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range tickets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockHostMockRecorder) Add(tickets ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockHost)(nil).Add), tickets...)
}

// GetByHash mocks base method
func (m *MockHost) GetByHash(hash string) *types2.Ticket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", hash)
	ret0, _ := ret[0].(*types2.Ticket)
	return ret0
}

// GetByHash indicates an expected call of GetByHash
func (mr *MockHostMockRecorder) GetByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockHost)(nil).GetByHash), hash)
}

// RemoveByHash mocks base method
func (m *MockHost) RemoveByHash(hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByHash", hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByHash indicates an expected call of RemoveByHash
func (mr *MockHostMockRecorder) RemoveByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByHash", reflect.TypeOf((*MockHost)(nil).RemoveByHash), hash)
}

// QueryOne mocks base method
func (m *MockHost) QueryOne(predicate func(*types2.Ticket) bool) *types2.Ticket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOne", predicate)
	ret0, _ := ret[0].(*types2.Ticket)
	return ret0
}

// QueryOne indicates an expected call of QueryOne
func (mr *MockHostMockRecorder) QueryOne(predicate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockHost)(nil).QueryOne), predicate)
}

// Query mocks base method
func (m *MockHost) Query(predicate func(*types2.Ticket) bool, queryOpt ...interface{}) []*types2.Ticket {
	m.ctrl.T.Helper()
	varargs := []interface{}{predicate}
	for _, a := range queryOpt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].([]*types2.Ticket)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockHostMockRecorder) Query(predicate interface{}, queryOpt ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{predicate}, queryOpt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockHost)(nil).Query), varargs...)
}

// Count mocks base method
func (m *MockHost) Count(predicate func(*types2.Ticket) bool) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", predicate)
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockHostMockRecorder) Count(predicate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockHost)(nil).Count), predicate)
}

// UpdateOne mocks base method
func (m *MockHost) UpdateOne(upd types2.Ticket, queryPredicate func(*types2.Ticket) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateOne", upd, queryPredicate)
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *MockHostMockRecorder) UpdateOne(upd, queryPredicate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockHost)(nil).UpdateOne), upd, queryPredicate)
}
