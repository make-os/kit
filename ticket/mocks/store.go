// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/makeos/mosdef/types"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockStore) Add(t ...*types.Ticket) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range t {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockStoreMockRecorder) Add(t ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStore)(nil).Add), t...)
}

// Query mocks base method
func (m *MockStore) Query(query types.Ticket, queryOptions ...interface{}) ([]*types.Ticket, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range queryOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].([]*types.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStoreMockRecorder) Query(query interface{}, queryOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, queryOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStore)(nil).Query), varargs...)
}

// QueryOne mocks base method
func (m *MockStore) QueryOne(query types.Ticket, queryOptions ...interface{}) (*types.Ticket, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range queryOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOne", varargs...)
	ret0, _ := ret[0].(*types.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOne indicates an expected call of QueryOne
func (mr *MockStoreMockRecorder) QueryOne(query interface{}, queryOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, queryOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOne", reflect.TypeOf((*MockStore)(nil).QueryOne), varargs...)
}

// Count mocks base method
func (m *MockStore) Count(query types.Ticket, queryOptions ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range queryOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockStoreMockRecorder) Count(query interface{}, queryOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, queryOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStore)(nil).Count), varargs...)
}

// GetLiveValidatorTickets mocks base method
func (m *MockStore) GetLiveValidatorTickets(height int64, queryOptions ...interface{}) ([]*types.Ticket, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{height}
	for _, a := range queryOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLiveValidatorTickets", varargs...)
	ret0, _ := ret[0].([]*types.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveValidatorTickets indicates an expected call of GetLiveValidatorTickets
func (mr *MockStoreMockRecorder) GetLiveValidatorTickets(height interface{}, queryOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{height}, queryOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveValidatorTickets", reflect.TypeOf((*MockStore)(nil).GetLiveValidatorTickets), varargs...)
}

// CountLiveValidators mocks base method
func (m *MockStore) CountLiveValidators(height int64, queryOptions ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{height}
	for _, a := range queryOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountLiveValidators", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLiveValidators indicates an expected call of CountLiveValidators
func (mr *MockStoreMockRecorder) CountLiveValidators(height interface{}, queryOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{height}, queryOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLiveValidators", reflect.TypeOf((*MockStore)(nil).CountLiveValidators), varargs...)
}

// Remove mocks base method
func (m *MockStore) Remove(hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockStoreMockRecorder) Remove(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockStore)(nil).Remove), hash)
}

// Close mocks base method
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}
