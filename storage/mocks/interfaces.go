// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/makeos/mosdef/storage"
	reflect "reflect"
)

// MockEngine is a mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockEngine) Put(record *storage.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockEngineMockRecorder) Put(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockEngine)(nil).Put), record)
}

// Get mocks base method
func (m *MockEngine) Get(key []byte) (*storage.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*storage.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockEngineMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEngine)(nil).Get), key)
}

// Del mocks base method
func (m *MockEngine) Del(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockEngineMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockEngine)(nil).Del), key)
}

// Iterate mocks base method
func (m *MockEngine) Iterate(prefix []byte, first bool, iterFunc func(*storage.Record) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Iterate", prefix, first, iterFunc)
}

// Iterate indicates an expected call of Iterate
func (mr *MockEngineMockRecorder) Iterate(prefix, first, iterFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterate", reflect.TypeOf((*MockEngine)(nil).Iterate), prefix, first, iterFunc)
}

// RawIterator mocks base method
func (m *MockEngine) RawIterator(opts interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawIterator", opts)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// RawIterator indicates an expected call of RawIterator
func (mr *MockEngineMockRecorder) RawIterator(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawIterator", reflect.TypeOf((*MockEngine)(nil).RawIterator), opts)
}

// NewBatch mocks base method
func (m *MockEngine) NewBatch() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// NewBatch indicates an expected call of NewBatch
func (mr *MockEngineMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockEngine)(nil).NewBatch))
}

// Init mocks base method
func (m *MockEngine) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockEngineMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockEngine)(nil).Init))
}

// Close mocks base method
func (m *MockEngine) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockEngineMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEngine)(nil).Close))
}

// F mocks base method
func (m *MockEngine) F(autoFinish, renew bool) storage.Functions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "F", autoFinish, renew)
	ret0, _ := ret[0].(storage.Functions)
	return ret0
}

// F indicates an expected call of F
func (mr *MockEngineMockRecorder) F(autoFinish, renew interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "F", reflect.TypeOf((*MockEngine)(nil).F), autoFinish, renew)
}

// MockTxCommitDiscarder is a mock of TxCommitDiscarder interface
type MockTxCommitDiscarder struct {
	ctrl     *gomock.Controller
	recorder *MockTxCommitDiscarderMockRecorder
}

// MockTxCommitDiscarderMockRecorder is the mock recorder for MockTxCommitDiscarder
type MockTxCommitDiscarderMockRecorder struct {
	mock *MockTxCommitDiscarder
}

// NewMockTxCommitDiscarder creates a new mock instance
func NewMockTxCommitDiscarder(ctrl *gomock.Controller) *MockTxCommitDiscarder {
	mock := &MockTxCommitDiscarder{ctrl: ctrl}
	mock.recorder = &MockTxCommitDiscarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxCommitDiscarder) EXPECT() *MockTxCommitDiscarderMockRecorder {
	return m.recorder
}

// CanFinish mocks base method
func (m *MockTxCommitDiscarder) CanFinish() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanFinish")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanFinish indicates an expected call of CanFinish
func (mr *MockTxCommitDiscarderMockRecorder) CanFinish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanFinish", reflect.TypeOf((*MockTxCommitDiscarder)(nil).CanFinish))
}

// Commit mocks base method
func (m *MockTxCommitDiscarder) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockTxCommitDiscarderMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxCommitDiscarder)(nil).Commit))
}

// Discard mocks base method
func (m *MockTxCommitDiscarder) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard
func (mr *MockTxCommitDiscarderMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockTxCommitDiscarder)(nil).Discard))
}

// MockTxRenewer is a mock of TxRenewer interface
type MockTxRenewer struct {
	ctrl     *gomock.Controller
	recorder *MockTxRenewerMockRecorder
}

// MockTxRenewerMockRecorder is the mock recorder for MockTxRenewer
type MockTxRenewerMockRecorder struct {
	mock *MockTxRenewer
}

// NewMockTxRenewer creates a new mock instance
func NewMockTxRenewer(ctrl *gomock.Controller) *MockTxRenewer {
	mock := &MockTxRenewer{ctrl: ctrl}
	mock.recorder = &MockTxRenewerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxRenewer) EXPECT() *MockTxRenewerMockRecorder {
	return m.recorder
}

// RenewTx mocks base method
func (m *MockTxRenewer) RenewTx() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenewTx")
}

// RenewTx indicates an expected call of RenewTx
func (mr *MockTxRenewerMockRecorder) RenewTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewTx", reflect.TypeOf((*MockTxRenewer)(nil).RenewTx))
}

// MockOperations is a mock of Operations interface
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockOperations) Put(record *storage.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockOperationsMockRecorder) Put(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockOperations)(nil).Put), record)
}

// Get mocks base method
func (m *MockOperations) Get(key []byte) (*storage.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*storage.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockOperationsMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperations)(nil).Get), key)
}

// Del mocks base method
func (m *MockOperations) Del(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockOperationsMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockOperations)(nil).Del), key)
}

// Iterate mocks base method
func (m *MockOperations) Iterate(prefix []byte, first bool, iterFunc func(*storage.Record) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Iterate", prefix, first, iterFunc)
}

// Iterate indicates an expected call of Iterate
func (mr *MockOperationsMockRecorder) Iterate(prefix, first, iterFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterate", reflect.TypeOf((*MockOperations)(nil).Iterate), prefix, first, iterFunc)
}

// RawIterator mocks base method
func (m *MockOperations) RawIterator(opts interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawIterator", opts)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// RawIterator indicates an expected call of RawIterator
func (mr *MockOperationsMockRecorder) RawIterator(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawIterator", reflect.TypeOf((*MockOperations)(nil).RawIterator), opts)
}

// NewBatch mocks base method
func (m *MockOperations) NewBatch() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// NewBatch indicates an expected call of NewBatch
func (mr *MockOperationsMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockOperations)(nil).NewBatch))
}

// MockFunctions is a mock of Functions interface
type MockFunctions struct {
	ctrl     *gomock.Controller
	recorder *MockFunctionsMockRecorder
}

// MockFunctionsMockRecorder is the mock recorder for MockFunctions
type MockFunctionsMockRecorder struct {
	mock *MockFunctions
}

// NewMockFunctions creates a new mock instance
func NewMockFunctions(ctrl *gomock.Controller) *MockFunctions {
	mock := &MockFunctions{ctrl: ctrl}
	mock.recorder = &MockFunctionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFunctions) EXPECT() *MockFunctionsMockRecorder {
	return m.recorder
}

// CanFinish mocks base method
func (m *MockFunctions) CanFinish() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanFinish")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanFinish indicates an expected call of CanFinish
func (mr *MockFunctionsMockRecorder) CanFinish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanFinish", reflect.TypeOf((*MockFunctions)(nil).CanFinish))
}

// Commit mocks base method
func (m *MockFunctions) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockFunctionsMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockFunctions)(nil).Commit))
}

// Discard mocks base method
func (m *MockFunctions) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard
func (mr *MockFunctionsMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockFunctions)(nil).Discard))
}

// Put mocks base method
func (m *MockFunctions) Put(record *storage.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockFunctionsMockRecorder) Put(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockFunctions)(nil).Put), record)
}

// Get mocks base method
func (m *MockFunctions) Get(key []byte) (*storage.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*storage.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFunctionsMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFunctions)(nil).Get), key)
}

// Del mocks base method
func (m *MockFunctions) Del(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockFunctionsMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockFunctions)(nil).Del), key)
}

// Iterate mocks base method
func (m *MockFunctions) Iterate(prefix []byte, first bool, iterFunc func(*storage.Record) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Iterate", prefix, first, iterFunc)
}

// Iterate indicates an expected call of Iterate
func (mr *MockFunctionsMockRecorder) Iterate(prefix, first, iterFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterate", reflect.TypeOf((*MockFunctions)(nil).Iterate), prefix, first, iterFunc)
}

// RawIterator mocks base method
func (m *MockFunctions) RawIterator(opts interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawIterator", opts)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// RawIterator indicates an expected call of RawIterator
func (mr *MockFunctionsMockRecorder) RawIterator(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawIterator", reflect.TypeOf((*MockFunctions)(nil).RawIterator), opts)
}

// NewBatch mocks base method
func (m *MockFunctions) NewBatch() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// NewBatch indicates an expected call of NewBatch
func (mr *MockFunctionsMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockFunctions)(nil).NewBatch))
}

// RenewTx mocks base method
func (m *MockFunctions) RenewTx() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenewTx")
}

// RenewTx indicates an expected call of RenewTx
func (mr *MockFunctionsMockRecorder) RenewTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewTx", reflect.TypeOf((*MockFunctions)(nil).RenewTx))
}
