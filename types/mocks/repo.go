// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	crypto "github.com/makeos/mosdef/crypto"
	types "github.com/makeos/mosdef/types"
	util "github.com/makeos/mosdef/util"
	config "gopkg.in/src-d/go-git.v4/config"
	plumbing "gopkg.in/src-d/go-git.v4/plumbing"
	object "gopkg.in/src-d/go-git.v4/plumbing/object"
	storer "gopkg.in/src-d/go-git.v4/plumbing/storer"
	reflect "reflect"
)

// MockBareRepo is a mock of BareRepo interface
type MockBareRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBareRepoMockRecorder
}

// MockBareRepoMockRecorder is the mock recorder for MockBareRepo
type MockBareRepoMockRecorder struct {
	mock *MockBareRepo
}

// NewMockBareRepo creates a new mock instance
func NewMockBareRepo(ctrl *gomock.Controller) *MockBareRepo {
	mock := &MockBareRepo{ctrl: ctrl}
	mock.recorder = &MockBareRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBareRepo) EXPECT() *MockBareRepoMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockBareRepo) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockBareRepoMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockBareRepo)(nil).GetName))
}

// References mocks base method
func (m *MockBareRepo) References() (storer.ReferenceIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "References")
	ret0, _ := ret[0].(storer.ReferenceIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// References indicates an expected call of References
func (mr *MockBareRepoMockRecorder) References() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "References", reflect.TypeOf((*MockBareRepo)(nil).References))
}

// RefDelete mocks base method
func (m *MockBareRepo) RefDelete(refname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefDelete", refname)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefDelete indicates an expected call of RefDelete
func (mr *MockBareRepoMockRecorder) RefDelete(refname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefDelete", reflect.TypeOf((*MockBareRepo)(nil).RefDelete), refname)
}

// RefUpdate mocks base method
func (m *MockBareRepo) RefUpdate(refname, commitHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefUpdate", refname, commitHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefUpdate indicates an expected call of RefUpdate
func (mr *MockBareRepoMockRecorder) RefUpdate(refname, commitHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefUpdate", reflect.TypeOf((*MockBareRepo)(nil).RefUpdate), refname, commitHash)
}

// RefGet mocks base method
func (m *MockBareRepo) RefGet(refname string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefGet", refname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefGet indicates an expected call of RefGet
func (mr *MockBareRepoMockRecorder) RefGet(refname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefGet", reflect.TypeOf((*MockBareRepo)(nil).RefGet), refname)
}

// TagDelete mocks base method
func (m *MockBareRepo) TagDelete(tagname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagDelete", tagname)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagDelete indicates an expected call of TagDelete
func (mr *MockBareRepoMockRecorder) TagDelete(tagname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagDelete", reflect.TypeOf((*MockBareRepo)(nil).TagDelete), tagname)
}

// ListTreeObjects mocks base method
func (m *MockBareRepo) ListTreeObjects(treename string, recursive bool, env ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{treename, recursive}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjects", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjects indicates an expected call of ListTreeObjects
func (mr *MockBareRepoMockRecorder) ListTreeObjects(treename, recursive interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{treename, recursive}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjects", reflect.TypeOf((*MockBareRepo)(nil).ListTreeObjects), varargs...)
}

// DeleteObject mocks base method
func (m *MockBareRepo) DeleteObject(hash plumbing.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject
func (mr *MockBareRepoMockRecorder) DeleteObject(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockBareRepo)(nil).DeleteObject), hash)
}

// Reference mocks base method
func (m *MockBareRepo) Reference(name plumbing.ReferenceName, resolved bool) (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reference", name, resolved)
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reference indicates an expected call of Reference
func (mr *MockBareRepoMockRecorder) Reference(name, resolved interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reference", reflect.TypeOf((*MockBareRepo)(nil).Reference), name, resolved)
}

// Object mocks base method
func (m *MockBareRepo) Object(t plumbing.ObjectType, h plumbing.Hash) (object.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object", t, h)
	ret0, _ := ret[0].(object.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Object indicates an expected call of Object
func (mr *MockBareRepoMockRecorder) Object(t, h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockBareRepo)(nil).Object), t, h)
}

// Objects mocks base method
func (m *MockBareRepo) Objects() (*object.ObjectIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Objects")
	ret0, _ := ret[0].(*object.ObjectIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Objects indicates an expected call of Objects
func (mr *MockBareRepoMockRecorder) Objects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Objects", reflect.TypeOf((*MockBareRepo)(nil).Objects))
}

// CommitObjects mocks base method
func (m *MockBareRepo) CommitObjects() (object.CommitIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitObjects")
	ret0, _ := ret[0].(object.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObjects indicates an expected call of CommitObjects
func (mr *MockBareRepoMockRecorder) CommitObjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObjects", reflect.TypeOf((*MockBareRepo)(nil).CommitObjects))
}

// CommitObject mocks base method
func (m *MockBareRepo) CommitObject(h plumbing.Hash) (*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitObject", h)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObject indicates an expected call of CommitObject
func (mr *MockBareRepoMockRecorder) CommitObject(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObject", reflect.TypeOf((*MockBareRepo)(nil).CommitObject), h)
}

// BlobObject mocks base method
func (m *MockBareRepo) BlobObject(h plumbing.Hash) (*object.Blob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlobObject", h)
	ret0, _ := ret[0].(*object.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobObject indicates an expected call of BlobObject
func (mr *MockBareRepoMockRecorder) BlobObject(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobObject", reflect.TypeOf((*MockBareRepo)(nil).BlobObject), h)
}

// TagObject mocks base method
func (m *MockBareRepo) TagObject(h plumbing.Hash) (*object.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagObject", h)
	ret0, _ := ret[0].(*object.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagObject indicates an expected call of TagObject
func (mr *MockBareRepoMockRecorder) TagObject(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagObject", reflect.TypeOf((*MockBareRepo)(nil).TagObject), h)
}

// Tag mocks base method
func (m *MockBareRepo) Tag(name string) (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", name)
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tag indicates an expected call of Tag
func (mr *MockBareRepoMockRecorder) Tag(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockBareRepo)(nil).Tag), name)
}

// Config mocks base method
func (m *MockBareRepo) Config() (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config
func (mr *MockBareRepoMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockBareRepo)(nil).Config))
}

// GetConfig mocks base method
func (m *MockBareRepo) GetConfig(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockBareRepoMockRecorder) GetConfig(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockBareRepo)(nil).GetConfig), path)
}

// GetRecentCommit mocks base method
func (m *MockBareRepo) GetRecentCommit() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentCommit")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentCommit indicates an expected call of GetRecentCommit
func (mr *MockBareRepoMockRecorder) GetRecentCommit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentCommit", reflect.TypeOf((*MockBareRepo)(nil).GetRecentCommit))
}

// UpdateRecentCommitMsg mocks base method
func (m *MockBareRepo) UpdateRecentCommitMsg(msg, signingKey string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, signingKey}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecentCommitMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecentCommitMsg indicates an expected call of UpdateRecentCommitMsg
func (mr *MockBareRepoMockRecorder) UpdateRecentCommitMsg(msg, signingKey interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, signingKey}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecentCommitMsg", reflect.TypeOf((*MockBareRepo)(nil).UpdateRecentCommitMsg), varargs...)
}

// CreateTagWithMsg mocks base method
func (m *MockBareRepo) CreateTagWithMsg(args []string, msg, signingKey string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{args, msg, signingKey}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTagWithMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTagWithMsg indicates an expected call of CreateTagWithMsg
func (mr *MockBareRepoMockRecorder) CreateTagWithMsg(args, msg, signingKey interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{args, msg, signingKey}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagWithMsg", reflect.TypeOf((*MockBareRepo)(nil).CreateTagWithMsg), varargs...)
}

// RemoveEntryFromNote mocks base method
func (m *MockBareRepo) RemoveEntryFromNote(notename, objectHash string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{notename, objectHash}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveEntryFromNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEntryFromNote indicates an expected call of RemoveEntryFromNote
func (mr *MockBareRepoMockRecorder) RemoveEntryFromNote(notename, objectHash interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{notename, objectHash}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntryFromNote", reflect.TypeOf((*MockBareRepo)(nil).RemoveEntryFromNote), varargs...)
}

// CreateBlob mocks base method
func (m *MockBareRepo) CreateBlob(content string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlob", content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlob indicates an expected call of CreateBlob
func (mr *MockBareRepoMockRecorder) CreateBlob(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlob", reflect.TypeOf((*MockBareRepo)(nil).CreateBlob), content)
}

// AddEntryToNote mocks base method
func (m *MockBareRepo) AddEntryToNote(notename, objectHash, note string, env ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{notename, objectHash, note}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEntryToNote", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntryToNote indicates an expected call of AddEntryToNote
func (mr *MockBareRepoMockRecorder) AddEntryToNote(notename, objectHash, note interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{notename, objectHash, note}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntryToNote", reflect.TypeOf((*MockBareRepo)(nil).AddEntryToNote), varargs...)
}

// ListTreeObjectsSlice mocks base method
func (m *MockBareRepo) ListTreeObjectsSlice(treename string, recursive, showTrees bool, env ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{treename, recursive, showTrees}
	for _, a := range env {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTreeObjectsSlice", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTreeObjectsSlice indicates an expected call of ListTreeObjectsSlice
func (mr *MockBareRepoMockRecorder) ListTreeObjectsSlice(treename, recursive, showTrees interface{}, env ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{treename, recursive, showTrees}, env...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTreeObjectsSlice", reflect.TypeOf((*MockBareRepo)(nil).ListTreeObjectsSlice), varargs...)
}

// Path mocks base method
func (m *MockBareRepo) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockBareRepoMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockBareRepo)(nil).Path))
}

// State mocks base method
func (m *MockBareRepo) State() *types.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(*types.Repository)
	return ret0
}

// State indicates an expected call of State
func (mr *MockBareRepoMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockBareRepo)(nil).State))
}

// MockRepoManager is a mock of RepoManager interface
type MockRepoManager struct {
	ctrl     *gomock.Controller
	recorder *MockRepoManagerMockRecorder
}

// MockRepoManagerMockRecorder is the mock recorder for MockRepoManager
type MockRepoManagerMockRecorder struct {
	mock *MockRepoManager
}

// NewMockRepoManager creates a new mock instance
func NewMockRepoManager(ctrl *gomock.Controller) *MockRepoManager {
	mock := &MockRepoManager{ctrl: ctrl}
	mock.recorder = &MockRepoManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoManager) EXPECT() *MockRepoManagerMockRecorder {
	return m.recorder
}

// GetRepoState mocks base method
func (m *MockRepoManager) GetRepoState(target types.BareRepo, options ...types.KVOption) (types.BareRepoState, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{target}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRepoState", varargs...)
	ret0, _ := ret[0].(types.BareRepoState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoState indicates an expected call of GetRepoState
func (mr *MockRepoManagerMockRecorder) GetRepoState(target interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{target}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoState", reflect.TypeOf((*MockRepoManager)(nil).GetRepoState), varargs...)
}

// Revert mocks base method
func (m *MockRepoManager) Revert(target types.BareRepo, prevState types.BareRepoState, options ...types.KVOption) (*types.Changes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{target, prevState}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Revert", varargs...)
	ret0, _ := ret[0].(*types.Changes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revert indicates an expected call of Revert
func (mr *MockRepoManagerMockRecorder) Revert(target, prevState interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{target, prevState}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revert", reflect.TypeOf((*MockRepoManager)(nil).Revert), varargs...)
}

// GetPGPPubKeyGetter mocks base method
func (m *MockRepoManager) GetPGPPubKeyGetter() types.PGPPubKeyGetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPGPPubKeyGetter")
	ret0, _ := ret[0].(types.PGPPubKeyGetter)
	return ret0
}

// GetPGPPubKeyGetter indicates an expected call of GetPGPPubKeyGetter
func (mr *MockRepoManagerMockRecorder) GetPGPPubKeyGetter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPGPPubKeyGetter", reflect.TypeOf((*MockRepoManager)(nil).GetPGPPubKeyGetter))
}

// GetLogic mocks base method
func (m *MockRepoManager) GetLogic() types.Logic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogic")
	ret0, _ := ret[0].(types.Logic)
	return ret0
}

// GetLogic indicates an expected call of GetLogic
func (mr *MockRepoManagerMockRecorder) GetLogic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogic", reflect.TypeOf((*MockRepoManager)(nil).GetLogic))
}

// GetNodeKey mocks base method
func (m *MockRepoManager) GetNodeKey() *crypto.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeKey")
	ret0, _ := ret[0].(*crypto.Key)
	return ret0
}

// GetNodeKey indicates an expected call of GetNodeKey
func (mr *MockRepoManagerMockRecorder) GetNodeKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeKey", reflect.TypeOf((*MockRepoManager)(nil).GetNodeKey))
}

// GetPushPool mocks base method
func (m *MockRepoManager) GetPushPool() types.PushPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPushPool")
	ret0, _ := ret[0].(types.PushPool)
	return ret0
}

// GetPushPool indicates an expected call of GetPushPool
func (mr *MockRepoManagerMockRecorder) GetPushPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushPool", reflect.TypeOf((*MockRepoManager)(nil).GetPushPool))
}

// Start mocks base method
func (m *MockRepoManager) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockRepoManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRepoManager)(nil).Start))
}

// Wait mocks base method
func (m *MockRepoManager) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockRepoManagerMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRepoManager)(nil).Wait))
}

// Stop mocks base method
func (m *MockRepoManager) Stop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", ctx)
}

// Stop indicates an expected call of Stop
func (mr *MockRepoManagerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRepoManager)(nil).Stop), ctx)
}

// CreateRepository mocks base method
func (m *MockRepoManager) CreateRepository(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockRepoManagerMockRecorder) CreateRepository(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockRepoManager)(nil).CreateRepository), name)
}

// SetPGPPubKeyGetter mocks base method
func (m *MockRepoManager) SetPGPPubKeyGetter(pkGetter types.PGPPubKeyGetter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPGPPubKeyGetter", pkGetter)
}

// SetPGPPubKeyGetter indicates an expected call of SetPGPPubKeyGetter
func (mr *MockRepoManagerMockRecorder) SetPGPPubKeyGetter(pkGetter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPGPPubKeyGetter", reflect.TypeOf((*MockRepoManager)(nil).SetPGPPubKeyGetter), pkGetter)
}

// GetDHT mocks base method
func (m *MockRepoManager) GetDHT() types.DHT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDHT")
	ret0, _ := ret[0].(types.DHT)
	return ret0
}

// GetDHT indicates an expected call of GetDHT
func (mr *MockRepoManagerMockRecorder) GetDHT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDHT", reflect.TypeOf((*MockRepoManager)(nil).GetDHT))
}

// MockPushPool is a mock of PushPool interface
type MockPushPool struct {
	ctrl     *gomock.Controller
	recorder *MockPushPoolMockRecorder
}

// MockPushPoolMockRecorder is the mock recorder for MockPushPool
type MockPushPoolMockRecorder struct {
	mock *MockPushPool
}

// NewMockPushPool creates a new mock instance
func NewMockPushPool(ctrl *gomock.Controller) *MockPushPool {
	mock := &MockPushPool{ctrl: ctrl}
	mock.recorder = &MockPushPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushPool) EXPECT() *MockPushPoolMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockPushPool) Add(tx types.PushTx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockPushPoolMockRecorder) Add(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPushPool)(nil).Add), tx)
}

// Full mocks base method
func (m *MockPushPool) Full() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Full")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Full indicates an expected call of Full
func (mr *MockPushPoolMockRecorder) Full() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Full", reflect.TypeOf((*MockPushPool)(nil).Full))
}

// MockPushTx is a mock of PushTx interface
type MockPushTx struct {
	ctrl     *gomock.Controller
	recorder *MockPushTxMockRecorder
}

// MockPushTxMockRecorder is the mock recorder for MockPushTx
type MockPushTxMockRecorder struct {
	mock *MockPushTx
}

// NewMockPushTx creates a new mock instance
func NewMockPushTx(ctrl *gomock.Controller) *MockPushTx {
	mock := &MockPushTx{ctrl: ctrl}
	mock.recorder = &MockPushTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushTx) EXPECT() *MockPushTxMockRecorder {
	return m.recorder
}

// Bytes mocks base method
func (m *MockPushTx) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockPushTxMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockPushTx)(nil).Bytes))
}

// LenMinusFee mocks base method
func (m *MockPushTx) LenMinusFee() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LenMinusFee")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// LenMinusFee indicates an expected call of LenMinusFee
func (mr *MockPushTxMockRecorder) LenMinusFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LenMinusFee", reflect.TypeOf((*MockPushTx)(nil).LenMinusFee))
}

// Len mocks base method
func (m *MockPushTx) Len() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockPushTxMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockPushTx)(nil).Len))
}

// ID mocks base method
func (m *MockPushTx) ID() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPushTxMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPushTx)(nil).ID))
}

// TxSize mocks base method
func (m *MockPushTx) TxSize() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSize")
	ret0, _ := ret[0].(uint)
	return ret0
}

// TxSize indicates an expected call of TxSize
func (mr *MockPushTxMockRecorder) TxSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSize", reflect.TypeOf((*MockPushTx)(nil).TxSize))
}

// BillableSize mocks base method
func (m *MockPushTx) BillableSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillableSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// BillableSize indicates an expected call of BillableSize
func (mr *MockPushTxMockRecorder) BillableSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillableSize", reflect.TypeOf((*MockPushTx)(nil).BillableSize))
}

// TotalFee mocks base method
func (m *MockPushTx) TotalFee() util.String {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalFee")
	ret0, _ := ret[0].(util.String)
	return ret0
}

// TotalFee indicates an expected call of TotalFee
func (mr *MockPushTxMockRecorder) TotalFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalFee", reflect.TypeOf((*MockPushTx)(nil).TotalFee))
}

// MockBareRepoState is a mock of BareRepoState interface
type MockBareRepoState struct {
	ctrl     *gomock.Controller
	recorder *MockBareRepoStateMockRecorder
}

// MockBareRepoStateMockRecorder is the mock recorder for MockBareRepoState
type MockBareRepoStateMockRecorder struct {
	mock *MockBareRepoState
}

// NewMockBareRepoState creates a new mock instance
func NewMockBareRepoState(ctrl *gomock.Controller) *MockBareRepoState {
	mock := &MockBareRepoState{ctrl: ctrl}
	mock.recorder = &MockBareRepoStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBareRepoState) EXPECT() *MockBareRepoStateMockRecorder {
	return m.recorder
}

// GetReferences mocks base method
func (m *MockBareRepoState) GetReferences() types.Items {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferences")
	ret0, _ := ret[0].(types.Items)
	return ret0
}

// GetReferences indicates an expected call of GetReferences
func (mr *MockBareRepoStateMockRecorder) GetReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferences", reflect.TypeOf((*MockBareRepoState)(nil).GetReferences))
}

// IsEmpty mocks base method
func (m *MockBareRepoState) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (mr *MockBareRepoStateMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockBareRepoState)(nil).IsEmpty))
}

// Hash mocks base method
func (m *MockBareRepoState) Hash() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// Hash indicates an expected call of Hash
func (mr *MockBareRepoStateMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockBareRepoState)(nil).Hash))
}

// GetChanges mocks base method
func (m *MockBareRepoState) GetChanges(y types.BareRepoState) *types.Changes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChanges", y)
	ret0, _ := ret[0].(*types.Changes)
	return ret0
}

// GetChanges indicates an expected call of GetChanges
func (mr *MockBareRepoStateMockRecorder) GetChanges(y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChanges", reflect.TypeOf((*MockBareRepoState)(nil).GetChanges), y)
}

// MockItem is a mock of Item interface
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockItem) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockItemMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockItem)(nil).GetName))
}

// Equal mocks base method
func (m *MockItem) Equal(o interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", o)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockItemMockRecorder) Equal(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockItem)(nil).Equal), o)
}

// GetData mocks base method
func (m *MockItem) GetData() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetData indicates an expected call of GetData
func (mr *MockItemMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockItem)(nil).GetData))
}

// GetType mocks base method
func (m *MockItem) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockItemMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockItem)(nil).GetType))
}

// MockItems is a mock of Items interface
type MockItems struct {
	ctrl     *gomock.Controller
	recorder *MockItemsMockRecorder
}

// MockItemsMockRecorder is the mock recorder for MockItems
type MockItemsMockRecorder struct {
	mock *MockItems
}

// NewMockItems creates a new mock instance
func NewMockItems(ctrl *gomock.Controller) *MockItems {
	mock := &MockItems{ctrl: ctrl}
	mock.recorder = &MockItemsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItems) EXPECT() *MockItemsMockRecorder {
	return m.recorder
}

// Has mocks base method
func (m *MockItems) Has(name interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockItemsMockRecorder) Has(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockItems)(nil).Has), name)
}

// Get mocks base method
func (m *MockItems) Get(name interface{}) types.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(types.Item)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockItemsMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItems)(nil).Get), name)
}

// Equal mocks base method
func (m *MockItems) Equal(o interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", o)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockItemsMockRecorder) Equal(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockItems)(nil).Equal), o)
}

// ForEach mocks base method
func (m *MockItems) ForEach(arg0 func(types.Item) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEach", arg0)
}

// ForEach indicates an expected call of ForEach
func (mr *MockItemsMockRecorder) ForEach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEach", reflect.TypeOf((*MockItems)(nil).ForEach), arg0)
}

// Len mocks base method
func (m *MockItems) Len() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockItemsMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockItems)(nil).Len))
}

// Bytes mocks base method
func (m *MockItems) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockItemsMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockItems)(nil).Bytes))
}

// Hash mocks base method
func (m *MockItems) Hash() util.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(util.Hash)
	return ret0
}

// Hash indicates an expected call of Hash
func (mr *MockItemsMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockItems)(nil).Hash))
}
