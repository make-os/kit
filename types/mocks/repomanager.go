// Code generated by MockGen. DO NOT EDIT.
// Source: repomanager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoManager is a mock of RepoManager interface
type MockRepoManager struct {
	ctrl     *gomock.Controller
	recorder *MockRepoManagerMockRecorder
}

// MockRepoManagerMockRecorder is the mock recorder for MockRepoManager
type MockRepoManagerMockRecorder struct {
	mock *MockRepoManager
}

// NewMockRepoManager creates a new mock instance
func NewMockRepoManager(ctrl *gomock.Controller) *MockRepoManager {
	mock := &MockRepoManager{ctrl: ctrl}
	mock.recorder = &MockRepoManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoManager) EXPECT() *MockRepoManagerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockRepoManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockRepoManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRepoManager)(nil).Start))
}

// Wait mocks base method
func (m *MockRepoManager) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockRepoManagerMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRepoManager)(nil).Wait))
}

// Stop mocks base method
func (m *MockRepoManager) Stop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", ctx)
}

// Stop indicates an expected call of Stop
func (mr *MockRepoManagerMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRepoManager)(nil).Stop), ctx)
}

// CreateRepository mocks base method
func (m *MockRepoManager) CreateRepository(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepository indicates an expected call of CreateRepository
func (mr *MockRepoManagerMockRecorder) CreateRepository(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockRepoManager)(nil).CreateRepository), name)
}
