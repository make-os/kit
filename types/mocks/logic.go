// Code generated by MockGen. DO NOT EDIT.
// Source: logic.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	crypto "github.com/makeos/mosdef/crypto"
	storage "github.com/makeos/mosdef/storage"
	types "github.com/makeos/mosdef/types"
	util "github.com/makeos/mosdef/util"
	types0 "github.com/tendermint/tendermint/abci/types"
	reflect "reflect"
)

// MockSystemKeeper is a mock of SystemKeeper interface
type MockSystemKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockSystemKeeperMockRecorder
}

// MockSystemKeeperMockRecorder is the mock recorder for MockSystemKeeper
type MockSystemKeeperMockRecorder struct {
	mock *MockSystemKeeper
}

// NewMockSystemKeeper creates a new mock instance
func NewMockSystemKeeper(ctrl *gomock.Controller) *MockSystemKeeper {
	mock := &MockSystemKeeper{ctrl: ctrl}
	mock.recorder = &MockSystemKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemKeeper) EXPECT() *MockSystemKeeperMockRecorder {
	return m.recorder
}

// SaveBlockInfo mocks base method
func (m *MockSystemKeeper) SaveBlockInfo(info *types.BlockInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBlockInfo", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockInfo indicates an expected call of SaveBlockInfo
func (mr *MockSystemKeeperMockRecorder) SaveBlockInfo(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockInfo", reflect.TypeOf((*MockSystemKeeper)(nil).SaveBlockInfo), info)
}

// GetLastBlockInfo mocks base method
func (m *MockSystemKeeper) GetLastBlockInfo() (*types.BlockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlockInfo")
	ret0, _ := ret[0].(*types.BlockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlockInfo indicates an expected call of GetLastBlockInfo
func (mr *MockSystemKeeperMockRecorder) GetLastBlockInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlockInfo", reflect.TypeOf((*MockSystemKeeper)(nil).GetLastBlockInfo))
}

// MockAccountKeeper is a mock of AccountKeeper interface
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method
func (m *MockAccountKeeper) GetAccount(address util.String, blockNum ...int64) *types.Account {
	m.ctrl.T.Helper()
	varargs := []interface{}{address}
	for _, a := range blockNum {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*types.Account)
	return ret0
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockAccountKeeperMockRecorder) GetAccount(address interface{}, blockNum ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{address}, blockNum...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), varargs...)
}

// Update mocks base method
func (m *MockAccountKeeper) Update(address util.String, upd *types.Account) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", address, upd)
}

// Update indicates an expected call of Update
func (mr *MockAccountKeeperMockRecorder) Update(address, upd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountKeeper)(nil).Update), address, upd)
}

// MockLogic is a mock of Logic interface
type MockLogic struct {
	ctrl     *gomock.Controller
	recorder *MockLogicMockRecorder
}

// MockLogicMockRecorder is the mock recorder for MockLogic
type MockLogicMockRecorder struct {
	mock *MockLogic
}

// NewMockLogic creates a new mock instance
func NewMockLogic(ctrl *gomock.Controller) *MockLogic {
	mock := &MockLogic{ctrl: ctrl}
	mock.recorder = &MockLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogic) EXPECT() *MockLogicMockRecorder {
	return m.recorder
}

// Tx mocks base method
func (m *MockLogic) Tx() types.TxLogic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(types.TxLogic)
	return ret0
}

// Tx indicates an expected call of Tx
func (mr *MockLogicMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockLogic)(nil).Tx))
}

// Sys mocks base method
func (m *MockLogic) Sys() types.SysLogic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sys")
	ret0, _ := ret[0].(types.SysLogic)
	return ret0
}

// Sys indicates an expected call of Sys
func (mr *MockLogicMockRecorder) Sys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sys", reflect.TypeOf((*MockLogic)(nil).Sys))
}

// DB mocks base method
func (m *MockLogic) DB() storage.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(storage.Engine)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockLogicMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockLogic)(nil).DB))
}

// StateTree mocks base method
func (m *MockLogic) StateTree() types.Tree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateTree")
	ret0, _ := ret[0].(types.Tree)
	return ret0
}

// StateTree indicates an expected call of StateTree
func (mr *MockLogicMockRecorder) StateTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateTree", reflect.TypeOf((*MockLogic)(nil).StateTree))
}

// SysKeeper mocks base method
func (m *MockLogic) SysKeeper() types.SystemKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SysKeeper")
	ret0, _ := ret[0].(types.SystemKeeper)
	return ret0
}

// SysKeeper indicates an expected call of SysKeeper
func (mr *MockLogicMockRecorder) SysKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SysKeeper", reflect.TypeOf((*MockLogic)(nil).SysKeeper))
}

// AccountKeeper mocks base method
func (m *MockLogic) AccountKeeper() types.AccountKeeper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountKeeper")
	ret0, _ := ret[0].(types.AccountKeeper)
	return ret0
}

// AccountKeeper indicates an expected call of AccountKeeper
func (mr *MockLogicMockRecorder) AccountKeeper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountKeeper", reflect.TypeOf((*MockLogic)(nil).AccountKeeper))
}

// WriteGenesisState mocks base method
func (m *MockLogic) WriteGenesisState() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGenesisState")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteGenesisState indicates an expected call of WriteGenesisState
func (mr *MockLogicMockRecorder) WriteGenesisState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGenesisState", reflect.TypeOf((*MockLogic)(nil).WriteGenesisState))
}

// MockLogicCommon is a mock of LogicCommon interface
type MockLogicCommon struct {
	ctrl     *gomock.Controller
	recorder *MockLogicCommonMockRecorder
}

// MockLogicCommonMockRecorder is the mock recorder for MockLogicCommon
type MockLogicCommonMockRecorder struct {
	mock *MockLogicCommon
}

// NewMockLogicCommon creates a new mock instance
func NewMockLogicCommon(ctrl *gomock.Controller) *MockLogicCommon {
	mock := &MockLogicCommon{ctrl: ctrl}
	mock.recorder = &MockLogicCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogicCommon) EXPECT() *MockLogicCommonMockRecorder {
	return m.recorder
}

// MockTxLogic is a mock of TxLogic interface
type MockTxLogic struct {
	ctrl     *gomock.Controller
	recorder *MockTxLogicMockRecorder
}

// MockTxLogicMockRecorder is the mock recorder for MockTxLogic
type MockTxLogicMockRecorder struct {
	mock *MockTxLogic
}

// NewMockTxLogic creates a new mock instance
func NewMockTxLogic(ctrl *gomock.Controller) *MockTxLogic {
	mock := &MockTxLogic{ctrl: ctrl}
	mock.recorder = &MockTxLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxLogic) EXPECT() *MockTxLogicMockRecorder {
	return m.recorder
}

// PrepareExec mocks base method
func (m *MockTxLogic) PrepareExec(req types0.RequestDeliverTx) types0.ResponseDeliverTx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareExec", req)
	ret0, _ := ret[0].(types0.ResponseDeliverTx)
	return ret0
}

// PrepareExec indicates an expected call of PrepareExec
func (mr *MockTxLogicMockRecorder) PrepareExec(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareExec", reflect.TypeOf((*MockTxLogic)(nil).PrepareExec), req)
}

// Exec mocks base method
func (m *MockTxLogic) Exec(tx *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockTxLogicMockRecorder) Exec(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTxLogic)(nil).Exec), tx)
}

// CanTransferCoin mocks base method
func (m *MockTxLogic) CanTransferCoin(txType int, senderPubKey *crypto.PubKey, recipientAddr, value, fee util.String, nonce uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanTransferCoin", txType, senderPubKey, recipientAddr, value, fee, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanTransferCoin indicates an expected call of CanTransferCoin
func (mr *MockTxLogicMockRecorder) CanTransferCoin(txType, senderPubKey, recipientAddr, value, fee, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanTransferCoin", reflect.TypeOf((*MockTxLogic)(nil).CanTransferCoin), txType, senderPubKey, recipientAddr, value, fee, nonce)
}

// MockSysLogic is a mock of SysLogic interface
type MockSysLogic struct {
	ctrl     *gomock.Controller
	recorder *MockSysLogicMockRecorder
}

// MockSysLogicMockRecorder is the mock recorder for MockSysLogic
type MockSysLogicMockRecorder struct {
	mock *MockSysLogic
}

// NewMockSysLogic creates a new mock instance
func NewMockSysLogic(ctrl *gomock.Controller) *MockSysLogic {
	mock := &MockSysLogic{ctrl: ctrl}
	mock.recorder = &MockSysLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSysLogic) EXPECT() *MockSysLogicMockRecorder {
	return m.recorder
}

// GetCurTicketPrice mocks base method
func (m *MockSysLogic) GetCurTicketPrice() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurTicketPrice")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetCurTicketPrice indicates an expected call of GetCurTicketPrice
func (mr *MockSysLogicMockRecorder) GetCurTicketPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurTicketPrice", reflect.TypeOf((*MockSysLogic)(nil).GetCurTicketPrice))
}
