package txns

import (
	"github.com/stretchr/objx"
	"github.com/vmihailenco/msgpack"
	"gitlab.com/makeos/lobe/crypto"
	"gitlab.com/makeos/lobe/types"
	"gitlab.com/makeos/lobe/util"
	crypto2 "gitlab.com/makeos/lobe/util/crypto"
)

// TxTicketPurchase implements BaseTx, it describes a transaction that purchases
// a ticket from the signer or delegates to another address.
type TxTicketPurchase struct {
	*TxType   `json:",flatten" msgpack:"-" mapstructure:"-"`
	*TxCommon `json:",flatten" msgpack:"-" mapstructure:"-"`
	*TxValue  `json:",flatten" msgpack:"-" mapstructure:"-"`
	Delegate  crypto.PublicKey `json:"delegate" msgpack:"delegate" mapstructure:"delegate"`
	BLSPubKey util.Bytes       `json:"blsPubKey" msgpack:"blsPubKey" mapstructure:"blsPubKey"`
}

// NewBareTxTicketPurchase returns an instance of TxTicketPurchase with zero values
func NewBareTxTicketPurchase(ticketType types.TxCode) *TxTicketPurchase {
	return &TxTicketPurchase{
		TxType:    &TxType{Type: ticketType},
		TxCommon:  NewBareTxCommon(),
		TxValue:   &TxValue{Value: "0"},
		Delegate:  crypto.EmptyPublicKey,
		BLSPubKey: []byte{},
	}
}

// NewCoinTransferTx creates and populates a ticket purchase transaction
func NewTicketPurchaseTx(
	ticketType types.TxCode,
	nonce uint64,
	senderKey *crypto.Key,
	value util.String,
	fee util.String,
	timestamp int64) (baseTx types.BaseTx) {

	tx := NewBareTxTicketPurchase(ticketType)
	tx.SetValue(value)
	baseTx = tx

	baseTx.SetTimestamp(timestamp)
	baseTx.SetFee(fee)
	baseTx.SetNonce(nonce)
	baseTx.SetSenderPubKey(senderKey.PubKey().MustBytes())
	sig, err := baseTx.Sign(senderKey.PrivKey().Base58())
	if err != nil {
		panic(err)
	}
	baseTx.SetSignature(sig)
	return
}

// EncodeMsgpack implements msgpack.CustomEncoder
func (tx *TxTicketPurchase) EncodeMsgpack(enc *msgpack.Encoder) error {
	return tx.EncodeMulti(enc,
		tx.Type,
		tx.Nonce,
		tx.Fee,
		tx.Sig,
		tx.Timestamp,
		tx.SenderPubKey,
		tx.Value,
		tx.Delegate.Bytes(),
		tx.BLSPubKey)
}

// DecodeMsgpack implements msgpack.CustomDecoder
func (tx *TxTicketPurchase) DecodeMsgpack(dec *msgpack.Decoder) error {
	return tx.DecodeMulti(dec,
		&tx.Type,
		&tx.Nonce,
		&tx.Fee,
		&tx.Sig,
		&tx.Timestamp,
		&tx.SenderPubKey,
		&tx.Value,
		&tx.Delegate,
		&tx.BLSPubKey)
}

// Bytes returns the serialized transaction
func (tx *TxTicketPurchase) Bytes() []byte {
	return util.ToBytes(tx)
}

// GetBytesNoSig returns the serialized the transaction excluding the signature
func (tx *TxTicketPurchase) GetBytesNoSig() []byte {
	sig := tx.Sig
	tx.Sig = nil
	bz := tx.Bytes()
	tx.Sig = sig
	return bz
}

// ComputeHash computes the hash of the transaction
func (tx *TxTicketPurchase) ComputeHash() util.Bytes32 {
	return util.BytesToBytes32(crypto2.Blake2b256(tx.Bytes()))
}

// GetHash returns the hash of the transaction
func (tx *TxTicketPurchase) GetHash() util.HexBytes {
	return tx.ComputeHash().ToHexBytes()
}

// GetID returns the id of the transaction (also the hash)
func (tx *TxTicketPurchase) GetID() string {
	return tx.ComputeHash().HexStr()
}

// GetEcoSize returns the size of the transaction for use in protocol economics
func (tx *TxTicketPurchase) GetEcoSize() int64 {
	return tx.GetSize()
}

// GetSize returns the size of the tx object (excluding nothing)
func (tx *TxTicketPurchase) GetSize() int64 {
	return int64(len(tx.Bytes()))
}

// Sign signs the transaction
func (tx *TxTicketPurchase) Sign(privKey string) ([]byte, error) {
	return SignTransaction(tx, privKey)
}

// ToBasicMap returns a map equivalent of the transaction
func (tx *TxTicketPurchase) ToMap() map[string]interface{} {
	return util.ToBasicMap(tx)
}

// FromMap populates tx with a map generated by tx.ToMap.
func (tx *TxTicketPurchase) FromMap(data map[string]interface{}) error {
	err := tx.TxCommon.FromMap(data)
	err = util.CallOnNilErr(err, func() error { return tx.TxType.FromMap(data) })
	err = util.CallOnNilErr(err, func() error { return tx.TxValue.FromMap(data) })

	o := objx.New(data)

	if delVal := o.Get("delegate"); !delVal.IsNil() && delVal.IsStr() {
		pubKey, err := crypto.PubKeyFromBase58(delVal.Str())
		if err != nil {
			return util.FieldError("delegate", "unable to decode from base58")
		}
		o.Set("delegate", crypto.BytesToPublicKey(pubKey.MustBytes()))
	}

	if blsPKVal := o.Get("blsPubKey"); !blsPKVal.IsNil() && blsPKVal.IsStr() {
		blsPk, err := util.FromHex(blsPKVal.Str())
		if err != nil {
			return util.FieldError("blsPubKey", "unable to decode hex value")
		}
		o.Set("blsPubKey", blsPk)
	}

	err = util.CallOnNilErr(err, func() error { return util.DecodeMap(data, &tx) })
	return err
}
