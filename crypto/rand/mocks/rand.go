// Code generated by MockGen. DO NOT EDIT.
// Source: rand.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	rand "github.com/makeos/mosdef/crypto/rand"
	reflect "reflect"
)

// MockDRander is a mock of DRander interface
type MockDRander struct {
	ctrl     *gomock.Controller
	recorder *MockDRanderMockRecorder
}

// MockDRanderMockRecorder is the mock recorder for MockDRander
type MockDRanderMockRecorder struct {
	mock *MockDRander
}

// NewMockDRander creates a new mock instance
func NewMockDRander(ctrl *gomock.Controller) *MockDRander {
	mock := &MockDRander{ctrl: ctrl}
	mock.recorder = &MockDRanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDRander) EXPECT() *MockDRanderMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockDRander) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockDRanderMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDRander)(nil).Init))
}

// Get mocks base method
func (m *MockDRander) Get(index int) *rand.DrandRandData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", index)
	ret0, _ := ret[0].(*rand.DrandRandData)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDRanderMockRecorder) Get(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDRander)(nil).Get), index)
}

// Verify mocks base method
func (m *MockDRander) Verify(rand, prev []byte, round uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", rand, prev, round)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockDRanderMockRecorder) Verify(rand, prev, round interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockDRander)(nil).Verify), rand, prev, round)
}
