package rand

import (
	"io/ioutil"

	"github.com/makeos/mosdef/util"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("Rand", func() {
	Describe(".init", func() {
		When("group data is not valid", func() {
			var err error
			var drand *DRand

			BeforeEach(func() {
				drand = NewDRand(nil)
				err = drand.init(util.RandBytes(32))
			})

			It("should return error", func() {
				Expect(err).ToNot(BeNil())
			})
		})
	})

	Describe(".Verify", func() {
		When("inputs are not valid", func() {
			var err error
			var drand *DRand
			var groupData []byte

			BeforeEach(func() {
				drand = NewDRand(nil)

				groupData, err = ioutil.ReadFile("./testdata/group.toml")
				Expect(err).To(BeNil())
				err = drand.init(groupData)
				Expect(err).To(BeNil())

				err = drand.Verify(util.RandBytes(10), util.RandBytes(10), 10)
			})

			It("should return error", func() {
				Expect(err).ToNot(BeNil())
			})
		})

		When("inputs are valid", func() {
			var err error
			var drand *DRand
			var groupData []byte

			BeforeEach(func() {
				secretRound := uint64(1000)
				secret := []uint8{
					0x3a, 0x06, 0x2b, 0xf4, 0xac, 0x34, 0x57, 0x06, 0xcd, 0x41, 0x62, 0xa7, 0x25, 0x39, 0xb8, 0x4a,
					0x73, 0xf7, 0xf4, 0x1e, 0x57, 0x89, 0x88, 0xdc, 0x9f, 0xef, 0xc2, 0xd4, 0x5f, 0x80, 0xe2, 0xec,
					0x64, 0x9e, 0xdc, 0x53, 0xb7, 0x26, 0x4b, 0x0c, 0xdf, 0x41, 0xe3, 0x63, 0xb1, 0xb9, 0xf4, 0xcd,
					0x73, 0x0c, 0x35, 0xd3, 0xf6, 0x31, 0x78, 0x14, 0x24, 0xef, 0xa4, 0x3a, 0x79, 0x63, 0xf1, 0x01,
				}
				previousSecret := []uint8{
					0x28, 0x18, 0x21, 0x0a, 0x81, 0xb6, 0x28, 0x88, 0xa9, 0x24, 0x29, 0x55, 0xf2, 0x01, 0x30, 0x80,
					0xa9, 0x7e, 0xa3, 0x55, 0x7c, 0x6d, 0xfe, 0x8a, 0x5d, 0x94, 0x0d, 0x8f, 0x65, 0x46, 0xdd, 0x99,
					0x69, 0xf2, 0xf9, 0x10, 0xd5, 0xcf, 0x15, 0xcc, 0x0e, 0x39, 0x17, 0xa8, 0xd9, 0x90, 0x21, 0x57,
					0x5e, 0x27, 0xdb, 0xfd, 0x25, 0x61, 0x54, 0xb1, 0x4d, 0xdc, 0xbf, 0xb1, 0xbf, 0xb4, 0x5e, 0x44,
				}

				drand = NewDRand(nil)

				groupData, err = ioutil.ReadFile("./testdata/group.toml")
				Expect(err).To(BeNil())
				err = drand.init(groupData)
				Expect(err).To(BeNil())

				err = drand.Verify(secret, previousSecret, secretRound)
			})

			It("should return no error", func() {
				Expect(err).To(BeNil())
			})
		})
	})
})
